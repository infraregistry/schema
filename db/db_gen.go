// --- template _header.gotpl ---
// Code generated by Prisma Client Go. DO NOT EDIT.
//nolint
//go:build !codeanalysis
// +build !codeanalysis

package db

import (
	"context"
	"os"
	"slices"
	"testing"

	// no-op import for go modules
	_ "github.com/joho/godotenv"
	_ "github.com/shopspring/decimal"

	"github.com/steebchen/prisma-client-go/engine"
	"github.com/steebchen/prisma-client-go/engine/mock"
	"github.com/steebchen/prisma-client-go/runtime/builder"
	"github.com/steebchen/prisma-client-go/runtime/lifecycle"
	"github.com/steebchen/prisma-client-go/runtime/raw"
	"github.com/steebchen/prisma-client-go/runtime/transaction"
	"github.com/steebchen/prisma-client-go/runtime/types"
	rawmodels "github.com/steebchen/prisma-client-go/runtime/types/raw"
)

// ignore unused os import as it may not be needed depending on engine type
var _ = os.DevNull

// re-declare variables which are needed in Prisma Client Go but also should be exported
// in the generated client

type PrismaTransaction = transaction.Transaction

const RFC3339Milli = types.RFC3339Milli

type BatchResult = types.BatchResult

type Boolean = bool
type String = string
type Int = int
type Float = float64

type DateTime = types.DateTime
type JSON = types.JSON
type Bytes = types.Bytes
type BigInt = types.BigInt
type Decimal = types.Decimal

type RawString = rawmodels.String
type RawInt = rawmodels.Int
type RawFloat = rawmodels.Float
type RawBoolean = rawmodels.Boolean
type RawDateTime = rawmodels.DateTime
type RawJSON = rawmodels.JSON
type RawBytes = rawmodels.Bytes
type RawBigInt = rawmodels.BigInt
type RawDecimal = rawmodels.Decimal

// deprecated: use SortOrder
type Direction = SortOrder

const (
	// deprecated: use SortOrderAsc
	ASC Direction = "asc"
	// deprecated: use SortOrderDesc
	DESC Direction = "desc"
)

// --- template client.gotpl ---
const datasources = `[{"name":"db","provider":"postgresql","activeProvider":"postgresql","url":{"fromEnvVar":"POSTGRES_URI","value":""},"config":null}]`

const schema = `datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}

model Organization {
  id      String   @id @default(cuid())
  created DateTime @default(now())
  updated DateTime @updatedAt
  name    String
  users   User[]

  @@map("organizations")
}

model User {
  id              String       @id @default(cuid())
  email           String       @unique
  password        String
  status          String
  created         DateTime     @default(now())
  updated         DateTime     @updatedAt
  organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id String
  roles           UserRole[]
  sessions        Session[]

  @@map("users")
}

model Session {
  id      String   @id @default(cuid())
  created DateTime @default(now())
  updated DateTime @updatedAt
  status  String
  user    User     @relation(fields: [user_id], references: [id])
  user_id String

  @@map("sessions")
}

model Registration {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  email     String   @unique
  password  String
  status    String
  role      String
  code      String

  @@map("registrations")
}

model Role {
  id          String           @id @default(cuid())
  created     DateTime         @default(now())
  updated     DateTime         @updatedAt
  name        String           @unique
  permissions RolePermission[]
  users       UserRole[]

  @@map("roles")
}

model Permission {
  id      String           @id @default(cuid())
  created DateTime         @default(now())
  updated DateTime         @updatedAt
  name    String
  roles   RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id            String     @id @default(cuid())
  created       DateTime   @default(now())
  updated       DateTime   @updatedAt
  role          Role       @relation(fields: [role_id], references: [id])
  role_id       String
  permission    Permission @relation(fields: [permission_id], references: [id])
  permission_id String

  @@map("role_permissions")
}

model UserRole {
  id      String   @id @default(cuid())
  created DateTime @default(now())
  updated DateTime @updatedAt
  user    User     @relation(fields: [user_id], references: [id])
  user_id String
  role    Role     @relation(fields: [role_id], references: [id])
  role_id String

  @@map("user_roles")
}
`
const schemaDatasourceURL = ""
const schemaEnvVarName = "POSTGRES_URI"

// hasBinaryTargets is true when binaryTargets are provided on generation time
var hasBinaryTargets = true

// NewClient creates a new Prisma Client Go client.
// The client is not connected to the Prisma engine yet.
//
// Example:
//
//	client := db.NewClient()
//	if err := client.Prisma.Connect(); err != nil {
//	  handle(err)
//	}
//
//	defer func() {
//	  if err := client.Prisma.Disconnect(); err != nil {
//	    panic(fmt.Errorf("could not disconnect: %w", err))
//	  }
//	}()
func NewClient(options ...func(config *PrismaConfig)) *PrismaClient {
	var config PrismaConfig
	for _, option := range options {
		option(&config)
	}

	c := newClient()

	// use the schema connection url if set
	url := config.datasourceURL
	if url == "" {
		url = schemaDatasourceURL
		if url == "" {
			// if not, use the schema env var name
			url = os.Getenv(schemaEnvVarName)
			if url == "" {
				//panic("no connection string found")
				println("WARNING: env var which was defined in the Prisma schema is not set " + schemaEnvVarName)
			}
		}
	}

	c.Engine = engine.NewQueryEngine(schema, hasBinaryTargets, datasources, url)

	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

type PrismaConfig struct {
	datasourceURL string
}

func WithDatasourceURL(url string) func(*PrismaConfig) {
	return func(config *PrismaConfig) {
		config.datasourceURL = url
	}
}

func newMockClient(expectations *[]mock.Expectation) *PrismaClient {
	c := newClient()
	c.Engine = mock.New(expectations)
	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

func newClient() *PrismaClient {
	c := &PrismaClient{}
	c.Organization = organizationActions{client: c}
	c.User = userActions{client: c}
	c.Session = sessionActions{client: c}
	c.Registration = registrationActions{client: c}
	c.Role = roleActions{client: c}
	c.Permission = permissionActions{client: c}
	c.RolePermission = rolePermissionActions{client: c}
	c.UserRole = userRoleActions{client: c}

	c.Prisma = &PrismaActions{
		Raw: &raw.Raw{Engine: c},
		TX:  &transaction.TX{Engine: c},
	}
	return c
}

type PrismaActions struct {
	*lifecycle.Lifecycle
	*raw.Raw
	*transaction.TX
}

// PrismaClient is the instance of the Prisma Client Go client.
type PrismaClient struct {
	// engine is an abstractions of what happens under the hood
	// the query engine can spawn and manage the binary and send requests to it,
	// while a mock engine would collect mocks to verify them later
	engine.Engine

	// prisma provides prisma-related methods as opposed to model methods, such as Connect, Disconnect or raw queries
	Prisma *PrismaActions

	// Organization provides access to CRUD methods.
	Organization organizationActions
	// User provides access to CRUD methods.
	User userActions
	// Session provides access to CRUD methods.
	Session sessionActions
	// Registration provides access to CRUD methods.
	Registration registrationActions
	// Role provides access to CRUD methods.
	Role roleActions
	// Permission provides access to CRUD methods.
	Permission permissionActions
	// RolePermission provides access to CRUD methods.
	RolePermission rolePermissionActions
	// UserRole provides access to CRUD methods.
	UserRole userRoleActions
}

// --- template enums.gotpl ---

type TransactionIsolationLevel string

const (
	TransactionIsolationLevelReadUncommitted TransactionIsolationLevel = "ReadUncommitted"
	TransactionIsolationLevelReadCommitted   TransactionIsolationLevel = "ReadCommitted"
	TransactionIsolationLevelRepeatableRead  TransactionIsolationLevel = "RepeatableRead"
	TransactionIsolationLevelSerializable    TransactionIsolationLevel = "Serializable"
)

type OrganizationScalarFieldEnum string

const (
	OrganizationScalarFieldEnumID      OrganizationScalarFieldEnum = "id"
	OrganizationScalarFieldEnumCreated OrganizationScalarFieldEnum = "created"
	OrganizationScalarFieldEnumUpdated OrganizationScalarFieldEnum = "updated"
	OrganizationScalarFieldEnumName    OrganizationScalarFieldEnum = "name"
)

type UserScalarFieldEnum string

const (
	UserScalarFieldEnumID             UserScalarFieldEnum = "id"
	UserScalarFieldEnumEmail          UserScalarFieldEnum = "email"
	UserScalarFieldEnumPassword       UserScalarFieldEnum = "password"
	UserScalarFieldEnumStatus         UserScalarFieldEnum = "status"
	UserScalarFieldEnumCreated        UserScalarFieldEnum = "created"
	UserScalarFieldEnumUpdated        UserScalarFieldEnum = "updated"
	UserScalarFieldEnumOrganizationID UserScalarFieldEnum = "organization_id"
)

type SessionScalarFieldEnum string

const (
	SessionScalarFieldEnumID      SessionScalarFieldEnum = "id"
	SessionScalarFieldEnumCreated SessionScalarFieldEnum = "created"
	SessionScalarFieldEnumUpdated SessionScalarFieldEnum = "updated"
	SessionScalarFieldEnumStatus  SessionScalarFieldEnum = "status"
	SessionScalarFieldEnumUserID  SessionScalarFieldEnum = "user_id"
)

type RegistrationScalarFieldEnum string

const (
	RegistrationScalarFieldEnumID        RegistrationScalarFieldEnum = "id"
	RegistrationScalarFieldEnumCreatedAt RegistrationScalarFieldEnum = "createdAt"
	RegistrationScalarFieldEnumEmail     RegistrationScalarFieldEnum = "email"
	RegistrationScalarFieldEnumPassword  RegistrationScalarFieldEnum = "password"
	RegistrationScalarFieldEnumStatus    RegistrationScalarFieldEnum = "status"
	RegistrationScalarFieldEnumRole      RegistrationScalarFieldEnum = "role"
	RegistrationScalarFieldEnumCode      RegistrationScalarFieldEnum = "code"
)

type RoleScalarFieldEnum string

const (
	RoleScalarFieldEnumID      RoleScalarFieldEnum = "id"
	RoleScalarFieldEnumCreated RoleScalarFieldEnum = "created"
	RoleScalarFieldEnumUpdated RoleScalarFieldEnum = "updated"
	RoleScalarFieldEnumName    RoleScalarFieldEnum = "name"
)

type PermissionScalarFieldEnum string

const (
	PermissionScalarFieldEnumID      PermissionScalarFieldEnum = "id"
	PermissionScalarFieldEnumCreated PermissionScalarFieldEnum = "created"
	PermissionScalarFieldEnumUpdated PermissionScalarFieldEnum = "updated"
	PermissionScalarFieldEnumName    PermissionScalarFieldEnum = "name"
)

type RolePermissionScalarFieldEnum string

const (
	RolePermissionScalarFieldEnumID           RolePermissionScalarFieldEnum = "id"
	RolePermissionScalarFieldEnumCreated      RolePermissionScalarFieldEnum = "created"
	RolePermissionScalarFieldEnumUpdated      RolePermissionScalarFieldEnum = "updated"
	RolePermissionScalarFieldEnumRoleID       RolePermissionScalarFieldEnum = "role_id"
	RolePermissionScalarFieldEnumPermissionID RolePermissionScalarFieldEnum = "permission_id"
)

type UserRoleScalarFieldEnum string

const (
	UserRoleScalarFieldEnumID      UserRoleScalarFieldEnum = "id"
	UserRoleScalarFieldEnumCreated UserRoleScalarFieldEnum = "created"
	UserRoleScalarFieldEnumUpdated UserRoleScalarFieldEnum = "updated"
	UserRoleScalarFieldEnumUserID  UserRoleScalarFieldEnum = "user_id"
	UserRoleScalarFieldEnumRoleID  UserRoleScalarFieldEnum = "role_id"
)

type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

type QueryMode string

const (
	QueryModeDefault     QueryMode = "default"
	QueryModeInsensitive QueryMode = "insensitive"
)

// --- template errors.gotpl ---
var ErrNotFound = types.ErrNotFound
var IsErrNotFound = types.IsErrNotFound

type ErrUniqueConstraint = types.ErrUniqueConstraint[prismaFields]

// IsErrUniqueConstraint returns on a unique constraint error or violation with error info
// Use as follows:
//
//	user, err := db.User.CreateOne(...).Exec(cxt)
//	if err != nil {
//		if info, err := db.IsErrUniqueConstraint(err); err != nil {
//			// Fields exists for Postgres and SQLite
//			log.Printf("unique constraint on the fields: %s", info.Fields)
//
//			// you can also compare it with generated field names:
//			if info.Fields[0] == db.User.Name.Field() {
//				// do something
//			}
//
//			// For MySQL, use the constraint key
//			log.Printf("unique constraint on the key: %s", info.Key)
//		}
//	}
func IsErrUniqueConstraint(err error) (*types.ErrUniqueConstraint[prismaFields], bool) {
	return types.CheckUniqueConstraint[prismaFields](err)
}

// --- template fields.gotpl ---
type prismaFields string

type organizationPrismaFields = prismaFields

const organizationFieldID organizationPrismaFields = "id"

const organizationFieldCreated organizationPrismaFields = "created"

const organizationFieldUpdated organizationPrismaFields = "updated"

const organizationFieldName organizationPrismaFields = "name"

const organizationFieldUsers organizationPrismaFields = "users"

type userPrismaFields = prismaFields

const userFieldID userPrismaFields = "id"

const userFieldEmail userPrismaFields = "email"

const userFieldPassword userPrismaFields = "password"

const userFieldStatus userPrismaFields = "status"

const userFieldCreated userPrismaFields = "created"

const userFieldUpdated userPrismaFields = "updated"

const userFieldOrganization userPrismaFields = "organization"

const userFieldOrganizationID userPrismaFields = "organization_id"

const userFieldRoles userPrismaFields = "roles"

const userFieldSessions userPrismaFields = "sessions"

type sessionPrismaFields = prismaFields

const sessionFieldID sessionPrismaFields = "id"

const sessionFieldCreated sessionPrismaFields = "created"

const sessionFieldUpdated sessionPrismaFields = "updated"

const sessionFieldStatus sessionPrismaFields = "status"

const sessionFieldUser sessionPrismaFields = "user"

const sessionFieldUserID sessionPrismaFields = "user_id"

type registrationPrismaFields = prismaFields

const registrationFieldID registrationPrismaFields = "id"

const registrationFieldCreatedAt registrationPrismaFields = "createdAt"

const registrationFieldEmail registrationPrismaFields = "email"

const registrationFieldPassword registrationPrismaFields = "password"

const registrationFieldStatus registrationPrismaFields = "status"

const registrationFieldRole registrationPrismaFields = "role"

const registrationFieldCode registrationPrismaFields = "code"

type rolePrismaFields = prismaFields

const roleFieldID rolePrismaFields = "id"

const roleFieldCreated rolePrismaFields = "created"

const roleFieldUpdated rolePrismaFields = "updated"

const roleFieldName rolePrismaFields = "name"

const roleFieldPermissions rolePrismaFields = "permissions"

const roleFieldUsers rolePrismaFields = "users"

type permissionPrismaFields = prismaFields

const permissionFieldID permissionPrismaFields = "id"

const permissionFieldCreated permissionPrismaFields = "created"

const permissionFieldUpdated permissionPrismaFields = "updated"

const permissionFieldName permissionPrismaFields = "name"

const permissionFieldRoles permissionPrismaFields = "roles"

type rolePermissionPrismaFields = prismaFields

const rolePermissionFieldID rolePermissionPrismaFields = "id"

const rolePermissionFieldCreated rolePermissionPrismaFields = "created"

const rolePermissionFieldUpdated rolePermissionPrismaFields = "updated"

const rolePermissionFieldRole rolePermissionPrismaFields = "role"

const rolePermissionFieldRoleID rolePermissionPrismaFields = "role_id"

const rolePermissionFieldPermission rolePermissionPrismaFields = "permission"

const rolePermissionFieldPermissionID rolePermissionPrismaFields = "permission_id"

type userRolePrismaFields = prismaFields

const userRoleFieldID userRolePrismaFields = "id"

const userRoleFieldCreated userRolePrismaFields = "created"

const userRoleFieldUpdated userRolePrismaFields = "updated"

const userRoleFieldUser userRolePrismaFields = "user"

const userRoleFieldUserID userRolePrismaFields = "user_id"

const userRoleFieldRole userRolePrismaFields = "role"

const userRoleFieldRoleID userRolePrismaFields = "role_id"

// --- template mock.gotpl ---
func NewMock() (*PrismaClient, *Mock, func(t *testing.T)) {
	expectations := new([]mock.Expectation)
	pc := newMockClient(expectations)
	m := &Mock{
		Mock: &mock.Mock{
			Expectations: expectations,
		},
	}

	m.Organization = organizationMock{
		mock: m,
	}

	m.User = userMock{
		mock: m,
	}

	m.Session = sessionMock{
		mock: m,
	}

	m.Registration = registrationMock{
		mock: m,
	}

	m.Role = roleMock{
		mock: m,
	}

	m.Permission = permissionMock{
		mock: m,
	}

	m.RolePermission = rolePermissionMock{
		mock: m,
	}

	m.UserRole = userRoleMock{
		mock: m,
	}

	return pc, m, m.Ensure
}

type Mock struct {
	*mock.Mock

	Organization organizationMock

	User userMock

	Session sessionMock

	Registration registrationMock

	Role roleMock

	Permission permissionMock

	RolePermission rolePermissionMock

	UserRole userRoleMock
}

type organizationMock struct {
	mock *Mock
}

type OrganizationMockExpectParam interface {
	ExtractQuery() builder.Query
	organizationModel()
}

func (m *organizationMock) Expect(query OrganizationMockExpectParam) *organizationMockExec {
	return &organizationMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type organizationMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *organizationMockExec) Returns(v OrganizationModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *organizationMockExec) ReturnsMany(v []OrganizationModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *organizationMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type userMock struct {
	mock *Mock
}

type UserMockExpectParam interface {
	ExtractQuery() builder.Query
	userModel()
}

func (m *userMock) Expect(query UserMockExpectParam) *userMockExec {
	return &userMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type userMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *userMockExec) Returns(v UserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userMockExec) ReturnsMany(v []UserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type sessionMock struct {
	mock *Mock
}

type SessionMockExpectParam interface {
	ExtractQuery() builder.Query
	sessionModel()
}

func (m *sessionMock) Expect(query SessionMockExpectParam) *sessionMockExec {
	return &sessionMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type sessionMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *sessionMockExec) Returns(v SessionModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *sessionMockExec) ReturnsMany(v []SessionModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *sessionMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type registrationMock struct {
	mock *Mock
}

type RegistrationMockExpectParam interface {
	ExtractQuery() builder.Query
	registrationModel()
}

func (m *registrationMock) Expect(query RegistrationMockExpectParam) *registrationMockExec {
	return &registrationMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type registrationMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *registrationMockExec) Returns(v RegistrationModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *registrationMockExec) ReturnsMany(v []RegistrationModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *registrationMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type roleMock struct {
	mock *Mock
}

type RoleMockExpectParam interface {
	ExtractQuery() builder.Query
	roleModel()
}

func (m *roleMock) Expect(query RoleMockExpectParam) *roleMockExec {
	return &roleMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type roleMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *roleMockExec) Returns(v RoleModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *roleMockExec) ReturnsMany(v []RoleModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *roleMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type permissionMock struct {
	mock *Mock
}

type PermissionMockExpectParam interface {
	ExtractQuery() builder.Query
	permissionModel()
}

func (m *permissionMock) Expect(query PermissionMockExpectParam) *permissionMockExec {
	return &permissionMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type permissionMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *permissionMockExec) Returns(v PermissionModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *permissionMockExec) ReturnsMany(v []PermissionModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *permissionMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type rolePermissionMock struct {
	mock *Mock
}

type RolePermissionMockExpectParam interface {
	ExtractQuery() builder.Query
	rolePermissionModel()
}

func (m *rolePermissionMock) Expect(query RolePermissionMockExpectParam) *rolePermissionMockExec {
	return &rolePermissionMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type rolePermissionMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *rolePermissionMockExec) Returns(v RolePermissionModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *rolePermissionMockExec) ReturnsMany(v []RolePermissionModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *rolePermissionMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type userRoleMock struct {
	mock *Mock
}

type UserRoleMockExpectParam interface {
	ExtractQuery() builder.Query
	userRoleModel()
}

func (m *userRoleMock) Expect(query UserRoleMockExpectParam) *userRoleMockExec {
	return &userRoleMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type userRoleMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *userRoleMockExec) Returns(v UserRoleModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userRoleMockExec) ReturnsMany(v []UserRoleModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userRoleMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

// --- template models.gotpl ---

// OrganizationModel represents the Organization model and is a wrapper for accessing fields and methods
type OrganizationModel struct {
	InnerOrganization
	RelationsOrganization
}

// InnerOrganization holds the actual data
type InnerOrganization struct {
	ID      string   `json:"id"`
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Name    string   `json:"name"`
}

// RawOrganizationModel is a struct for Organization when used in raw queries
type RawOrganizationModel struct {
	ID      RawString   `json:"id"`
	Created RawDateTime `json:"created"`
	Updated RawDateTime `json:"updated"`
	Name    RawString   `json:"name"`
}

// RelationsOrganization holds the relation data separately
type RelationsOrganization struct {
	Users []UserModel `json:"users,omitempty"`
}

func (r OrganizationModel) Users() (value []UserModel) {
	if r.RelationsOrganization.Users == nil {
		panic("attempted to access users but did not fetch it using the .With() syntax")
	}
	return r.RelationsOrganization.Users
}

// UserModel represents the User model and is a wrapper for accessing fields and methods
type UserModel struct {
	InnerUser
	RelationsUser
}

// InnerUser holds the actual data
type InnerUser struct {
	ID             string   `json:"id"`
	Email          string   `json:"email"`
	Password       string   `json:"password"`
	Status         string   `json:"status"`
	Created        DateTime `json:"created"`
	Updated        DateTime `json:"updated"`
	OrganizationID string   `json:"organization_id"`
}

// RawUserModel is a struct for User when used in raw queries
type RawUserModel struct {
	ID             RawString   `json:"id"`
	Email          RawString   `json:"email"`
	Password       RawString   `json:"password"`
	Status         RawString   `json:"status"`
	Created        RawDateTime `json:"created"`
	Updated        RawDateTime `json:"updated"`
	OrganizationID RawString   `json:"organization_id"`
}

// RelationsUser holds the relation data separately
type RelationsUser struct {
	Organization *OrganizationModel `json:"organization,omitempty"`
	Roles        []UserRoleModel    `json:"roles,omitempty"`
	Sessions     []SessionModel     `json:"sessions,omitempty"`
}

func (r UserModel) Organization() (value *OrganizationModel) {
	if r.RelationsUser.Organization == nil {
		panic("attempted to access organization but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.Organization
}

func (r UserModel) Roles() (value []UserRoleModel) {
	if r.RelationsUser.Roles == nil {
		panic("attempted to access roles but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.Roles
}

func (r UserModel) Sessions() (value []SessionModel) {
	if r.RelationsUser.Sessions == nil {
		panic("attempted to access sessions but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.Sessions
}

// SessionModel represents the Session model and is a wrapper for accessing fields and methods
type SessionModel struct {
	InnerSession
	RelationsSession
}

// InnerSession holds the actual data
type InnerSession struct {
	ID      string   `json:"id"`
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Status  string   `json:"status"`
	UserID  string   `json:"user_id"`
}

// RawSessionModel is a struct for Session when used in raw queries
type RawSessionModel struct {
	ID      RawString   `json:"id"`
	Created RawDateTime `json:"created"`
	Updated RawDateTime `json:"updated"`
	Status  RawString   `json:"status"`
	UserID  RawString   `json:"user_id"`
}

// RelationsSession holds the relation data separately
type RelationsSession struct {
	User *UserModel `json:"user,omitempty"`
}

func (r SessionModel) User() (value *UserModel) {
	if r.RelationsSession.User == nil {
		panic("attempted to access user but did not fetch it using the .With() syntax")
	}
	return r.RelationsSession.User
}

// RegistrationModel represents the Registration model and is a wrapper for accessing fields and methods
type RegistrationModel struct {
	InnerRegistration
	RelationsRegistration
}

// InnerRegistration holds the actual data
type InnerRegistration struct {
	ID        string   `json:"id"`
	CreatedAt DateTime `json:"createdAt"`
	Email     string   `json:"email"`
	Password  string   `json:"password"`
	Status    string   `json:"status"`
	Role      string   `json:"role"`
	Code      string   `json:"code"`
}

// RawRegistrationModel is a struct for Registration when used in raw queries
type RawRegistrationModel struct {
	ID        RawString   `json:"id"`
	CreatedAt RawDateTime `json:"createdAt"`
	Email     RawString   `json:"email"`
	Password  RawString   `json:"password"`
	Status    RawString   `json:"status"`
	Role      RawString   `json:"role"`
	Code      RawString   `json:"code"`
}

// RelationsRegistration holds the relation data separately
type RelationsRegistration struct {
}

// RoleModel represents the Role model and is a wrapper for accessing fields and methods
type RoleModel struct {
	InnerRole
	RelationsRole
}

// InnerRole holds the actual data
type InnerRole struct {
	ID      string   `json:"id"`
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Name    string   `json:"name"`
}

// RawRoleModel is a struct for Role when used in raw queries
type RawRoleModel struct {
	ID      RawString   `json:"id"`
	Created RawDateTime `json:"created"`
	Updated RawDateTime `json:"updated"`
	Name    RawString   `json:"name"`
}

// RelationsRole holds the relation data separately
type RelationsRole struct {
	Permissions []RolePermissionModel `json:"permissions,omitempty"`
	Users       []UserRoleModel       `json:"users,omitempty"`
}

func (r RoleModel) Permissions() (value []RolePermissionModel) {
	if r.RelationsRole.Permissions == nil {
		panic("attempted to access permissions but did not fetch it using the .With() syntax")
	}
	return r.RelationsRole.Permissions
}

func (r RoleModel) Users() (value []UserRoleModel) {
	if r.RelationsRole.Users == nil {
		panic("attempted to access users but did not fetch it using the .With() syntax")
	}
	return r.RelationsRole.Users
}

// PermissionModel represents the Permission model and is a wrapper for accessing fields and methods
type PermissionModel struct {
	InnerPermission
	RelationsPermission
}

// InnerPermission holds the actual data
type InnerPermission struct {
	ID      string   `json:"id"`
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	Name    string   `json:"name"`
}

// RawPermissionModel is a struct for Permission when used in raw queries
type RawPermissionModel struct {
	ID      RawString   `json:"id"`
	Created RawDateTime `json:"created"`
	Updated RawDateTime `json:"updated"`
	Name    RawString   `json:"name"`
}

// RelationsPermission holds the relation data separately
type RelationsPermission struct {
	Roles []RolePermissionModel `json:"roles,omitempty"`
}

func (r PermissionModel) Roles() (value []RolePermissionModel) {
	if r.RelationsPermission.Roles == nil {
		panic("attempted to access roles but did not fetch it using the .With() syntax")
	}
	return r.RelationsPermission.Roles
}

// RolePermissionModel represents the RolePermission model and is a wrapper for accessing fields and methods
type RolePermissionModel struct {
	InnerRolePermission
	RelationsRolePermission
}

// InnerRolePermission holds the actual data
type InnerRolePermission struct {
	ID           string   `json:"id"`
	Created      DateTime `json:"created"`
	Updated      DateTime `json:"updated"`
	RoleID       string   `json:"role_id"`
	PermissionID string   `json:"permission_id"`
}

// RawRolePermissionModel is a struct for RolePermission when used in raw queries
type RawRolePermissionModel struct {
	ID           RawString   `json:"id"`
	Created      RawDateTime `json:"created"`
	Updated      RawDateTime `json:"updated"`
	RoleID       RawString   `json:"role_id"`
	PermissionID RawString   `json:"permission_id"`
}

// RelationsRolePermission holds the relation data separately
type RelationsRolePermission struct {
	Role       *RoleModel       `json:"role,omitempty"`
	Permission *PermissionModel `json:"permission,omitempty"`
}

func (r RolePermissionModel) Role() (value *RoleModel) {
	if r.RelationsRolePermission.Role == nil {
		panic("attempted to access role but did not fetch it using the .With() syntax")
	}
	return r.RelationsRolePermission.Role
}

func (r RolePermissionModel) Permission() (value *PermissionModel) {
	if r.RelationsRolePermission.Permission == nil {
		panic("attempted to access permission but did not fetch it using the .With() syntax")
	}
	return r.RelationsRolePermission.Permission
}

// UserRoleModel represents the UserRole model and is a wrapper for accessing fields and methods
type UserRoleModel struct {
	InnerUserRole
	RelationsUserRole
}

// InnerUserRole holds the actual data
type InnerUserRole struct {
	ID      string   `json:"id"`
	Created DateTime `json:"created"`
	Updated DateTime `json:"updated"`
	UserID  string   `json:"user_id"`
	RoleID  string   `json:"role_id"`
}

// RawUserRoleModel is a struct for UserRole when used in raw queries
type RawUserRoleModel struct {
	ID      RawString   `json:"id"`
	Created RawDateTime `json:"created"`
	Updated RawDateTime `json:"updated"`
	UserID  RawString   `json:"user_id"`
	RoleID  RawString   `json:"role_id"`
}

// RelationsUserRole holds the relation data separately
type RelationsUserRole struct {
	User *UserModel `json:"user,omitempty"`
	Role *RoleModel `json:"role,omitempty"`
}

func (r UserRoleModel) User() (value *UserModel) {
	if r.RelationsUserRole.User == nil {
		panic("attempted to access user but did not fetch it using the .With() syntax")
	}
	return r.RelationsUserRole.User
}

func (r UserRoleModel) Role() (value *RoleModel) {
	if r.RelationsUserRole.Role == nil {
		panic("attempted to access role but did not fetch it using the .With() syntax")
	}
	return r.RelationsUserRole.Role
}

// --- template query.gotpl ---

// Organization acts as a namespaces to access query methods for the Organization model
var Organization = organizationQuery{}

// organizationQuery exposes query functions for the organization model
type organizationQuery struct {

	// ID
	//
	// @required
	ID organizationQueryIDString

	// Created
	//
	// @required
	Created organizationQueryCreatedDateTime

	// Updated
	//
	// @required
	Updated organizationQueryUpdatedDateTime

	// Name
	//
	// @required
	Name organizationQueryNameString

	Users organizationQueryUsersRelations
}

func (organizationQuery) Not(params ...OrganizationWhereParam) organizationDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return organizationDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (organizationQuery) Or(params ...OrganizationWhereParam) organizationDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return organizationDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (organizationQuery) And(params ...OrganizationWhereParam) organizationDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return organizationDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type organizationQueryIDString struct{}

// Set the required value of ID
func (r organizationQueryIDString) Set(value string) organizationSetParam {

	return organizationSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r organizationQueryIDString) SetIfPresent(value *String) organizationSetParam {
	if value == nil {
		return organizationSetParam{}
	}

	return r.Set(*value)
}

func (r organizationQueryIDString) Equals(value string) organizationWithPrismaIDEqualsUniqueParam {

	return organizationWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryIDString) EqualsIfPresent(value *string) organizationWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return organizationWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r organizationQueryIDString) Order(direction SortOrder) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r organizationQueryIDString) Cursor(cursor string) organizationCursorParam {
	return organizationCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r organizationQueryIDString) In(value []string) organizationParamUnique {
	return organizationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryIDString) InIfPresent(value []string) organizationParamUnique {
	if value == nil {
		return organizationParamUnique{}
	}
	return r.In(value)
}

func (r organizationQueryIDString) NotIn(value []string) organizationParamUnique {
	return organizationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryIDString) NotInIfPresent(value []string) organizationParamUnique {
	if value == nil {
		return organizationParamUnique{}
	}
	return r.NotIn(value)
}

func (r organizationQueryIDString) Lt(value string) organizationParamUnique {
	return organizationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryIDString) LtIfPresent(value *string) organizationParamUnique {
	if value == nil {
		return organizationParamUnique{}
	}
	return r.Lt(*value)
}

func (r organizationQueryIDString) Lte(value string) organizationParamUnique {
	return organizationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryIDString) LteIfPresent(value *string) organizationParamUnique {
	if value == nil {
		return organizationParamUnique{}
	}
	return r.Lte(*value)
}

func (r organizationQueryIDString) Gt(value string) organizationParamUnique {
	return organizationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryIDString) GtIfPresent(value *string) organizationParamUnique {
	if value == nil {
		return organizationParamUnique{}
	}
	return r.Gt(*value)
}

func (r organizationQueryIDString) Gte(value string) organizationParamUnique {
	return organizationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryIDString) GteIfPresent(value *string) organizationParamUnique {
	if value == nil {
		return organizationParamUnique{}
	}
	return r.Gte(*value)
}

func (r organizationQueryIDString) Contains(value string) organizationParamUnique {
	return organizationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryIDString) ContainsIfPresent(value *string) organizationParamUnique {
	if value == nil {
		return organizationParamUnique{}
	}
	return r.Contains(*value)
}

func (r organizationQueryIDString) StartsWith(value string) organizationParamUnique {
	return organizationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryIDString) StartsWithIfPresent(value *string) organizationParamUnique {
	if value == nil {
		return organizationParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r organizationQueryIDString) EndsWith(value string) organizationParamUnique {
	return organizationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryIDString) EndsWithIfPresent(value *string) organizationParamUnique {
	if value == nil {
		return organizationParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r organizationQueryIDString) Mode(value QueryMode) organizationParamUnique {
	return organizationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryIDString) ModeIfPresent(value *QueryMode) organizationParamUnique {
	if value == nil {
		return organizationParamUnique{}
	}
	return r.Mode(*value)
}

func (r organizationQueryIDString) Not(value string) organizationParamUnique {
	return organizationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryIDString) NotIfPresent(value *string) organizationParamUnique {
	if value == nil {
		return organizationParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r organizationQueryIDString) HasPrefix(value string) organizationParamUnique {
	return organizationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r organizationQueryIDString) HasPrefixIfPresent(value *string) organizationParamUnique {
	if value == nil {
		return organizationParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r organizationQueryIDString) HasSuffix(value string) organizationParamUnique {
	return organizationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r organizationQueryIDString) HasSuffixIfPresent(value *string) organizationParamUnique {
	if value == nil {
		return organizationParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r organizationQueryIDString) Field() organizationPrismaFields {
	return organizationFieldID
}

// base struct
type organizationQueryCreatedDateTime struct{}

// Set the required value of Created
func (r organizationQueryCreatedDateTime) Set(value DateTime) organizationSetParam {

	return organizationSetParam{
		data: builder.Field{
			Name:  "created",
			Value: value,
		},
	}

}

// Set the optional value of Created dynamically
func (r organizationQueryCreatedDateTime) SetIfPresent(value *DateTime) organizationSetParam {
	if value == nil {
		return organizationSetParam{}
	}

	return r.Set(*value)
}

func (r organizationQueryCreatedDateTime) Equals(value DateTime) organizationWithPrismaCreatedEqualsParam {

	return organizationWithPrismaCreatedEqualsParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryCreatedDateTime) EqualsIfPresent(value *DateTime) organizationWithPrismaCreatedEqualsParam {
	if value == nil {
		return organizationWithPrismaCreatedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r organizationQueryCreatedDateTime) Order(direction SortOrder) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name:  "created",
			Value: direction,
		},
	}
}

func (r organizationQueryCreatedDateTime) Cursor(cursor DateTime) organizationCursorParam {
	return organizationCursorParam{
		data: builder.Field{
			Name:  "created",
			Value: cursor,
		},
	}
}

func (r organizationQueryCreatedDateTime) In(value []DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryCreatedDateTime) InIfPresent(value []DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.In(value)
}

func (r organizationQueryCreatedDateTime) NotIn(value []DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryCreatedDateTime) NotInIfPresent(value []DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.NotIn(value)
}

func (r organizationQueryCreatedDateTime) Lt(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryCreatedDateTime) LtIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Lt(*value)
}

func (r organizationQueryCreatedDateTime) Lte(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryCreatedDateTime) LteIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Lte(*value)
}

func (r organizationQueryCreatedDateTime) Gt(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryCreatedDateTime) GtIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Gt(*value)
}

func (r organizationQueryCreatedDateTime) Gte(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryCreatedDateTime) GteIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Gte(*value)
}

func (r organizationQueryCreatedDateTime) Not(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryCreatedDateTime) NotIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r organizationQueryCreatedDateTime) Before(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r organizationQueryCreatedDateTime) BeforeIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r organizationQueryCreatedDateTime) After(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r organizationQueryCreatedDateTime) AfterIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r organizationQueryCreatedDateTime) BeforeEquals(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r organizationQueryCreatedDateTime) BeforeEqualsIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r organizationQueryCreatedDateTime) AfterEquals(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r organizationQueryCreatedDateTime) AfterEqualsIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r organizationQueryCreatedDateTime) Field() organizationPrismaFields {
	return organizationFieldCreated
}

// base struct
type organizationQueryUpdatedDateTime struct{}

// Set the required value of Updated
func (r organizationQueryUpdatedDateTime) Set(value DateTime) organizationSetParam {

	return organizationSetParam{
		data: builder.Field{
			Name:  "updated",
			Value: value,
		},
	}

}

// Set the optional value of Updated dynamically
func (r organizationQueryUpdatedDateTime) SetIfPresent(value *DateTime) organizationSetParam {
	if value == nil {
		return organizationSetParam{}
	}

	return r.Set(*value)
}

func (r organizationQueryUpdatedDateTime) Equals(value DateTime) organizationWithPrismaUpdatedEqualsParam {

	return organizationWithPrismaUpdatedEqualsParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryUpdatedDateTime) EqualsIfPresent(value *DateTime) organizationWithPrismaUpdatedEqualsParam {
	if value == nil {
		return organizationWithPrismaUpdatedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r organizationQueryUpdatedDateTime) Order(direction SortOrder) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name:  "updated",
			Value: direction,
		},
	}
}

func (r organizationQueryUpdatedDateTime) Cursor(cursor DateTime) organizationCursorParam {
	return organizationCursorParam{
		data: builder.Field{
			Name:  "updated",
			Value: cursor,
		},
	}
}

func (r organizationQueryUpdatedDateTime) In(value []DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryUpdatedDateTime) InIfPresent(value []DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.In(value)
}

func (r organizationQueryUpdatedDateTime) NotIn(value []DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryUpdatedDateTime) NotInIfPresent(value []DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.NotIn(value)
}

func (r organizationQueryUpdatedDateTime) Lt(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryUpdatedDateTime) LtIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Lt(*value)
}

func (r organizationQueryUpdatedDateTime) Lte(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryUpdatedDateTime) LteIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Lte(*value)
}

func (r organizationQueryUpdatedDateTime) Gt(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryUpdatedDateTime) GtIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Gt(*value)
}

func (r organizationQueryUpdatedDateTime) Gte(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryUpdatedDateTime) GteIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Gte(*value)
}

func (r organizationQueryUpdatedDateTime) Not(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryUpdatedDateTime) NotIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r organizationQueryUpdatedDateTime) Before(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r organizationQueryUpdatedDateTime) BeforeIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r organizationQueryUpdatedDateTime) After(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r organizationQueryUpdatedDateTime) AfterIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r organizationQueryUpdatedDateTime) BeforeEquals(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r organizationQueryUpdatedDateTime) BeforeEqualsIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r organizationQueryUpdatedDateTime) AfterEquals(value DateTime) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r organizationQueryUpdatedDateTime) AfterEqualsIfPresent(value *DateTime) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r organizationQueryUpdatedDateTime) Field() organizationPrismaFields {
	return organizationFieldUpdated
}

// base struct
type organizationQueryNameString struct{}

// Set the required value of Name
func (r organizationQueryNameString) Set(value string) organizationWithPrismaNameSetParam {

	return organizationWithPrismaNameSetParam{
		data: builder.Field{
			Name:  "name",
			Value: value,
		},
	}

}

// Set the optional value of Name dynamically
func (r organizationQueryNameString) SetIfPresent(value *String) organizationWithPrismaNameSetParam {
	if value == nil {
		return organizationWithPrismaNameSetParam{}
	}

	return r.Set(*value)
}

func (r organizationQueryNameString) Equals(value string) organizationWithPrismaNameEqualsParam {

	return organizationWithPrismaNameEqualsParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryNameString) EqualsIfPresent(value *string) organizationWithPrismaNameEqualsParam {
	if value == nil {
		return organizationWithPrismaNameEqualsParam{}
	}
	return r.Equals(*value)
}

func (r organizationQueryNameString) Order(direction SortOrder) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name:  "name",
			Value: direction,
		},
	}
}

func (r organizationQueryNameString) Cursor(cursor string) organizationCursorParam {
	return organizationCursorParam{
		data: builder.Field{
			Name:  "name",
			Value: cursor,
		},
	}
}

func (r organizationQueryNameString) In(value []string) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryNameString) InIfPresent(value []string) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.In(value)
}

func (r organizationQueryNameString) NotIn(value []string) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryNameString) NotInIfPresent(value []string) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.NotIn(value)
}

func (r organizationQueryNameString) Lt(value string) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryNameString) LtIfPresent(value *string) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Lt(*value)
}

func (r organizationQueryNameString) Lte(value string) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryNameString) LteIfPresent(value *string) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Lte(*value)
}

func (r organizationQueryNameString) Gt(value string) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryNameString) GtIfPresent(value *string) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Gt(*value)
}

func (r organizationQueryNameString) Gte(value string) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryNameString) GteIfPresent(value *string) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Gte(*value)
}

func (r organizationQueryNameString) Contains(value string) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryNameString) ContainsIfPresent(value *string) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Contains(*value)
}

func (r organizationQueryNameString) StartsWith(value string) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryNameString) StartsWithIfPresent(value *string) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r organizationQueryNameString) EndsWith(value string) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryNameString) EndsWithIfPresent(value *string) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r organizationQueryNameString) Mode(value QueryMode) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryNameString) ModeIfPresent(value *QueryMode) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Mode(*value)
}

func (r organizationQueryNameString) Not(value string) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r organizationQueryNameString) NotIfPresent(value *string) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r organizationQueryNameString) HasPrefix(value string) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r organizationQueryNameString) HasPrefixIfPresent(value *string) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r organizationQueryNameString) HasSuffix(value string) organizationDefaultParam {
	return organizationDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r organizationQueryNameString) HasSuffixIfPresent(value *string) organizationDefaultParam {
	if value == nil {
		return organizationDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r organizationQueryNameString) Field() organizationPrismaFields {
	return organizationFieldName
}

// base struct
type organizationQueryUsersUser struct{}

type organizationQueryUsersRelations struct{}

// Organization -> Users
//
// @relation
// @required
func (organizationQueryUsersRelations) Some(
	params ...UserWhereParam,
) organizationDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return organizationDefaultParam{
		data: builder.Field{
			Name: "users",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// Organization -> Users
//
// @relation
// @required
func (organizationQueryUsersRelations) Every(
	params ...UserWhereParam,
) organizationDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return organizationDefaultParam{
		data: builder.Field{
			Name: "users",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// Organization -> Users
//
// @relation
// @required
func (organizationQueryUsersRelations) None(
	params ...UserWhereParam,
) organizationDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return organizationDefaultParam{
		data: builder.Field{
			Name: "users",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (organizationQueryUsersRelations) Fetch(

	params ...UserWhereParam,

) organizationToUsersFindMany {
	var v organizationToUsersFindMany

	v.query.Operation = "query"
	v.query.Method = "users"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r organizationQueryUsersRelations) Link(
	params ...UserWhereParam,
) organizationSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return organizationSetParam{
		data: builder.Field{
			Name: "users",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r organizationQueryUsersRelations) Unlink(
	params ...UserWhereParam,
) organizationSetParam {
	var v organizationSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = organizationSetParam{
		data: builder.Field{
			Name: "users",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r organizationQueryUsersUser) Field() organizationPrismaFields {
	return organizationFieldUsers
}

// User acts as a namespaces to access query methods for the User model
var User = userQuery{}

// userQuery exposes query functions for the user model
type userQuery struct {

	// ID
	//
	// @required
	ID userQueryIDString

	// Email
	//
	// @required
	// @unique
	Email userQueryEmailString

	// Password
	//
	// @required
	Password userQueryPasswordString

	// Status
	//
	// @required
	Status userQueryStatusString

	// Created
	//
	// @required
	Created userQueryCreatedDateTime

	// Updated
	//
	// @required
	Updated userQueryUpdatedDateTime

	Organization userQueryOrganizationRelations

	// OrganizationID
	//
	// @required
	OrganizationID userQueryOrganizationIDString

	Roles userQueryRolesRelations

	Sessions userQuerySessionsRelations
}

func (userQuery) Not(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) Or(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) And(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type userQueryIDString struct{}

// Set the required value of ID
func (r userQueryIDString) Set(value string) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r userQueryIDString) SetIfPresent(value *String) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryIDString) Equals(value string) userWithPrismaIDEqualsUniqueParam {

	return userWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) EqualsIfPresent(value *string) userWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return userWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userQueryIDString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r userQueryIDString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r userQueryIDString) In(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) InIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.In(value)
}

func (r userQueryIDString) NotIn(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) NotInIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.NotIn(value)
}

func (r userQueryIDString) Lt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) LtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lt(*value)
}

func (r userQueryIDString) Lte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) LteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lte(*value)
}

func (r userQueryIDString) Gt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) GtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gt(*value)
}

func (r userQueryIDString) Gte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) GteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gte(*value)
}

func (r userQueryIDString) Contains(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) ContainsIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Contains(*value)
}

func (r userQueryIDString) StartsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) StartsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r userQueryIDString) EndsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) EndsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r userQueryIDString) Mode(value QueryMode) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) ModeIfPresent(value *QueryMode) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Mode(*value)
}

func (r userQueryIDString) Not(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) NotIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryIDString) HasPrefix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryIDString) HasPrefixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryIDString) HasSuffix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryIDString) HasSuffixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryIDString) Field() userPrismaFields {
	return userFieldID
}

// base struct
type userQueryEmailString struct{}

// Set the required value of Email
func (r userQueryEmailString) Set(value string) userWithPrismaEmailSetParam {

	return userWithPrismaEmailSetParam{
		data: builder.Field{
			Name:  "email",
			Value: value,
		},
	}

}

// Set the optional value of Email dynamically
func (r userQueryEmailString) SetIfPresent(value *String) userWithPrismaEmailSetParam {
	if value == nil {
		return userWithPrismaEmailSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryEmailString) Equals(value string) userWithPrismaEmailEqualsUniqueParam {

	return userWithPrismaEmailEqualsUniqueParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) EqualsIfPresent(value *string) userWithPrismaEmailEqualsUniqueParam {
	if value == nil {
		return userWithPrismaEmailEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userQueryEmailString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "email",
			Value: direction,
		},
	}
}

func (r userQueryEmailString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "email",
			Value: cursor,
		},
	}
}

func (r userQueryEmailString) In(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) InIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.In(value)
}

func (r userQueryEmailString) NotIn(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) NotInIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.NotIn(value)
}

func (r userQueryEmailString) Lt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) LtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lt(*value)
}

func (r userQueryEmailString) Lte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) LteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lte(*value)
}

func (r userQueryEmailString) Gt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) GtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gt(*value)
}

func (r userQueryEmailString) Gte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) GteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gte(*value)
}

func (r userQueryEmailString) Contains(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) ContainsIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Contains(*value)
}

func (r userQueryEmailString) StartsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) StartsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r userQueryEmailString) EndsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) EndsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r userQueryEmailString) Mode(value QueryMode) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) ModeIfPresent(value *QueryMode) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Mode(*value)
}

func (r userQueryEmailString) Not(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryEmailString) NotIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryEmailString) HasPrefix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryEmailString) HasPrefixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryEmailString) HasSuffix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryEmailString) HasSuffixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryEmailString) Field() userPrismaFields {
	return userFieldEmail
}

// base struct
type userQueryPasswordString struct{}

// Set the required value of Password
func (r userQueryPasswordString) Set(value string) userWithPrismaPasswordSetParam {

	return userWithPrismaPasswordSetParam{
		data: builder.Field{
			Name:  "password",
			Value: value,
		},
	}

}

// Set the optional value of Password dynamically
func (r userQueryPasswordString) SetIfPresent(value *String) userWithPrismaPasswordSetParam {
	if value == nil {
		return userWithPrismaPasswordSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryPasswordString) Equals(value string) userWithPrismaPasswordEqualsParam {

	return userWithPrismaPasswordEqualsParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) EqualsIfPresent(value *string) userWithPrismaPasswordEqualsParam {
	if value == nil {
		return userWithPrismaPasswordEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryPasswordString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "password",
			Value: direction,
		},
	}
}

func (r userQueryPasswordString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "password",
			Value: cursor,
		},
	}
}

func (r userQueryPasswordString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryPasswordString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryPasswordString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryPasswordString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryPasswordString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryPasswordString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryPasswordString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryPasswordString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryPasswordString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryPasswordString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryPasswordString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryPasswordString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryPasswordString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryPasswordString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryPasswordString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryPasswordString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryPasswordString) Field() userPrismaFields {
	return userFieldPassword
}

// base struct
type userQueryStatusString struct{}

// Set the required value of Status
func (r userQueryStatusString) Set(value string) userWithPrismaStatusSetParam {

	return userWithPrismaStatusSetParam{
		data: builder.Field{
			Name:  "status",
			Value: value,
		},
	}

}

// Set the optional value of Status dynamically
func (r userQueryStatusString) SetIfPresent(value *String) userWithPrismaStatusSetParam {
	if value == nil {
		return userWithPrismaStatusSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryStatusString) Equals(value string) userWithPrismaStatusEqualsParam {

	return userWithPrismaStatusEqualsParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryStatusString) EqualsIfPresent(value *string) userWithPrismaStatusEqualsParam {
	if value == nil {
		return userWithPrismaStatusEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryStatusString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "status",
			Value: direction,
		},
	}
}

func (r userQueryStatusString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "status",
			Value: cursor,
		},
	}
}

func (r userQueryStatusString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryStatusString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryStatusString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryStatusString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryStatusString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryStatusString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryStatusString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryStatusString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryStatusString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryStatusString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryStatusString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryStatusString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryStatusString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryStatusString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryStatusString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryStatusString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryStatusString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryStatusString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryStatusString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryStatusString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryStatusString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryStatusString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryStatusString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryStatusString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryStatusString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryStatusString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryStatusString) Field() userPrismaFields {
	return userFieldStatus
}

// base struct
type userQueryCreatedDateTime struct{}

// Set the required value of Created
func (r userQueryCreatedDateTime) Set(value DateTime) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "created",
			Value: value,
		},
	}

}

// Set the optional value of Created dynamically
func (r userQueryCreatedDateTime) SetIfPresent(value *DateTime) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryCreatedDateTime) Equals(value DateTime) userWithPrismaCreatedEqualsParam {

	return userWithPrismaCreatedEqualsParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedDateTime) EqualsIfPresent(value *DateTime) userWithPrismaCreatedEqualsParam {
	if value == nil {
		return userWithPrismaCreatedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryCreatedDateTime) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "created",
			Value: direction,
		},
	}
}

func (r userQueryCreatedDateTime) Cursor(cursor DateTime) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "created",
			Value: cursor,
		},
	}
}

func (r userQueryCreatedDateTime) In(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedDateTime) InIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryCreatedDateTime) NotIn(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedDateTime) NotInIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryCreatedDateTime) Lt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedDateTime) LtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryCreatedDateTime) Lte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedDateTime) LteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryCreatedDateTime) Gt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedDateTime) GtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryCreatedDateTime) Gte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedDateTime) GteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryCreatedDateTime) Not(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryCreatedDateTime) NotIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userQueryCreatedDateTime) Before(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userQueryCreatedDateTime) BeforeIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userQueryCreatedDateTime) After(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userQueryCreatedDateTime) AfterIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userQueryCreatedDateTime) BeforeEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userQueryCreatedDateTime) BeforeEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userQueryCreatedDateTime) AfterEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userQueryCreatedDateTime) AfterEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userQueryCreatedDateTime) Field() userPrismaFields {
	return userFieldCreated
}

// base struct
type userQueryUpdatedDateTime struct{}

// Set the required value of Updated
func (r userQueryUpdatedDateTime) Set(value DateTime) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "updated",
			Value: value,
		},
	}

}

// Set the optional value of Updated dynamically
func (r userQueryUpdatedDateTime) SetIfPresent(value *DateTime) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryUpdatedDateTime) Equals(value DateTime) userWithPrismaUpdatedEqualsParam {

	return userWithPrismaUpdatedEqualsParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedDateTime) EqualsIfPresent(value *DateTime) userWithPrismaUpdatedEqualsParam {
	if value == nil {
		return userWithPrismaUpdatedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryUpdatedDateTime) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "updated",
			Value: direction,
		},
	}
}

func (r userQueryUpdatedDateTime) Cursor(cursor DateTime) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "updated",
			Value: cursor,
		},
	}
}

func (r userQueryUpdatedDateTime) In(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedDateTime) InIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryUpdatedDateTime) NotIn(value []DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedDateTime) NotInIfPresent(value []DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryUpdatedDateTime) Lt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedDateTime) LtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryUpdatedDateTime) Lte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedDateTime) LteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryUpdatedDateTime) Gt(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedDateTime) GtIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryUpdatedDateTime) Gte(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedDateTime) GteIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryUpdatedDateTime) Not(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUpdatedDateTime) NotIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userQueryUpdatedDateTime) Before(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userQueryUpdatedDateTime) BeforeIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userQueryUpdatedDateTime) After(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userQueryUpdatedDateTime) AfterIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userQueryUpdatedDateTime) BeforeEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userQueryUpdatedDateTime) BeforeEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userQueryUpdatedDateTime) AfterEquals(value DateTime) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userQueryUpdatedDateTime) AfterEqualsIfPresent(value *DateTime) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userQueryUpdatedDateTime) Field() userPrismaFields {
	return userFieldUpdated
}

// base struct
type userQueryOrganizationOrganization struct{}

type userQueryOrganizationRelations struct{}

// User -> Organization
//
// @relation
// @required
func (userQueryOrganizationRelations) Where(
	params ...OrganizationWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "organization",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryOrganizationRelations) Fetch() userToOrganizationFindUnique {
	var v userToOrganizationFindUnique

	v.query.Operation = "query"
	v.query.Method = "organization"
	v.query.Outputs = organizationOutput

	return v
}

func (r userQueryOrganizationRelations) Link(
	params OrganizationWhereParam,
) userWithPrismaOrganizationSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return userWithPrismaOrganizationSetParam{}
	}

	fields = append(fields, f)

	return userWithPrismaOrganizationSetParam{
		data: builder.Field{
			Name: "organization",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r userQueryOrganizationRelations) Unlink() userWithPrismaOrganizationSetParam {
	var v userWithPrismaOrganizationSetParam

	v = userWithPrismaOrganizationSetParam{
		data: builder.Field{
			Name: "organization",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r userQueryOrganizationOrganization) Field() userPrismaFields {
	return userFieldOrganization
}

// base struct
type userQueryOrganizationIDString struct{}

// Set the required value of OrganizationID
func (r userQueryOrganizationIDString) Set(value string) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "organization_id",
			Value: value,
		},
	}

}

// Set the optional value of OrganizationID dynamically
func (r userQueryOrganizationIDString) SetIfPresent(value *String) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryOrganizationIDString) Equals(value string) userWithPrismaOrganizationIDEqualsParam {

	return userWithPrismaOrganizationIDEqualsParam{
		data: builder.Field{
			Name: "organization_id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryOrganizationIDString) EqualsIfPresent(value *string) userWithPrismaOrganizationIDEqualsParam {
	if value == nil {
		return userWithPrismaOrganizationIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryOrganizationIDString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "organization_id",
			Value: direction,
		},
	}
}

func (r userQueryOrganizationIDString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "organization_id",
			Value: cursor,
		},
	}
}

func (r userQueryOrganizationIDString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "organization_id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryOrganizationIDString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryOrganizationIDString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "organization_id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryOrganizationIDString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryOrganizationIDString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "organization_id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryOrganizationIDString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryOrganizationIDString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "organization_id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryOrganizationIDString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryOrganizationIDString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "organization_id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryOrganizationIDString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryOrganizationIDString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "organization_id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryOrganizationIDString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryOrganizationIDString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "organization_id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryOrganizationIDString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryOrganizationIDString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "organization_id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryOrganizationIDString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryOrganizationIDString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "organization_id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryOrganizationIDString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryOrganizationIDString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "organization_id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryOrganizationIDString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryOrganizationIDString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "organization_id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryOrganizationIDString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryOrganizationIDString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "organization_id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryOrganizationIDString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryOrganizationIDString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "organization_id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryOrganizationIDString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryOrganizationIDString) Field() userPrismaFields {
	return userFieldOrganizationID
}

// base struct
type userQueryRolesUserRole struct{}

type userQueryRolesRelations struct{}

// User -> Roles
//
// @relation
// @required
func (userQueryRolesRelations) Some(
	params ...UserRoleWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "roles",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Roles
//
// @relation
// @required
func (userQueryRolesRelations) Every(
	params ...UserRoleWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "roles",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Roles
//
// @relation
// @required
func (userQueryRolesRelations) None(
	params ...UserRoleWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "roles",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryRolesRelations) Fetch(

	params ...UserRoleWhereParam,

) userToRolesFindMany {
	var v userToRolesFindMany

	v.query.Operation = "query"
	v.query.Method = "roles"
	v.query.Outputs = userRoleOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryRolesRelations) Link(
	params ...UserRoleWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "roles",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryRolesRelations) Unlink(
	params ...UserRoleWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "roles",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQueryRolesUserRole) Field() userPrismaFields {
	return userFieldRoles
}

// base struct
type userQuerySessionsSession struct{}

type userQuerySessionsRelations struct{}

// User -> Sessions
//
// @relation
// @required
func (userQuerySessionsRelations) Some(
	params ...SessionWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "sessions",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Sessions
//
// @relation
// @required
func (userQuerySessionsRelations) Every(
	params ...SessionWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "sessions",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Sessions
//
// @relation
// @required
func (userQuerySessionsRelations) None(
	params ...SessionWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "sessions",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQuerySessionsRelations) Fetch(

	params ...SessionWhereParam,

) userToSessionsFindMany {
	var v userToSessionsFindMany

	v.query.Operation = "query"
	v.query.Method = "sessions"
	v.query.Outputs = sessionOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQuerySessionsRelations) Link(
	params ...SessionWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "sessions",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQuerySessionsRelations) Unlink(
	params ...SessionWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "sessions",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQuerySessionsSession) Field() userPrismaFields {
	return userFieldSessions
}

// Session acts as a namespaces to access query methods for the Session model
var Session = sessionQuery{}

// sessionQuery exposes query functions for the session model
type sessionQuery struct {

	// ID
	//
	// @required
	ID sessionQueryIDString

	// Created
	//
	// @required
	Created sessionQueryCreatedDateTime

	// Updated
	//
	// @required
	Updated sessionQueryUpdatedDateTime

	// Status
	//
	// @required
	Status sessionQueryStatusString

	User sessionQueryUserRelations

	// UserID
	//
	// @required
	UserID sessionQueryUserIDString
}

func (sessionQuery) Not(params ...SessionWhereParam) sessionDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return sessionDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (sessionQuery) Or(params ...SessionWhereParam) sessionDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return sessionDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (sessionQuery) And(params ...SessionWhereParam) sessionDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return sessionDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type sessionQueryIDString struct{}

// Set the required value of ID
func (r sessionQueryIDString) Set(value string) sessionSetParam {

	return sessionSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r sessionQueryIDString) SetIfPresent(value *String) sessionSetParam {
	if value == nil {
		return sessionSetParam{}
	}

	return r.Set(*value)
}

func (r sessionQueryIDString) Equals(value string) sessionWithPrismaIDEqualsUniqueParam {

	return sessionWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryIDString) EqualsIfPresent(value *string) sessionWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return sessionWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r sessionQueryIDString) Order(direction SortOrder) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r sessionQueryIDString) Cursor(cursor string) sessionCursorParam {
	return sessionCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r sessionQueryIDString) In(value []string) sessionParamUnique {
	return sessionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryIDString) InIfPresent(value []string) sessionParamUnique {
	if value == nil {
		return sessionParamUnique{}
	}
	return r.In(value)
}

func (r sessionQueryIDString) NotIn(value []string) sessionParamUnique {
	return sessionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryIDString) NotInIfPresent(value []string) sessionParamUnique {
	if value == nil {
		return sessionParamUnique{}
	}
	return r.NotIn(value)
}

func (r sessionQueryIDString) Lt(value string) sessionParamUnique {
	return sessionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryIDString) LtIfPresent(value *string) sessionParamUnique {
	if value == nil {
		return sessionParamUnique{}
	}
	return r.Lt(*value)
}

func (r sessionQueryIDString) Lte(value string) sessionParamUnique {
	return sessionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryIDString) LteIfPresent(value *string) sessionParamUnique {
	if value == nil {
		return sessionParamUnique{}
	}
	return r.Lte(*value)
}

func (r sessionQueryIDString) Gt(value string) sessionParamUnique {
	return sessionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryIDString) GtIfPresent(value *string) sessionParamUnique {
	if value == nil {
		return sessionParamUnique{}
	}
	return r.Gt(*value)
}

func (r sessionQueryIDString) Gte(value string) sessionParamUnique {
	return sessionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryIDString) GteIfPresent(value *string) sessionParamUnique {
	if value == nil {
		return sessionParamUnique{}
	}
	return r.Gte(*value)
}

func (r sessionQueryIDString) Contains(value string) sessionParamUnique {
	return sessionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryIDString) ContainsIfPresent(value *string) sessionParamUnique {
	if value == nil {
		return sessionParamUnique{}
	}
	return r.Contains(*value)
}

func (r sessionQueryIDString) StartsWith(value string) sessionParamUnique {
	return sessionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryIDString) StartsWithIfPresent(value *string) sessionParamUnique {
	if value == nil {
		return sessionParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r sessionQueryIDString) EndsWith(value string) sessionParamUnique {
	return sessionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryIDString) EndsWithIfPresent(value *string) sessionParamUnique {
	if value == nil {
		return sessionParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r sessionQueryIDString) Mode(value QueryMode) sessionParamUnique {
	return sessionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryIDString) ModeIfPresent(value *QueryMode) sessionParamUnique {
	if value == nil {
		return sessionParamUnique{}
	}
	return r.Mode(*value)
}

func (r sessionQueryIDString) Not(value string) sessionParamUnique {
	return sessionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryIDString) NotIfPresent(value *string) sessionParamUnique {
	if value == nil {
		return sessionParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r sessionQueryIDString) HasPrefix(value string) sessionParamUnique {
	return sessionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r sessionQueryIDString) HasPrefixIfPresent(value *string) sessionParamUnique {
	if value == nil {
		return sessionParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r sessionQueryIDString) HasSuffix(value string) sessionParamUnique {
	return sessionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r sessionQueryIDString) HasSuffixIfPresent(value *string) sessionParamUnique {
	if value == nil {
		return sessionParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r sessionQueryIDString) Field() sessionPrismaFields {
	return sessionFieldID
}

// base struct
type sessionQueryCreatedDateTime struct{}

// Set the required value of Created
func (r sessionQueryCreatedDateTime) Set(value DateTime) sessionSetParam {

	return sessionSetParam{
		data: builder.Field{
			Name:  "created",
			Value: value,
		},
	}

}

// Set the optional value of Created dynamically
func (r sessionQueryCreatedDateTime) SetIfPresent(value *DateTime) sessionSetParam {
	if value == nil {
		return sessionSetParam{}
	}

	return r.Set(*value)
}

func (r sessionQueryCreatedDateTime) Equals(value DateTime) sessionWithPrismaCreatedEqualsParam {

	return sessionWithPrismaCreatedEqualsParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryCreatedDateTime) EqualsIfPresent(value *DateTime) sessionWithPrismaCreatedEqualsParam {
	if value == nil {
		return sessionWithPrismaCreatedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r sessionQueryCreatedDateTime) Order(direction SortOrder) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name:  "created",
			Value: direction,
		},
	}
}

func (r sessionQueryCreatedDateTime) Cursor(cursor DateTime) sessionCursorParam {
	return sessionCursorParam{
		data: builder.Field{
			Name:  "created",
			Value: cursor,
		},
	}
}

func (r sessionQueryCreatedDateTime) In(value []DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryCreatedDateTime) InIfPresent(value []DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.In(value)
}

func (r sessionQueryCreatedDateTime) NotIn(value []DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryCreatedDateTime) NotInIfPresent(value []DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.NotIn(value)
}

func (r sessionQueryCreatedDateTime) Lt(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryCreatedDateTime) LtIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Lt(*value)
}

func (r sessionQueryCreatedDateTime) Lte(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryCreatedDateTime) LteIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Lte(*value)
}

func (r sessionQueryCreatedDateTime) Gt(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryCreatedDateTime) GtIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Gt(*value)
}

func (r sessionQueryCreatedDateTime) Gte(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryCreatedDateTime) GteIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Gte(*value)
}

func (r sessionQueryCreatedDateTime) Not(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryCreatedDateTime) NotIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r sessionQueryCreatedDateTime) Before(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r sessionQueryCreatedDateTime) BeforeIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r sessionQueryCreatedDateTime) After(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r sessionQueryCreatedDateTime) AfterIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r sessionQueryCreatedDateTime) BeforeEquals(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r sessionQueryCreatedDateTime) BeforeEqualsIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r sessionQueryCreatedDateTime) AfterEquals(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r sessionQueryCreatedDateTime) AfterEqualsIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r sessionQueryCreatedDateTime) Field() sessionPrismaFields {
	return sessionFieldCreated
}

// base struct
type sessionQueryUpdatedDateTime struct{}

// Set the required value of Updated
func (r sessionQueryUpdatedDateTime) Set(value DateTime) sessionSetParam {

	return sessionSetParam{
		data: builder.Field{
			Name:  "updated",
			Value: value,
		},
	}

}

// Set the optional value of Updated dynamically
func (r sessionQueryUpdatedDateTime) SetIfPresent(value *DateTime) sessionSetParam {
	if value == nil {
		return sessionSetParam{}
	}

	return r.Set(*value)
}

func (r sessionQueryUpdatedDateTime) Equals(value DateTime) sessionWithPrismaUpdatedEqualsParam {

	return sessionWithPrismaUpdatedEqualsParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUpdatedDateTime) EqualsIfPresent(value *DateTime) sessionWithPrismaUpdatedEqualsParam {
	if value == nil {
		return sessionWithPrismaUpdatedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r sessionQueryUpdatedDateTime) Order(direction SortOrder) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name:  "updated",
			Value: direction,
		},
	}
}

func (r sessionQueryUpdatedDateTime) Cursor(cursor DateTime) sessionCursorParam {
	return sessionCursorParam{
		data: builder.Field{
			Name:  "updated",
			Value: cursor,
		},
	}
}

func (r sessionQueryUpdatedDateTime) In(value []DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUpdatedDateTime) InIfPresent(value []DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.In(value)
}

func (r sessionQueryUpdatedDateTime) NotIn(value []DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUpdatedDateTime) NotInIfPresent(value []DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.NotIn(value)
}

func (r sessionQueryUpdatedDateTime) Lt(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUpdatedDateTime) LtIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Lt(*value)
}

func (r sessionQueryUpdatedDateTime) Lte(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUpdatedDateTime) LteIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Lte(*value)
}

func (r sessionQueryUpdatedDateTime) Gt(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUpdatedDateTime) GtIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Gt(*value)
}

func (r sessionQueryUpdatedDateTime) Gte(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUpdatedDateTime) GteIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Gte(*value)
}

func (r sessionQueryUpdatedDateTime) Not(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUpdatedDateTime) NotIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r sessionQueryUpdatedDateTime) Before(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r sessionQueryUpdatedDateTime) BeforeIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r sessionQueryUpdatedDateTime) After(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r sessionQueryUpdatedDateTime) AfterIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r sessionQueryUpdatedDateTime) BeforeEquals(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r sessionQueryUpdatedDateTime) BeforeEqualsIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r sessionQueryUpdatedDateTime) AfterEquals(value DateTime) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r sessionQueryUpdatedDateTime) AfterEqualsIfPresent(value *DateTime) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r sessionQueryUpdatedDateTime) Field() sessionPrismaFields {
	return sessionFieldUpdated
}

// base struct
type sessionQueryStatusString struct{}

// Set the required value of Status
func (r sessionQueryStatusString) Set(value string) sessionWithPrismaStatusSetParam {

	return sessionWithPrismaStatusSetParam{
		data: builder.Field{
			Name:  "status",
			Value: value,
		},
	}

}

// Set the optional value of Status dynamically
func (r sessionQueryStatusString) SetIfPresent(value *String) sessionWithPrismaStatusSetParam {
	if value == nil {
		return sessionWithPrismaStatusSetParam{}
	}

	return r.Set(*value)
}

func (r sessionQueryStatusString) Equals(value string) sessionWithPrismaStatusEqualsParam {

	return sessionWithPrismaStatusEqualsParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryStatusString) EqualsIfPresent(value *string) sessionWithPrismaStatusEqualsParam {
	if value == nil {
		return sessionWithPrismaStatusEqualsParam{}
	}
	return r.Equals(*value)
}

func (r sessionQueryStatusString) Order(direction SortOrder) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name:  "status",
			Value: direction,
		},
	}
}

func (r sessionQueryStatusString) Cursor(cursor string) sessionCursorParam {
	return sessionCursorParam{
		data: builder.Field{
			Name:  "status",
			Value: cursor,
		},
	}
}

func (r sessionQueryStatusString) In(value []string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryStatusString) InIfPresent(value []string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.In(value)
}

func (r sessionQueryStatusString) NotIn(value []string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryStatusString) NotInIfPresent(value []string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.NotIn(value)
}

func (r sessionQueryStatusString) Lt(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryStatusString) LtIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Lt(*value)
}

func (r sessionQueryStatusString) Lte(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryStatusString) LteIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Lte(*value)
}

func (r sessionQueryStatusString) Gt(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryStatusString) GtIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Gt(*value)
}

func (r sessionQueryStatusString) Gte(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryStatusString) GteIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Gte(*value)
}

func (r sessionQueryStatusString) Contains(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryStatusString) ContainsIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Contains(*value)
}

func (r sessionQueryStatusString) StartsWith(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryStatusString) StartsWithIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r sessionQueryStatusString) EndsWith(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryStatusString) EndsWithIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r sessionQueryStatusString) Mode(value QueryMode) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryStatusString) ModeIfPresent(value *QueryMode) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Mode(*value)
}

func (r sessionQueryStatusString) Not(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryStatusString) NotIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r sessionQueryStatusString) HasPrefix(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r sessionQueryStatusString) HasPrefixIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r sessionQueryStatusString) HasSuffix(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r sessionQueryStatusString) HasSuffixIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r sessionQueryStatusString) Field() sessionPrismaFields {
	return sessionFieldStatus
}

// base struct
type sessionQueryUserUser struct{}

type sessionQueryUserRelations struct{}

// Session -> User
//
// @relation
// @required
func (sessionQueryUserRelations) Where(
	params ...UserWhereParam,
) sessionDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return sessionDefaultParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (sessionQueryUserRelations) Fetch() sessionToUserFindUnique {
	var v sessionToUserFindUnique

	v.query.Operation = "query"
	v.query.Method = "user"
	v.query.Outputs = userOutput

	return v
}

func (r sessionQueryUserRelations) Link(
	params UserWhereParam,
) sessionWithPrismaUserSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return sessionWithPrismaUserSetParam{}
	}

	fields = append(fields, f)

	return sessionWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r sessionQueryUserRelations) Unlink() sessionWithPrismaUserSetParam {
	var v sessionWithPrismaUserSetParam

	v = sessionWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r sessionQueryUserUser) Field() sessionPrismaFields {
	return sessionFieldUser
}

// base struct
type sessionQueryUserIDString struct{}

// Set the required value of UserID
func (r sessionQueryUserIDString) Set(value string) sessionSetParam {

	return sessionSetParam{
		data: builder.Field{
			Name:  "user_id",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r sessionQueryUserIDString) SetIfPresent(value *String) sessionSetParam {
	if value == nil {
		return sessionSetParam{}
	}

	return r.Set(*value)
}

func (r sessionQueryUserIDString) Equals(value string) sessionWithPrismaUserIDEqualsParam {

	return sessionWithPrismaUserIDEqualsParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUserIDString) EqualsIfPresent(value *string) sessionWithPrismaUserIDEqualsParam {
	if value == nil {
		return sessionWithPrismaUserIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r sessionQueryUserIDString) Order(direction SortOrder) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name:  "user_id",
			Value: direction,
		},
	}
}

func (r sessionQueryUserIDString) Cursor(cursor string) sessionCursorParam {
	return sessionCursorParam{
		data: builder.Field{
			Name:  "user_id",
			Value: cursor,
		},
	}
}

func (r sessionQueryUserIDString) In(value []string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUserIDString) InIfPresent(value []string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.In(value)
}

func (r sessionQueryUserIDString) NotIn(value []string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUserIDString) NotInIfPresent(value []string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.NotIn(value)
}

func (r sessionQueryUserIDString) Lt(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUserIDString) LtIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Lt(*value)
}

func (r sessionQueryUserIDString) Lte(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUserIDString) LteIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Lte(*value)
}

func (r sessionQueryUserIDString) Gt(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUserIDString) GtIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Gt(*value)
}

func (r sessionQueryUserIDString) Gte(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUserIDString) GteIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Gte(*value)
}

func (r sessionQueryUserIDString) Contains(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUserIDString) ContainsIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Contains(*value)
}

func (r sessionQueryUserIDString) StartsWith(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUserIDString) StartsWithIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r sessionQueryUserIDString) EndsWith(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUserIDString) EndsWithIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r sessionQueryUserIDString) Mode(value QueryMode) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUserIDString) ModeIfPresent(value *QueryMode) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Mode(*value)
}

func (r sessionQueryUserIDString) Not(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r sessionQueryUserIDString) NotIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r sessionQueryUserIDString) HasPrefix(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r sessionQueryUserIDString) HasPrefixIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r sessionQueryUserIDString) HasSuffix(value string) sessionDefaultParam {
	return sessionDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r sessionQueryUserIDString) HasSuffixIfPresent(value *string) sessionDefaultParam {
	if value == nil {
		return sessionDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r sessionQueryUserIDString) Field() sessionPrismaFields {
	return sessionFieldUserID
}

// Registration acts as a namespaces to access query methods for the Registration model
var Registration = registrationQuery{}

// registrationQuery exposes query functions for the registration model
type registrationQuery struct {

	// ID
	//
	// @required
	ID registrationQueryIDString

	// CreatedAt
	//
	// @required
	CreatedAt registrationQueryCreatedAtDateTime

	// Email
	//
	// @required
	// @unique
	Email registrationQueryEmailString

	// Password
	//
	// @required
	Password registrationQueryPasswordString

	// Status
	//
	// @required
	Status registrationQueryStatusString

	// Role
	//
	// @required
	Role registrationQueryRoleString

	// Code
	//
	// @required
	Code registrationQueryCodeString
}

func (registrationQuery) Not(params ...RegistrationWhereParam) registrationDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return registrationDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (registrationQuery) Or(params ...RegistrationWhereParam) registrationDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return registrationDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (registrationQuery) And(params ...RegistrationWhereParam) registrationDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return registrationDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type registrationQueryIDString struct{}

// Set the required value of ID
func (r registrationQueryIDString) Set(value string) registrationSetParam {

	return registrationSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r registrationQueryIDString) SetIfPresent(value *String) registrationSetParam {
	if value == nil {
		return registrationSetParam{}
	}

	return r.Set(*value)
}

func (r registrationQueryIDString) Equals(value string) registrationWithPrismaIDEqualsUniqueParam {

	return registrationWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryIDString) EqualsIfPresent(value *string) registrationWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return registrationWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r registrationQueryIDString) Order(direction SortOrder) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r registrationQueryIDString) Cursor(cursor string) registrationCursorParam {
	return registrationCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r registrationQueryIDString) In(value []string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryIDString) InIfPresent(value []string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.In(value)
}

func (r registrationQueryIDString) NotIn(value []string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryIDString) NotInIfPresent(value []string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.NotIn(value)
}

func (r registrationQueryIDString) Lt(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryIDString) LtIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.Lt(*value)
}

func (r registrationQueryIDString) Lte(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryIDString) LteIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.Lte(*value)
}

func (r registrationQueryIDString) Gt(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryIDString) GtIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.Gt(*value)
}

func (r registrationQueryIDString) Gte(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryIDString) GteIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.Gte(*value)
}

func (r registrationQueryIDString) Contains(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryIDString) ContainsIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.Contains(*value)
}

func (r registrationQueryIDString) StartsWith(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryIDString) StartsWithIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r registrationQueryIDString) EndsWith(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryIDString) EndsWithIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r registrationQueryIDString) Mode(value QueryMode) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryIDString) ModeIfPresent(value *QueryMode) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.Mode(*value)
}

func (r registrationQueryIDString) Not(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryIDString) NotIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r registrationQueryIDString) HasPrefix(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r registrationQueryIDString) HasPrefixIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r registrationQueryIDString) HasSuffix(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r registrationQueryIDString) HasSuffixIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r registrationQueryIDString) Field() registrationPrismaFields {
	return registrationFieldID
}

// base struct
type registrationQueryCreatedAtDateTime struct{}

// Set the required value of CreatedAt
func (r registrationQueryCreatedAtDateTime) Set(value DateTime) registrationSetParam {

	return registrationSetParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: value,
		},
	}

}

// Set the optional value of CreatedAt dynamically
func (r registrationQueryCreatedAtDateTime) SetIfPresent(value *DateTime) registrationSetParam {
	if value == nil {
		return registrationSetParam{}
	}

	return r.Set(*value)
}

func (r registrationQueryCreatedAtDateTime) Equals(value DateTime) registrationWithPrismaCreatedAtEqualsParam {

	return registrationWithPrismaCreatedAtEqualsParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCreatedAtDateTime) EqualsIfPresent(value *DateTime) registrationWithPrismaCreatedAtEqualsParam {
	if value == nil {
		return registrationWithPrismaCreatedAtEqualsParam{}
	}
	return r.Equals(*value)
}

func (r registrationQueryCreatedAtDateTime) Order(direction SortOrder) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: direction,
		},
	}
}

func (r registrationQueryCreatedAtDateTime) Cursor(cursor DateTime) registrationCursorParam {
	return registrationCursorParam{
		data: builder.Field{
			Name:  "createdAt",
			Value: cursor,
		},
	}
}

func (r registrationQueryCreatedAtDateTime) In(value []DateTime) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCreatedAtDateTime) InIfPresent(value []DateTime) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.In(value)
}

func (r registrationQueryCreatedAtDateTime) NotIn(value []DateTime) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCreatedAtDateTime) NotInIfPresent(value []DateTime) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.NotIn(value)
}

func (r registrationQueryCreatedAtDateTime) Lt(value DateTime) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCreatedAtDateTime) LtIfPresent(value *DateTime) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Lt(*value)
}

func (r registrationQueryCreatedAtDateTime) Lte(value DateTime) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCreatedAtDateTime) LteIfPresent(value *DateTime) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Lte(*value)
}

func (r registrationQueryCreatedAtDateTime) Gt(value DateTime) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCreatedAtDateTime) GtIfPresent(value *DateTime) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Gt(*value)
}

func (r registrationQueryCreatedAtDateTime) Gte(value DateTime) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCreatedAtDateTime) GteIfPresent(value *DateTime) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Gte(*value)
}

func (r registrationQueryCreatedAtDateTime) Not(value DateTime) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCreatedAtDateTime) NotIfPresent(value *DateTime) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r registrationQueryCreatedAtDateTime) Before(value DateTime) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r registrationQueryCreatedAtDateTime) BeforeIfPresent(value *DateTime) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r registrationQueryCreatedAtDateTime) After(value DateTime) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r registrationQueryCreatedAtDateTime) AfterIfPresent(value *DateTime) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r registrationQueryCreatedAtDateTime) BeforeEquals(value DateTime) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r registrationQueryCreatedAtDateTime) BeforeEqualsIfPresent(value *DateTime) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r registrationQueryCreatedAtDateTime) AfterEquals(value DateTime) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "createdAt",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r registrationQueryCreatedAtDateTime) AfterEqualsIfPresent(value *DateTime) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r registrationQueryCreatedAtDateTime) Field() registrationPrismaFields {
	return registrationFieldCreatedAt
}

// base struct
type registrationQueryEmailString struct{}

// Set the required value of Email
func (r registrationQueryEmailString) Set(value string) registrationWithPrismaEmailSetParam {

	return registrationWithPrismaEmailSetParam{
		data: builder.Field{
			Name:  "email",
			Value: value,
		},
	}

}

// Set the optional value of Email dynamically
func (r registrationQueryEmailString) SetIfPresent(value *String) registrationWithPrismaEmailSetParam {
	if value == nil {
		return registrationWithPrismaEmailSetParam{}
	}

	return r.Set(*value)
}

func (r registrationQueryEmailString) Equals(value string) registrationWithPrismaEmailEqualsUniqueParam {

	return registrationWithPrismaEmailEqualsUniqueParam{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryEmailString) EqualsIfPresent(value *string) registrationWithPrismaEmailEqualsUniqueParam {
	if value == nil {
		return registrationWithPrismaEmailEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r registrationQueryEmailString) Order(direction SortOrder) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name:  "email",
			Value: direction,
		},
	}
}

func (r registrationQueryEmailString) Cursor(cursor string) registrationCursorParam {
	return registrationCursorParam{
		data: builder.Field{
			Name:  "email",
			Value: cursor,
		},
	}
}

func (r registrationQueryEmailString) In(value []string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryEmailString) InIfPresent(value []string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.In(value)
}

func (r registrationQueryEmailString) NotIn(value []string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryEmailString) NotInIfPresent(value []string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.NotIn(value)
}

func (r registrationQueryEmailString) Lt(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryEmailString) LtIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.Lt(*value)
}

func (r registrationQueryEmailString) Lte(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryEmailString) LteIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.Lte(*value)
}

func (r registrationQueryEmailString) Gt(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryEmailString) GtIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.Gt(*value)
}

func (r registrationQueryEmailString) Gte(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryEmailString) GteIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.Gte(*value)
}

func (r registrationQueryEmailString) Contains(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryEmailString) ContainsIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.Contains(*value)
}

func (r registrationQueryEmailString) StartsWith(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryEmailString) StartsWithIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r registrationQueryEmailString) EndsWith(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryEmailString) EndsWithIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r registrationQueryEmailString) Mode(value QueryMode) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryEmailString) ModeIfPresent(value *QueryMode) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.Mode(*value)
}

func (r registrationQueryEmailString) Not(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryEmailString) NotIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r registrationQueryEmailString) HasPrefix(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r registrationQueryEmailString) HasPrefixIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r registrationQueryEmailString) HasSuffix(value string) registrationParamUnique {
	return registrationParamUnique{
		data: builder.Field{
			Name: "email",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r registrationQueryEmailString) HasSuffixIfPresent(value *string) registrationParamUnique {
	if value == nil {
		return registrationParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r registrationQueryEmailString) Field() registrationPrismaFields {
	return registrationFieldEmail
}

// base struct
type registrationQueryPasswordString struct{}

// Set the required value of Password
func (r registrationQueryPasswordString) Set(value string) registrationWithPrismaPasswordSetParam {

	return registrationWithPrismaPasswordSetParam{
		data: builder.Field{
			Name:  "password",
			Value: value,
		},
	}

}

// Set the optional value of Password dynamically
func (r registrationQueryPasswordString) SetIfPresent(value *String) registrationWithPrismaPasswordSetParam {
	if value == nil {
		return registrationWithPrismaPasswordSetParam{}
	}

	return r.Set(*value)
}

func (r registrationQueryPasswordString) Equals(value string) registrationWithPrismaPasswordEqualsParam {

	return registrationWithPrismaPasswordEqualsParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryPasswordString) EqualsIfPresent(value *string) registrationWithPrismaPasswordEqualsParam {
	if value == nil {
		return registrationWithPrismaPasswordEqualsParam{}
	}
	return r.Equals(*value)
}

func (r registrationQueryPasswordString) Order(direction SortOrder) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name:  "password",
			Value: direction,
		},
	}
}

func (r registrationQueryPasswordString) Cursor(cursor string) registrationCursorParam {
	return registrationCursorParam{
		data: builder.Field{
			Name:  "password",
			Value: cursor,
		},
	}
}

func (r registrationQueryPasswordString) In(value []string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryPasswordString) InIfPresent(value []string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.In(value)
}

func (r registrationQueryPasswordString) NotIn(value []string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryPasswordString) NotInIfPresent(value []string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.NotIn(value)
}

func (r registrationQueryPasswordString) Lt(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryPasswordString) LtIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Lt(*value)
}

func (r registrationQueryPasswordString) Lte(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryPasswordString) LteIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Lte(*value)
}

func (r registrationQueryPasswordString) Gt(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryPasswordString) GtIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Gt(*value)
}

func (r registrationQueryPasswordString) Gte(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryPasswordString) GteIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Gte(*value)
}

func (r registrationQueryPasswordString) Contains(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryPasswordString) ContainsIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Contains(*value)
}

func (r registrationQueryPasswordString) StartsWith(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryPasswordString) StartsWithIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r registrationQueryPasswordString) EndsWith(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryPasswordString) EndsWithIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r registrationQueryPasswordString) Mode(value QueryMode) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryPasswordString) ModeIfPresent(value *QueryMode) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Mode(*value)
}

func (r registrationQueryPasswordString) Not(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryPasswordString) NotIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r registrationQueryPasswordString) HasPrefix(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r registrationQueryPasswordString) HasPrefixIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r registrationQueryPasswordString) HasSuffix(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "password",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r registrationQueryPasswordString) HasSuffixIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r registrationQueryPasswordString) Field() registrationPrismaFields {
	return registrationFieldPassword
}

// base struct
type registrationQueryStatusString struct{}

// Set the required value of Status
func (r registrationQueryStatusString) Set(value string) registrationWithPrismaStatusSetParam {

	return registrationWithPrismaStatusSetParam{
		data: builder.Field{
			Name:  "status",
			Value: value,
		},
	}

}

// Set the optional value of Status dynamically
func (r registrationQueryStatusString) SetIfPresent(value *String) registrationWithPrismaStatusSetParam {
	if value == nil {
		return registrationWithPrismaStatusSetParam{}
	}

	return r.Set(*value)
}

func (r registrationQueryStatusString) Equals(value string) registrationWithPrismaStatusEqualsParam {

	return registrationWithPrismaStatusEqualsParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryStatusString) EqualsIfPresent(value *string) registrationWithPrismaStatusEqualsParam {
	if value == nil {
		return registrationWithPrismaStatusEqualsParam{}
	}
	return r.Equals(*value)
}

func (r registrationQueryStatusString) Order(direction SortOrder) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name:  "status",
			Value: direction,
		},
	}
}

func (r registrationQueryStatusString) Cursor(cursor string) registrationCursorParam {
	return registrationCursorParam{
		data: builder.Field{
			Name:  "status",
			Value: cursor,
		},
	}
}

func (r registrationQueryStatusString) In(value []string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryStatusString) InIfPresent(value []string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.In(value)
}

func (r registrationQueryStatusString) NotIn(value []string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryStatusString) NotInIfPresent(value []string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.NotIn(value)
}

func (r registrationQueryStatusString) Lt(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryStatusString) LtIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Lt(*value)
}

func (r registrationQueryStatusString) Lte(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryStatusString) LteIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Lte(*value)
}

func (r registrationQueryStatusString) Gt(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryStatusString) GtIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Gt(*value)
}

func (r registrationQueryStatusString) Gte(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryStatusString) GteIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Gte(*value)
}

func (r registrationQueryStatusString) Contains(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryStatusString) ContainsIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Contains(*value)
}

func (r registrationQueryStatusString) StartsWith(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryStatusString) StartsWithIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r registrationQueryStatusString) EndsWith(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryStatusString) EndsWithIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r registrationQueryStatusString) Mode(value QueryMode) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryStatusString) ModeIfPresent(value *QueryMode) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Mode(*value)
}

func (r registrationQueryStatusString) Not(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryStatusString) NotIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r registrationQueryStatusString) HasPrefix(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r registrationQueryStatusString) HasPrefixIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r registrationQueryStatusString) HasSuffix(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "status",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r registrationQueryStatusString) HasSuffixIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r registrationQueryStatusString) Field() registrationPrismaFields {
	return registrationFieldStatus
}

// base struct
type registrationQueryRoleString struct{}

// Set the required value of Role
func (r registrationQueryRoleString) Set(value string) registrationWithPrismaRoleSetParam {

	return registrationWithPrismaRoleSetParam{
		data: builder.Field{
			Name:  "role",
			Value: value,
		},
	}

}

// Set the optional value of Role dynamically
func (r registrationQueryRoleString) SetIfPresent(value *String) registrationWithPrismaRoleSetParam {
	if value == nil {
		return registrationWithPrismaRoleSetParam{}
	}

	return r.Set(*value)
}

func (r registrationQueryRoleString) Equals(value string) registrationWithPrismaRoleEqualsParam {

	return registrationWithPrismaRoleEqualsParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryRoleString) EqualsIfPresent(value *string) registrationWithPrismaRoleEqualsParam {
	if value == nil {
		return registrationWithPrismaRoleEqualsParam{}
	}
	return r.Equals(*value)
}

func (r registrationQueryRoleString) Order(direction SortOrder) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name:  "role",
			Value: direction,
		},
	}
}

func (r registrationQueryRoleString) Cursor(cursor string) registrationCursorParam {
	return registrationCursorParam{
		data: builder.Field{
			Name:  "role",
			Value: cursor,
		},
	}
}

func (r registrationQueryRoleString) In(value []string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryRoleString) InIfPresent(value []string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.In(value)
}

func (r registrationQueryRoleString) NotIn(value []string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryRoleString) NotInIfPresent(value []string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.NotIn(value)
}

func (r registrationQueryRoleString) Lt(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryRoleString) LtIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Lt(*value)
}

func (r registrationQueryRoleString) Lte(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryRoleString) LteIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Lte(*value)
}

func (r registrationQueryRoleString) Gt(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryRoleString) GtIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Gt(*value)
}

func (r registrationQueryRoleString) Gte(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryRoleString) GteIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Gte(*value)
}

func (r registrationQueryRoleString) Contains(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryRoleString) ContainsIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Contains(*value)
}

func (r registrationQueryRoleString) StartsWith(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryRoleString) StartsWithIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r registrationQueryRoleString) EndsWith(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryRoleString) EndsWithIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r registrationQueryRoleString) Mode(value QueryMode) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryRoleString) ModeIfPresent(value *QueryMode) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Mode(*value)
}

func (r registrationQueryRoleString) Not(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryRoleString) NotIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r registrationQueryRoleString) HasPrefix(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r registrationQueryRoleString) HasPrefixIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r registrationQueryRoleString) HasSuffix(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r registrationQueryRoleString) HasSuffixIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r registrationQueryRoleString) Field() registrationPrismaFields {
	return registrationFieldRole
}

// base struct
type registrationQueryCodeString struct{}

// Set the required value of Code
func (r registrationQueryCodeString) Set(value string) registrationWithPrismaCodeSetParam {

	return registrationWithPrismaCodeSetParam{
		data: builder.Field{
			Name:  "code",
			Value: value,
		},
	}

}

// Set the optional value of Code dynamically
func (r registrationQueryCodeString) SetIfPresent(value *String) registrationWithPrismaCodeSetParam {
	if value == nil {
		return registrationWithPrismaCodeSetParam{}
	}

	return r.Set(*value)
}

func (r registrationQueryCodeString) Equals(value string) registrationWithPrismaCodeEqualsParam {

	return registrationWithPrismaCodeEqualsParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCodeString) EqualsIfPresent(value *string) registrationWithPrismaCodeEqualsParam {
	if value == nil {
		return registrationWithPrismaCodeEqualsParam{}
	}
	return r.Equals(*value)
}

func (r registrationQueryCodeString) Order(direction SortOrder) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name:  "code",
			Value: direction,
		},
	}
}

func (r registrationQueryCodeString) Cursor(cursor string) registrationCursorParam {
	return registrationCursorParam{
		data: builder.Field{
			Name:  "code",
			Value: cursor,
		},
	}
}

func (r registrationQueryCodeString) In(value []string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCodeString) InIfPresent(value []string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.In(value)
}

func (r registrationQueryCodeString) NotIn(value []string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCodeString) NotInIfPresent(value []string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.NotIn(value)
}

func (r registrationQueryCodeString) Lt(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCodeString) LtIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Lt(*value)
}

func (r registrationQueryCodeString) Lte(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCodeString) LteIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Lte(*value)
}

func (r registrationQueryCodeString) Gt(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCodeString) GtIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Gt(*value)
}

func (r registrationQueryCodeString) Gte(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCodeString) GteIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Gte(*value)
}

func (r registrationQueryCodeString) Contains(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCodeString) ContainsIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Contains(*value)
}

func (r registrationQueryCodeString) StartsWith(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCodeString) StartsWithIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r registrationQueryCodeString) EndsWith(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCodeString) EndsWithIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r registrationQueryCodeString) Mode(value QueryMode) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCodeString) ModeIfPresent(value *QueryMode) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Mode(*value)
}

func (r registrationQueryCodeString) Not(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r registrationQueryCodeString) NotIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r registrationQueryCodeString) HasPrefix(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r registrationQueryCodeString) HasPrefixIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r registrationQueryCodeString) HasSuffix(value string) registrationDefaultParam {
	return registrationDefaultParam{
		data: builder.Field{
			Name: "code",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r registrationQueryCodeString) HasSuffixIfPresent(value *string) registrationDefaultParam {
	if value == nil {
		return registrationDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r registrationQueryCodeString) Field() registrationPrismaFields {
	return registrationFieldCode
}

// Role acts as a namespaces to access query methods for the Role model
var Role = roleQuery{}

// roleQuery exposes query functions for the role model
type roleQuery struct {

	// ID
	//
	// @required
	ID roleQueryIDString

	// Created
	//
	// @required
	Created roleQueryCreatedDateTime

	// Updated
	//
	// @required
	Updated roleQueryUpdatedDateTime

	// Name
	//
	// @required
	// @unique
	Name roleQueryNameString

	Permissions roleQueryPermissionsRelations

	Users roleQueryUsersRelations
}

func (roleQuery) Not(params ...RoleWhereParam) roleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roleDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (roleQuery) Or(params ...RoleWhereParam) roleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roleDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (roleQuery) And(params ...RoleWhereParam) roleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roleDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type roleQueryIDString struct{}

// Set the required value of ID
func (r roleQueryIDString) Set(value string) roleSetParam {

	return roleSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r roleQueryIDString) SetIfPresent(value *String) roleSetParam {
	if value == nil {
		return roleSetParam{}
	}

	return r.Set(*value)
}

func (r roleQueryIDString) Equals(value string) roleWithPrismaIDEqualsUniqueParam {

	return roleWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryIDString) EqualsIfPresent(value *string) roleWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return roleWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r roleQueryIDString) Order(direction SortOrder) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r roleQueryIDString) Cursor(cursor string) roleCursorParam {
	return roleCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r roleQueryIDString) In(value []string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryIDString) InIfPresent(value []string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.In(value)
}

func (r roleQueryIDString) NotIn(value []string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryIDString) NotInIfPresent(value []string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.NotIn(value)
}

func (r roleQueryIDString) Lt(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryIDString) LtIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.Lt(*value)
}

func (r roleQueryIDString) Lte(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryIDString) LteIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.Lte(*value)
}

func (r roleQueryIDString) Gt(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryIDString) GtIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.Gt(*value)
}

func (r roleQueryIDString) Gte(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryIDString) GteIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.Gte(*value)
}

func (r roleQueryIDString) Contains(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryIDString) ContainsIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.Contains(*value)
}

func (r roleQueryIDString) StartsWith(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryIDString) StartsWithIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r roleQueryIDString) EndsWith(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryIDString) EndsWithIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r roleQueryIDString) Mode(value QueryMode) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryIDString) ModeIfPresent(value *QueryMode) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.Mode(*value)
}

func (r roleQueryIDString) Not(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryIDString) NotIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r roleQueryIDString) HasPrefix(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r roleQueryIDString) HasPrefixIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r roleQueryIDString) HasSuffix(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r roleQueryIDString) HasSuffixIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r roleQueryIDString) Field() rolePrismaFields {
	return roleFieldID
}

// base struct
type roleQueryCreatedDateTime struct{}

// Set the required value of Created
func (r roleQueryCreatedDateTime) Set(value DateTime) roleSetParam {

	return roleSetParam{
		data: builder.Field{
			Name:  "created",
			Value: value,
		},
	}

}

// Set the optional value of Created dynamically
func (r roleQueryCreatedDateTime) SetIfPresent(value *DateTime) roleSetParam {
	if value == nil {
		return roleSetParam{}
	}

	return r.Set(*value)
}

func (r roleQueryCreatedDateTime) Equals(value DateTime) roleWithPrismaCreatedEqualsParam {

	return roleWithPrismaCreatedEqualsParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryCreatedDateTime) EqualsIfPresent(value *DateTime) roleWithPrismaCreatedEqualsParam {
	if value == nil {
		return roleWithPrismaCreatedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r roleQueryCreatedDateTime) Order(direction SortOrder) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name:  "created",
			Value: direction,
		},
	}
}

func (r roleQueryCreatedDateTime) Cursor(cursor DateTime) roleCursorParam {
	return roleCursorParam{
		data: builder.Field{
			Name:  "created",
			Value: cursor,
		},
	}
}

func (r roleQueryCreatedDateTime) In(value []DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryCreatedDateTime) InIfPresent(value []DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.In(value)
}

func (r roleQueryCreatedDateTime) NotIn(value []DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryCreatedDateTime) NotInIfPresent(value []DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.NotIn(value)
}

func (r roleQueryCreatedDateTime) Lt(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryCreatedDateTime) LtIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.Lt(*value)
}

func (r roleQueryCreatedDateTime) Lte(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryCreatedDateTime) LteIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.Lte(*value)
}

func (r roleQueryCreatedDateTime) Gt(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryCreatedDateTime) GtIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.Gt(*value)
}

func (r roleQueryCreatedDateTime) Gte(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryCreatedDateTime) GteIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.Gte(*value)
}

func (r roleQueryCreatedDateTime) Not(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryCreatedDateTime) NotIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r roleQueryCreatedDateTime) Before(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r roleQueryCreatedDateTime) BeforeIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r roleQueryCreatedDateTime) After(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r roleQueryCreatedDateTime) AfterIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r roleQueryCreatedDateTime) BeforeEquals(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r roleQueryCreatedDateTime) BeforeEqualsIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r roleQueryCreatedDateTime) AfterEquals(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r roleQueryCreatedDateTime) AfterEqualsIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r roleQueryCreatedDateTime) Field() rolePrismaFields {
	return roleFieldCreated
}

// base struct
type roleQueryUpdatedDateTime struct{}

// Set the required value of Updated
func (r roleQueryUpdatedDateTime) Set(value DateTime) roleSetParam {

	return roleSetParam{
		data: builder.Field{
			Name:  "updated",
			Value: value,
		},
	}

}

// Set the optional value of Updated dynamically
func (r roleQueryUpdatedDateTime) SetIfPresent(value *DateTime) roleSetParam {
	if value == nil {
		return roleSetParam{}
	}

	return r.Set(*value)
}

func (r roleQueryUpdatedDateTime) Equals(value DateTime) roleWithPrismaUpdatedEqualsParam {

	return roleWithPrismaUpdatedEqualsParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryUpdatedDateTime) EqualsIfPresent(value *DateTime) roleWithPrismaUpdatedEqualsParam {
	if value == nil {
		return roleWithPrismaUpdatedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r roleQueryUpdatedDateTime) Order(direction SortOrder) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name:  "updated",
			Value: direction,
		},
	}
}

func (r roleQueryUpdatedDateTime) Cursor(cursor DateTime) roleCursorParam {
	return roleCursorParam{
		data: builder.Field{
			Name:  "updated",
			Value: cursor,
		},
	}
}

func (r roleQueryUpdatedDateTime) In(value []DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryUpdatedDateTime) InIfPresent(value []DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.In(value)
}

func (r roleQueryUpdatedDateTime) NotIn(value []DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryUpdatedDateTime) NotInIfPresent(value []DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.NotIn(value)
}

func (r roleQueryUpdatedDateTime) Lt(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryUpdatedDateTime) LtIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.Lt(*value)
}

func (r roleQueryUpdatedDateTime) Lte(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryUpdatedDateTime) LteIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.Lte(*value)
}

func (r roleQueryUpdatedDateTime) Gt(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryUpdatedDateTime) GtIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.Gt(*value)
}

func (r roleQueryUpdatedDateTime) Gte(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryUpdatedDateTime) GteIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.Gte(*value)
}

func (r roleQueryUpdatedDateTime) Not(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryUpdatedDateTime) NotIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r roleQueryUpdatedDateTime) Before(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r roleQueryUpdatedDateTime) BeforeIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r roleQueryUpdatedDateTime) After(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r roleQueryUpdatedDateTime) AfterIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r roleQueryUpdatedDateTime) BeforeEquals(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r roleQueryUpdatedDateTime) BeforeEqualsIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r roleQueryUpdatedDateTime) AfterEquals(value DateTime) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r roleQueryUpdatedDateTime) AfterEqualsIfPresent(value *DateTime) roleDefaultParam {
	if value == nil {
		return roleDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r roleQueryUpdatedDateTime) Field() rolePrismaFields {
	return roleFieldUpdated
}

// base struct
type roleQueryNameString struct{}

// Set the required value of Name
func (r roleQueryNameString) Set(value string) roleWithPrismaNameSetParam {

	return roleWithPrismaNameSetParam{
		data: builder.Field{
			Name:  "name",
			Value: value,
		},
	}

}

// Set the optional value of Name dynamically
func (r roleQueryNameString) SetIfPresent(value *String) roleWithPrismaNameSetParam {
	if value == nil {
		return roleWithPrismaNameSetParam{}
	}

	return r.Set(*value)
}

func (r roleQueryNameString) Equals(value string) roleWithPrismaNameEqualsUniqueParam {

	return roleWithPrismaNameEqualsUniqueParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryNameString) EqualsIfPresent(value *string) roleWithPrismaNameEqualsUniqueParam {
	if value == nil {
		return roleWithPrismaNameEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r roleQueryNameString) Order(direction SortOrder) roleDefaultParam {
	return roleDefaultParam{
		data: builder.Field{
			Name:  "name",
			Value: direction,
		},
	}
}

func (r roleQueryNameString) Cursor(cursor string) roleCursorParam {
	return roleCursorParam{
		data: builder.Field{
			Name:  "name",
			Value: cursor,
		},
	}
}

func (r roleQueryNameString) In(value []string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryNameString) InIfPresent(value []string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.In(value)
}

func (r roleQueryNameString) NotIn(value []string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryNameString) NotInIfPresent(value []string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.NotIn(value)
}

func (r roleQueryNameString) Lt(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryNameString) LtIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.Lt(*value)
}

func (r roleQueryNameString) Lte(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryNameString) LteIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.Lte(*value)
}

func (r roleQueryNameString) Gt(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryNameString) GtIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.Gt(*value)
}

func (r roleQueryNameString) Gte(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryNameString) GteIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.Gte(*value)
}

func (r roleQueryNameString) Contains(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryNameString) ContainsIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.Contains(*value)
}

func (r roleQueryNameString) StartsWith(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryNameString) StartsWithIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r roleQueryNameString) EndsWith(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryNameString) EndsWithIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r roleQueryNameString) Mode(value QueryMode) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryNameString) ModeIfPresent(value *QueryMode) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.Mode(*value)
}

func (r roleQueryNameString) Not(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r roleQueryNameString) NotIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r roleQueryNameString) HasPrefix(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r roleQueryNameString) HasPrefixIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r roleQueryNameString) HasSuffix(value string) roleParamUnique {
	return roleParamUnique{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r roleQueryNameString) HasSuffixIfPresent(value *string) roleParamUnique {
	if value == nil {
		return roleParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r roleQueryNameString) Field() rolePrismaFields {
	return roleFieldName
}

// base struct
type roleQueryPermissionsRolePermission struct{}

type roleQueryPermissionsRelations struct{}

// Role -> Permissions
//
// @relation
// @required
func (roleQueryPermissionsRelations) Some(
	params ...RolePermissionWhereParam,
) roleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roleDefaultParam{
		data: builder.Field{
			Name: "permissions",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// Role -> Permissions
//
// @relation
// @required
func (roleQueryPermissionsRelations) Every(
	params ...RolePermissionWhereParam,
) roleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roleDefaultParam{
		data: builder.Field{
			Name: "permissions",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// Role -> Permissions
//
// @relation
// @required
func (roleQueryPermissionsRelations) None(
	params ...RolePermissionWhereParam,
) roleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roleDefaultParam{
		data: builder.Field{
			Name: "permissions",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (roleQueryPermissionsRelations) Fetch(

	params ...RolePermissionWhereParam,

) roleToPermissionsFindMany {
	var v roleToPermissionsFindMany

	v.query.Operation = "query"
	v.query.Method = "permissions"
	v.query.Outputs = rolePermissionOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r roleQueryPermissionsRelations) Link(
	params ...RolePermissionWhereParam,
) roleSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roleSetParam{
		data: builder.Field{
			Name: "permissions",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r roleQueryPermissionsRelations) Unlink(
	params ...RolePermissionWhereParam,
) roleSetParam {
	var v roleSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = roleSetParam{
		data: builder.Field{
			Name: "permissions",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r roleQueryPermissionsRolePermission) Field() rolePrismaFields {
	return roleFieldPermissions
}

// base struct
type roleQueryUsersUserRole struct{}

type roleQueryUsersRelations struct{}

// Role -> Users
//
// @relation
// @required
func (roleQueryUsersRelations) Some(
	params ...UserRoleWhereParam,
) roleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roleDefaultParam{
		data: builder.Field{
			Name: "users",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// Role -> Users
//
// @relation
// @required
func (roleQueryUsersRelations) Every(
	params ...UserRoleWhereParam,
) roleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roleDefaultParam{
		data: builder.Field{
			Name: "users",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// Role -> Users
//
// @relation
// @required
func (roleQueryUsersRelations) None(
	params ...UserRoleWhereParam,
) roleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roleDefaultParam{
		data: builder.Field{
			Name: "users",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (roleQueryUsersRelations) Fetch(

	params ...UserRoleWhereParam,

) roleToUsersFindMany {
	var v roleToUsersFindMany

	v.query.Operation = "query"
	v.query.Method = "users"
	v.query.Outputs = userRoleOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r roleQueryUsersRelations) Link(
	params ...UserRoleWhereParam,
) roleSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return roleSetParam{
		data: builder.Field{
			Name: "users",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r roleQueryUsersRelations) Unlink(
	params ...UserRoleWhereParam,
) roleSetParam {
	var v roleSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = roleSetParam{
		data: builder.Field{
			Name: "users",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r roleQueryUsersUserRole) Field() rolePrismaFields {
	return roleFieldUsers
}

// Permission acts as a namespaces to access query methods for the Permission model
var Permission = permissionQuery{}

// permissionQuery exposes query functions for the permission model
type permissionQuery struct {

	// ID
	//
	// @required
	ID permissionQueryIDString

	// Created
	//
	// @required
	Created permissionQueryCreatedDateTime

	// Updated
	//
	// @required
	Updated permissionQueryUpdatedDateTime

	// Name
	//
	// @required
	Name permissionQueryNameString

	Roles permissionQueryRolesRelations
}

func (permissionQuery) Not(params ...PermissionWhereParam) permissionDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return permissionDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (permissionQuery) Or(params ...PermissionWhereParam) permissionDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return permissionDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (permissionQuery) And(params ...PermissionWhereParam) permissionDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return permissionDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type permissionQueryIDString struct{}

// Set the required value of ID
func (r permissionQueryIDString) Set(value string) permissionSetParam {

	return permissionSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r permissionQueryIDString) SetIfPresent(value *String) permissionSetParam {
	if value == nil {
		return permissionSetParam{}
	}

	return r.Set(*value)
}

func (r permissionQueryIDString) Equals(value string) permissionWithPrismaIDEqualsUniqueParam {

	return permissionWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryIDString) EqualsIfPresent(value *string) permissionWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return permissionWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r permissionQueryIDString) Order(direction SortOrder) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r permissionQueryIDString) Cursor(cursor string) permissionCursorParam {
	return permissionCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r permissionQueryIDString) In(value []string) permissionParamUnique {
	return permissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryIDString) InIfPresent(value []string) permissionParamUnique {
	if value == nil {
		return permissionParamUnique{}
	}
	return r.In(value)
}

func (r permissionQueryIDString) NotIn(value []string) permissionParamUnique {
	return permissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryIDString) NotInIfPresent(value []string) permissionParamUnique {
	if value == nil {
		return permissionParamUnique{}
	}
	return r.NotIn(value)
}

func (r permissionQueryIDString) Lt(value string) permissionParamUnique {
	return permissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryIDString) LtIfPresent(value *string) permissionParamUnique {
	if value == nil {
		return permissionParamUnique{}
	}
	return r.Lt(*value)
}

func (r permissionQueryIDString) Lte(value string) permissionParamUnique {
	return permissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryIDString) LteIfPresent(value *string) permissionParamUnique {
	if value == nil {
		return permissionParamUnique{}
	}
	return r.Lte(*value)
}

func (r permissionQueryIDString) Gt(value string) permissionParamUnique {
	return permissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryIDString) GtIfPresent(value *string) permissionParamUnique {
	if value == nil {
		return permissionParamUnique{}
	}
	return r.Gt(*value)
}

func (r permissionQueryIDString) Gte(value string) permissionParamUnique {
	return permissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryIDString) GteIfPresent(value *string) permissionParamUnique {
	if value == nil {
		return permissionParamUnique{}
	}
	return r.Gte(*value)
}

func (r permissionQueryIDString) Contains(value string) permissionParamUnique {
	return permissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryIDString) ContainsIfPresent(value *string) permissionParamUnique {
	if value == nil {
		return permissionParamUnique{}
	}
	return r.Contains(*value)
}

func (r permissionQueryIDString) StartsWith(value string) permissionParamUnique {
	return permissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryIDString) StartsWithIfPresent(value *string) permissionParamUnique {
	if value == nil {
		return permissionParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r permissionQueryIDString) EndsWith(value string) permissionParamUnique {
	return permissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryIDString) EndsWithIfPresent(value *string) permissionParamUnique {
	if value == nil {
		return permissionParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r permissionQueryIDString) Mode(value QueryMode) permissionParamUnique {
	return permissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryIDString) ModeIfPresent(value *QueryMode) permissionParamUnique {
	if value == nil {
		return permissionParamUnique{}
	}
	return r.Mode(*value)
}

func (r permissionQueryIDString) Not(value string) permissionParamUnique {
	return permissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryIDString) NotIfPresent(value *string) permissionParamUnique {
	if value == nil {
		return permissionParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r permissionQueryIDString) HasPrefix(value string) permissionParamUnique {
	return permissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r permissionQueryIDString) HasPrefixIfPresent(value *string) permissionParamUnique {
	if value == nil {
		return permissionParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r permissionQueryIDString) HasSuffix(value string) permissionParamUnique {
	return permissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r permissionQueryIDString) HasSuffixIfPresent(value *string) permissionParamUnique {
	if value == nil {
		return permissionParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r permissionQueryIDString) Field() permissionPrismaFields {
	return permissionFieldID
}

// base struct
type permissionQueryCreatedDateTime struct{}

// Set the required value of Created
func (r permissionQueryCreatedDateTime) Set(value DateTime) permissionSetParam {

	return permissionSetParam{
		data: builder.Field{
			Name:  "created",
			Value: value,
		},
	}

}

// Set the optional value of Created dynamically
func (r permissionQueryCreatedDateTime) SetIfPresent(value *DateTime) permissionSetParam {
	if value == nil {
		return permissionSetParam{}
	}

	return r.Set(*value)
}

func (r permissionQueryCreatedDateTime) Equals(value DateTime) permissionWithPrismaCreatedEqualsParam {

	return permissionWithPrismaCreatedEqualsParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryCreatedDateTime) EqualsIfPresent(value *DateTime) permissionWithPrismaCreatedEqualsParam {
	if value == nil {
		return permissionWithPrismaCreatedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r permissionQueryCreatedDateTime) Order(direction SortOrder) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name:  "created",
			Value: direction,
		},
	}
}

func (r permissionQueryCreatedDateTime) Cursor(cursor DateTime) permissionCursorParam {
	return permissionCursorParam{
		data: builder.Field{
			Name:  "created",
			Value: cursor,
		},
	}
}

func (r permissionQueryCreatedDateTime) In(value []DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryCreatedDateTime) InIfPresent(value []DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.In(value)
}

func (r permissionQueryCreatedDateTime) NotIn(value []DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryCreatedDateTime) NotInIfPresent(value []DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.NotIn(value)
}

func (r permissionQueryCreatedDateTime) Lt(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryCreatedDateTime) LtIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Lt(*value)
}

func (r permissionQueryCreatedDateTime) Lte(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryCreatedDateTime) LteIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Lte(*value)
}

func (r permissionQueryCreatedDateTime) Gt(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryCreatedDateTime) GtIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Gt(*value)
}

func (r permissionQueryCreatedDateTime) Gte(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryCreatedDateTime) GteIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Gte(*value)
}

func (r permissionQueryCreatedDateTime) Not(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryCreatedDateTime) NotIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r permissionQueryCreatedDateTime) Before(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r permissionQueryCreatedDateTime) BeforeIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r permissionQueryCreatedDateTime) After(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r permissionQueryCreatedDateTime) AfterIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r permissionQueryCreatedDateTime) BeforeEquals(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r permissionQueryCreatedDateTime) BeforeEqualsIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r permissionQueryCreatedDateTime) AfterEquals(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r permissionQueryCreatedDateTime) AfterEqualsIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r permissionQueryCreatedDateTime) Field() permissionPrismaFields {
	return permissionFieldCreated
}

// base struct
type permissionQueryUpdatedDateTime struct{}

// Set the required value of Updated
func (r permissionQueryUpdatedDateTime) Set(value DateTime) permissionSetParam {

	return permissionSetParam{
		data: builder.Field{
			Name:  "updated",
			Value: value,
		},
	}

}

// Set the optional value of Updated dynamically
func (r permissionQueryUpdatedDateTime) SetIfPresent(value *DateTime) permissionSetParam {
	if value == nil {
		return permissionSetParam{}
	}

	return r.Set(*value)
}

func (r permissionQueryUpdatedDateTime) Equals(value DateTime) permissionWithPrismaUpdatedEqualsParam {

	return permissionWithPrismaUpdatedEqualsParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryUpdatedDateTime) EqualsIfPresent(value *DateTime) permissionWithPrismaUpdatedEqualsParam {
	if value == nil {
		return permissionWithPrismaUpdatedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r permissionQueryUpdatedDateTime) Order(direction SortOrder) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name:  "updated",
			Value: direction,
		},
	}
}

func (r permissionQueryUpdatedDateTime) Cursor(cursor DateTime) permissionCursorParam {
	return permissionCursorParam{
		data: builder.Field{
			Name:  "updated",
			Value: cursor,
		},
	}
}

func (r permissionQueryUpdatedDateTime) In(value []DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryUpdatedDateTime) InIfPresent(value []DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.In(value)
}

func (r permissionQueryUpdatedDateTime) NotIn(value []DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryUpdatedDateTime) NotInIfPresent(value []DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.NotIn(value)
}

func (r permissionQueryUpdatedDateTime) Lt(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryUpdatedDateTime) LtIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Lt(*value)
}

func (r permissionQueryUpdatedDateTime) Lte(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryUpdatedDateTime) LteIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Lte(*value)
}

func (r permissionQueryUpdatedDateTime) Gt(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryUpdatedDateTime) GtIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Gt(*value)
}

func (r permissionQueryUpdatedDateTime) Gte(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryUpdatedDateTime) GteIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Gte(*value)
}

func (r permissionQueryUpdatedDateTime) Not(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryUpdatedDateTime) NotIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r permissionQueryUpdatedDateTime) Before(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r permissionQueryUpdatedDateTime) BeforeIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r permissionQueryUpdatedDateTime) After(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r permissionQueryUpdatedDateTime) AfterIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r permissionQueryUpdatedDateTime) BeforeEquals(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r permissionQueryUpdatedDateTime) BeforeEqualsIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r permissionQueryUpdatedDateTime) AfterEquals(value DateTime) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r permissionQueryUpdatedDateTime) AfterEqualsIfPresent(value *DateTime) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r permissionQueryUpdatedDateTime) Field() permissionPrismaFields {
	return permissionFieldUpdated
}

// base struct
type permissionQueryNameString struct{}

// Set the required value of Name
func (r permissionQueryNameString) Set(value string) permissionWithPrismaNameSetParam {

	return permissionWithPrismaNameSetParam{
		data: builder.Field{
			Name:  "name",
			Value: value,
		},
	}

}

// Set the optional value of Name dynamically
func (r permissionQueryNameString) SetIfPresent(value *String) permissionWithPrismaNameSetParam {
	if value == nil {
		return permissionWithPrismaNameSetParam{}
	}

	return r.Set(*value)
}

func (r permissionQueryNameString) Equals(value string) permissionWithPrismaNameEqualsParam {

	return permissionWithPrismaNameEqualsParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryNameString) EqualsIfPresent(value *string) permissionWithPrismaNameEqualsParam {
	if value == nil {
		return permissionWithPrismaNameEqualsParam{}
	}
	return r.Equals(*value)
}

func (r permissionQueryNameString) Order(direction SortOrder) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name:  "name",
			Value: direction,
		},
	}
}

func (r permissionQueryNameString) Cursor(cursor string) permissionCursorParam {
	return permissionCursorParam{
		data: builder.Field{
			Name:  "name",
			Value: cursor,
		},
	}
}

func (r permissionQueryNameString) In(value []string) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryNameString) InIfPresent(value []string) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.In(value)
}

func (r permissionQueryNameString) NotIn(value []string) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryNameString) NotInIfPresent(value []string) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.NotIn(value)
}

func (r permissionQueryNameString) Lt(value string) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryNameString) LtIfPresent(value *string) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Lt(*value)
}

func (r permissionQueryNameString) Lte(value string) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryNameString) LteIfPresent(value *string) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Lte(*value)
}

func (r permissionQueryNameString) Gt(value string) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryNameString) GtIfPresent(value *string) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Gt(*value)
}

func (r permissionQueryNameString) Gte(value string) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryNameString) GteIfPresent(value *string) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Gte(*value)
}

func (r permissionQueryNameString) Contains(value string) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryNameString) ContainsIfPresent(value *string) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Contains(*value)
}

func (r permissionQueryNameString) StartsWith(value string) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryNameString) StartsWithIfPresent(value *string) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r permissionQueryNameString) EndsWith(value string) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryNameString) EndsWithIfPresent(value *string) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r permissionQueryNameString) Mode(value QueryMode) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryNameString) ModeIfPresent(value *QueryMode) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Mode(*value)
}

func (r permissionQueryNameString) Not(value string) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r permissionQueryNameString) NotIfPresent(value *string) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r permissionQueryNameString) HasPrefix(value string) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r permissionQueryNameString) HasPrefixIfPresent(value *string) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r permissionQueryNameString) HasSuffix(value string) permissionDefaultParam {
	return permissionDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r permissionQueryNameString) HasSuffixIfPresent(value *string) permissionDefaultParam {
	if value == nil {
		return permissionDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r permissionQueryNameString) Field() permissionPrismaFields {
	return permissionFieldName
}

// base struct
type permissionQueryRolesRolePermission struct{}

type permissionQueryRolesRelations struct{}

// Permission -> Roles
//
// @relation
// @required
func (permissionQueryRolesRelations) Some(
	params ...RolePermissionWhereParam,
) permissionDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return permissionDefaultParam{
		data: builder.Field{
			Name: "roles",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// Permission -> Roles
//
// @relation
// @required
func (permissionQueryRolesRelations) Every(
	params ...RolePermissionWhereParam,
) permissionDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return permissionDefaultParam{
		data: builder.Field{
			Name: "roles",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// Permission -> Roles
//
// @relation
// @required
func (permissionQueryRolesRelations) None(
	params ...RolePermissionWhereParam,
) permissionDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return permissionDefaultParam{
		data: builder.Field{
			Name: "roles",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (permissionQueryRolesRelations) Fetch(

	params ...RolePermissionWhereParam,

) permissionToRolesFindMany {
	var v permissionToRolesFindMany

	v.query.Operation = "query"
	v.query.Method = "roles"
	v.query.Outputs = rolePermissionOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r permissionQueryRolesRelations) Link(
	params ...RolePermissionWhereParam,
) permissionSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return permissionSetParam{
		data: builder.Field{
			Name: "roles",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r permissionQueryRolesRelations) Unlink(
	params ...RolePermissionWhereParam,
) permissionSetParam {
	var v permissionSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = permissionSetParam{
		data: builder.Field{
			Name: "roles",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r permissionQueryRolesRolePermission) Field() permissionPrismaFields {
	return permissionFieldRoles
}

// RolePermission acts as a namespaces to access query methods for the RolePermission model
var RolePermission = rolePermissionQuery{}

// rolePermissionQuery exposes query functions for the rolePermission model
type rolePermissionQuery struct {

	// ID
	//
	// @required
	ID rolePermissionQueryIDString

	// Created
	//
	// @required
	Created rolePermissionQueryCreatedDateTime

	// Updated
	//
	// @required
	Updated rolePermissionQueryUpdatedDateTime

	Role rolePermissionQueryRoleRelations

	// RoleID
	//
	// @required
	RoleID rolePermissionQueryRoleIDString

	Permission rolePermissionQueryPermissionRelations

	// PermissionID
	//
	// @required
	PermissionID rolePermissionQueryPermissionIDString
}

func (rolePermissionQuery) Not(params ...RolePermissionWhereParam) rolePermissionDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return rolePermissionDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (rolePermissionQuery) Or(params ...RolePermissionWhereParam) rolePermissionDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return rolePermissionDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (rolePermissionQuery) And(params ...RolePermissionWhereParam) rolePermissionDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return rolePermissionDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type rolePermissionQueryIDString struct{}

// Set the required value of ID
func (r rolePermissionQueryIDString) Set(value string) rolePermissionSetParam {

	return rolePermissionSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r rolePermissionQueryIDString) SetIfPresent(value *String) rolePermissionSetParam {
	if value == nil {
		return rolePermissionSetParam{}
	}

	return r.Set(*value)
}

func (r rolePermissionQueryIDString) Equals(value string) rolePermissionWithPrismaIDEqualsUniqueParam {

	return rolePermissionWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryIDString) EqualsIfPresent(value *string) rolePermissionWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return rolePermissionWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r rolePermissionQueryIDString) Order(direction SortOrder) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r rolePermissionQueryIDString) Cursor(cursor string) rolePermissionCursorParam {
	return rolePermissionCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r rolePermissionQueryIDString) In(value []string) rolePermissionParamUnique {
	return rolePermissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryIDString) InIfPresent(value []string) rolePermissionParamUnique {
	if value == nil {
		return rolePermissionParamUnique{}
	}
	return r.In(value)
}

func (r rolePermissionQueryIDString) NotIn(value []string) rolePermissionParamUnique {
	return rolePermissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryIDString) NotInIfPresent(value []string) rolePermissionParamUnique {
	if value == nil {
		return rolePermissionParamUnique{}
	}
	return r.NotIn(value)
}

func (r rolePermissionQueryIDString) Lt(value string) rolePermissionParamUnique {
	return rolePermissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryIDString) LtIfPresent(value *string) rolePermissionParamUnique {
	if value == nil {
		return rolePermissionParamUnique{}
	}
	return r.Lt(*value)
}

func (r rolePermissionQueryIDString) Lte(value string) rolePermissionParamUnique {
	return rolePermissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryIDString) LteIfPresent(value *string) rolePermissionParamUnique {
	if value == nil {
		return rolePermissionParamUnique{}
	}
	return r.Lte(*value)
}

func (r rolePermissionQueryIDString) Gt(value string) rolePermissionParamUnique {
	return rolePermissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryIDString) GtIfPresent(value *string) rolePermissionParamUnique {
	if value == nil {
		return rolePermissionParamUnique{}
	}
	return r.Gt(*value)
}

func (r rolePermissionQueryIDString) Gte(value string) rolePermissionParamUnique {
	return rolePermissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryIDString) GteIfPresent(value *string) rolePermissionParamUnique {
	if value == nil {
		return rolePermissionParamUnique{}
	}
	return r.Gte(*value)
}

func (r rolePermissionQueryIDString) Contains(value string) rolePermissionParamUnique {
	return rolePermissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryIDString) ContainsIfPresent(value *string) rolePermissionParamUnique {
	if value == nil {
		return rolePermissionParamUnique{}
	}
	return r.Contains(*value)
}

func (r rolePermissionQueryIDString) StartsWith(value string) rolePermissionParamUnique {
	return rolePermissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryIDString) StartsWithIfPresent(value *string) rolePermissionParamUnique {
	if value == nil {
		return rolePermissionParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r rolePermissionQueryIDString) EndsWith(value string) rolePermissionParamUnique {
	return rolePermissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryIDString) EndsWithIfPresent(value *string) rolePermissionParamUnique {
	if value == nil {
		return rolePermissionParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r rolePermissionQueryIDString) Mode(value QueryMode) rolePermissionParamUnique {
	return rolePermissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryIDString) ModeIfPresent(value *QueryMode) rolePermissionParamUnique {
	if value == nil {
		return rolePermissionParamUnique{}
	}
	return r.Mode(*value)
}

func (r rolePermissionQueryIDString) Not(value string) rolePermissionParamUnique {
	return rolePermissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryIDString) NotIfPresent(value *string) rolePermissionParamUnique {
	if value == nil {
		return rolePermissionParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r rolePermissionQueryIDString) HasPrefix(value string) rolePermissionParamUnique {
	return rolePermissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r rolePermissionQueryIDString) HasPrefixIfPresent(value *string) rolePermissionParamUnique {
	if value == nil {
		return rolePermissionParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r rolePermissionQueryIDString) HasSuffix(value string) rolePermissionParamUnique {
	return rolePermissionParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r rolePermissionQueryIDString) HasSuffixIfPresent(value *string) rolePermissionParamUnique {
	if value == nil {
		return rolePermissionParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r rolePermissionQueryIDString) Field() rolePermissionPrismaFields {
	return rolePermissionFieldID
}

// base struct
type rolePermissionQueryCreatedDateTime struct{}

// Set the required value of Created
func (r rolePermissionQueryCreatedDateTime) Set(value DateTime) rolePermissionSetParam {

	return rolePermissionSetParam{
		data: builder.Field{
			Name:  "created",
			Value: value,
		},
	}

}

// Set the optional value of Created dynamically
func (r rolePermissionQueryCreatedDateTime) SetIfPresent(value *DateTime) rolePermissionSetParam {
	if value == nil {
		return rolePermissionSetParam{}
	}

	return r.Set(*value)
}

func (r rolePermissionQueryCreatedDateTime) Equals(value DateTime) rolePermissionWithPrismaCreatedEqualsParam {

	return rolePermissionWithPrismaCreatedEqualsParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryCreatedDateTime) EqualsIfPresent(value *DateTime) rolePermissionWithPrismaCreatedEqualsParam {
	if value == nil {
		return rolePermissionWithPrismaCreatedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r rolePermissionQueryCreatedDateTime) Order(direction SortOrder) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name:  "created",
			Value: direction,
		},
	}
}

func (r rolePermissionQueryCreatedDateTime) Cursor(cursor DateTime) rolePermissionCursorParam {
	return rolePermissionCursorParam{
		data: builder.Field{
			Name:  "created",
			Value: cursor,
		},
	}
}

func (r rolePermissionQueryCreatedDateTime) In(value []DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryCreatedDateTime) InIfPresent(value []DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.In(value)
}

func (r rolePermissionQueryCreatedDateTime) NotIn(value []DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryCreatedDateTime) NotInIfPresent(value []DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.NotIn(value)
}

func (r rolePermissionQueryCreatedDateTime) Lt(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryCreatedDateTime) LtIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Lt(*value)
}

func (r rolePermissionQueryCreatedDateTime) Lte(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryCreatedDateTime) LteIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Lte(*value)
}

func (r rolePermissionQueryCreatedDateTime) Gt(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryCreatedDateTime) GtIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Gt(*value)
}

func (r rolePermissionQueryCreatedDateTime) Gte(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryCreatedDateTime) GteIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Gte(*value)
}

func (r rolePermissionQueryCreatedDateTime) Not(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryCreatedDateTime) NotIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r rolePermissionQueryCreatedDateTime) Before(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r rolePermissionQueryCreatedDateTime) BeforeIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r rolePermissionQueryCreatedDateTime) After(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r rolePermissionQueryCreatedDateTime) AfterIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r rolePermissionQueryCreatedDateTime) BeforeEquals(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r rolePermissionQueryCreatedDateTime) BeforeEqualsIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r rolePermissionQueryCreatedDateTime) AfterEquals(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r rolePermissionQueryCreatedDateTime) AfterEqualsIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r rolePermissionQueryCreatedDateTime) Field() rolePermissionPrismaFields {
	return rolePermissionFieldCreated
}

// base struct
type rolePermissionQueryUpdatedDateTime struct{}

// Set the required value of Updated
func (r rolePermissionQueryUpdatedDateTime) Set(value DateTime) rolePermissionSetParam {

	return rolePermissionSetParam{
		data: builder.Field{
			Name:  "updated",
			Value: value,
		},
	}

}

// Set the optional value of Updated dynamically
func (r rolePermissionQueryUpdatedDateTime) SetIfPresent(value *DateTime) rolePermissionSetParam {
	if value == nil {
		return rolePermissionSetParam{}
	}

	return r.Set(*value)
}

func (r rolePermissionQueryUpdatedDateTime) Equals(value DateTime) rolePermissionWithPrismaUpdatedEqualsParam {

	return rolePermissionWithPrismaUpdatedEqualsParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryUpdatedDateTime) EqualsIfPresent(value *DateTime) rolePermissionWithPrismaUpdatedEqualsParam {
	if value == nil {
		return rolePermissionWithPrismaUpdatedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r rolePermissionQueryUpdatedDateTime) Order(direction SortOrder) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name:  "updated",
			Value: direction,
		},
	}
}

func (r rolePermissionQueryUpdatedDateTime) Cursor(cursor DateTime) rolePermissionCursorParam {
	return rolePermissionCursorParam{
		data: builder.Field{
			Name:  "updated",
			Value: cursor,
		},
	}
}

func (r rolePermissionQueryUpdatedDateTime) In(value []DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryUpdatedDateTime) InIfPresent(value []DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.In(value)
}

func (r rolePermissionQueryUpdatedDateTime) NotIn(value []DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryUpdatedDateTime) NotInIfPresent(value []DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.NotIn(value)
}

func (r rolePermissionQueryUpdatedDateTime) Lt(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryUpdatedDateTime) LtIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Lt(*value)
}

func (r rolePermissionQueryUpdatedDateTime) Lte(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryUpdatedDateTime) LteIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Lte(*value)
}

func (r rolePermissionQueryUpdatedDateTime) Gt(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryUpdatedDateTime) GtIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Gt(*value)
}

func (r rolePermissionQueryUpdatedDateTime) Gte(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryUpdatedDateTime) GteIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Gte(*value)
}

func (r rolePermissionQueryUpdatedDateTime) Not(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryUpdatedDateTime) NotIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r rolePermissionQueryUpdatedDateTime) Before(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r rolePermissionQueryUpdatedDateTime) BeforeIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r rolePermissionQueryUpdatedDateTime) After(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r rolePermissionQueryUpdatedDateTime) AfterIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r rolePermissionQueryUpdatedDateTime) BeforeEquals(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r rolePermissionQueryUpdatedDateTime) BeforeEqualsIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r rolePermissionQueryUpdatedDateTime) AfterEquals(value DateTime) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r rolePermissionQueryUpdatedDateTime) AfterEqualsIfPresent(value *DateTime) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r rolePermissionQueryUpdatedDateTime) Field() rolePermissionPrismaFields {
	return rolePermissionFieldUpdated
}

// base struct
type rolePermissionQueryRoleRole struct{}

type rolePermissionQueryRoleRelations struct{}

// RolePermission -> Role
//
// @relation
// @required
func (rolePermissionQueryRoleRelations) Where(
	params ...RoleWhereParam,
) rolePermissionDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (rolePermissionQueryRoleRelations) Fetch() rolePermissionToRoleFindUnique {
	var v rolePermissionToRoleFindUnique

	v.query.Operation = "query"
	v.query.Method = "role"
	v.query.Outputs = roleOutput

	return v
}

func (r rolePermissionQueryRoleRelations) Link(
	params RoleWhereParam,
) rolePermissionWithPrismaRoleSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return rolePermissionWithPrismaRoleSetParam{}
	}

	fields = append(fields, f)

	return rolePermissionWithPrismaRoleSetParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r rolePermissionQueryRoleRelations) Unlink() rolePermissionWithPrismaRoleSetParam {
	var v rolePermissionWithPrismaRoleSetParam

	v = rolePermissionWithPrismaRoleSetParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r rolePermissionQueryRoleRole) Field() rolePermissionPrismaFields {
	return rolePermissionFieldRole
}

// base struct
type rolePermissionQueryRoleIDString struct{}

// Set the required value of RoleID
func (r rolePermissionQueryRoleIDString) Set(value string) rolePermissionSetParam {

	return rolePermissionSetParam{
		data: builder.Field{
			Name:  "role_id",
			Value: value,
		},
	}

}

// Set the optional value of RoleID dynamically
func (r rolePermissionQueryRoleIDString) SetIfPresent(value *String) rolePermissionSetParam {
	if value == nil {
		return rolePermissionSetParam{}
	}

	return r.Set(*value)
}

func (r rolePermissionQueryRoleIDString) Equals(value string) rolePermissionWithPrismaRoleIDEqualsParam {

	return rolePermissionWithPrismaRoleIDEqualsParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryRoleIDString) EqualsIfPresent(value *string) rolePermissionWithPrismaRoleIDEqualsParam {
	if value == nil {
		return rolePermissionWithPrismaRoleIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r rolePermissionQueryRoleIDString) Order(direction SortOrder) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name:  "role_id",
			Value: direction,
		},
	}
}

func (r rolePermissionQueryRoleIDString) Cursor(cursor string) rolePermissionCursorParam {
	return rolePermissionCursorParam{
		data: builder.Field{
			Name:  "role_id",
			Value: cursor,
		},
	}
}

func (r rolePermissionQueryRoleIDString) In(value []string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryRoleIDString) InIfPresent(value []string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.In(value)
}

func (r rolePermissionQueryRoleIDString) NotIn(value []string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryRoleIDString) NotInIfPresent(value []string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.NotIn(value)
}

func (r rolePermissionQueryRoleIDString) Lt(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryRoleIDString) LtIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Lt(*value)
}

func (r rolePermissionQueryRoleIDString) Lte(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryRoleIDString) LteIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Lte(*value)
}

func (r rolePermissionQueryRoleIDString) Gt(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryRoleIDString) GtIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Gt(*value)
}

func (r rolePermissionQueryRoleIDString) Gte(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryRoleIDString) GteIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Gte(*value)
}

func (r rolePermissionQueryRoleIDString) Contains(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryRoleIDString) ContainsIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Contains(*value)
}

func (r rolePermissionQueryRoleIDString) StartsWith(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryRoleIDString) StartsWithIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r rolePermissionQueryRoleIDString) EndsWith(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryRoleIDString) EndsWithIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r rolePermissionQueryRoleIDString) Mode(value QueryMode) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryRoleIDString) ModeIfPresent(value *QueryMode) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Mode(*value)
}

func (r rolePermissionQueryRoleIDString) Not(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryRoleIDString) NotIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r rolePermissionQueryRoleIDString) HasPrefix(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r rolePermissionQueryRoleIDString) HasPrefixIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r rolePermissionQueryRoleIDString) HasSuffix(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r rolePermissionQueryRoleIDString) HasSuffixIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r rolePermissionQueryRoleIDString) Field() rolePermissionPrismaFields {
	return rolePermissionFieldRoleID
}

// base struct
type rolePermissionQueryPermissionPermission struct{}

type rolePermissionQueryPermissionRelations struct{}

// RolePermission -> Permission
//
// @relation
// @required
func (rolePermissionQueryPermissionRelations) Where(
	params ...PermissionWhereParam,
) rolePermissionDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "permission",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (rolePermissionQueryPermissionRelations) Fetch() rolePermissionToPermissionFindUnique {
	var v rolePermissionToPermissionFindUnique

	v.query.Operation = "query"
	v.query.Method = "permission"
	v.query.Outputs = permissionOutput

	return v
}

func (r rolePermissionQueryPermissionRelations) Link(
	params PermissionWhereParam,
) rolePermissionWithPrismaPermissionSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return rolePermissionWithPrismaPermissionSetParam{}
	}

	fields = append(fields, f)

	return rolePermissionWithPrismaPermissionSetParam{
		data: builder.Field{
			Name: "permission",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r rolePermissionQueryPermissionRelations) Unlink() rolePermissionWithPrismaPermissionSetParam {
	var v rolePermissionWithPrismaPermissionSetParam

	v = rolePermissionWithPrismaPermissionSetParam{
		data: builder.Field{
			Name: "permission",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r rolePermissionQueryPermissionPermission) Field() rolePermissionPrismaFields {
	return rolePermissionFieldPermission
}

// base struct
type rolePermissionQueryPermissionIDString struct{}

// Set the required value of PermissionID
func (r rolePermissionQueryPermissionIDString) Set(value string) rolePermissionSetParam {

	return rolePermissionSetParam{
		data: builder.Field{
			Name:  "permission_id",
			Value: value,
		},
	}

}

// Set the optional value of PermissionID dynamically
func (r rolePermissionQueryPermissionIDString) SetIfPresent(value *String) rolePermissionSetParam {
	if value == nil {
		return rolePermissionSetParam{}
	}

	return r.Set(*value)
}

func (r rolePermissionQueryPermissionIDString) Equals(value string) rolePermissionWithPrismaPermissionIDEqualsParam {

	return rolePermissionWithPrismaPermissionIDEqualsParam{
		data: builder.Field{
			Name: "permission_id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryPermissionIDString) EqualsIfPresent(value *string) rolePermissionWithPrismaPermissionIDEqualsParam {
	if value == nil {
		return rolePermissionWithPrismaPermissionIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r rolePermissionQueryPermissionIDString) Order(direction SortOrder) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name:  "permission_id",
			Value: direction,
		},
	}
}

func (r rolePermissionQueryPermissionIDString) Cursor(cursor string) rolePermissionCursorParam {
	return rolePermissionCursorParam{
		data: builder.Field{
			Name:  "permission_id",
			Value: cursor,
		},
	}
}

func (r rolePermissionQueryPermissionIDString) In(value []string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "permission_id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryPermissionIDString) InIfPresent(value []string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.In(value)
}

func (r rolePermissionQueryPermissionIDString) NotIn(value []string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "permission_id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryPermissionIDString) NotInIfPresent(value []string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.NotIn(value)
}

func (r rolePermissionQueryPermissionIDString) Lt(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "permission_id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryPermissionIDString) LtIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Lt(*value)
}

func (r rolePermissionQueryPermissionIDString) Lte(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "permission_id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryPermissionIDString) LteIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Lte(*value)
}

func (r rolePermissionQueryPermissionIDString) Gt(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "permission_id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryPermissionIDString) GtIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Gt(*value)
}

func (r rolePermissionQueryPermissionIDString) Gte(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "permission_id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryPermissionIDString) GteIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Gte(*value)
}

func (r rolePermissionQueryPermissionIDString) Contains(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "permission_id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryPermissionIDString) ContainsIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Contains(*value)
}

func (r rolePermissionQueryPermissionIDString) StartsWith(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "permission_id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryPermissionIDString) StartsWithIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r rolePermissionQueryPermissionIDString) EndsWith(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "permission_id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryPermissionIDString) EndsWithIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r rolePermissionQueryPermissionIDString) Mode(value QueryMode) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "permission_id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryPermissionIDString) ModeIfPresent(value *QueryMode) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Mode(*value)
}

func (r rolePermissionQueryPermissionIDString) Not(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "permission_id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r rolePermissionQueryPermissionIDString) NotIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r rolePermissionQueryPermissionIDString) HasPrefix(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "permission_id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r rolePermissionQueryPermissionIDString) HasPrefixIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r rolePermissionQueryPermissionIDString) HasSuffix(value string) rolePermissionDefaultParam {
	return rolePermissionDefaultParam{
		data: builder.Field{
			Name: "permission_id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r rolePermissionQueryPermissionIDString) HasSuffixIfPresent(value *string) rolePermissionDefaultParam {
	if value == nil {
		return rolePermissionDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r rolePermissionQueryPermissionIDString) Field() rolePermissionPrismaFields {
	return rolePermissionFieldPermissionID
}

// UserRole acts as a namespaces to access query methods for the UserRole model
var UserRole = userRoleQuery{}

// userRoleQuery exposes query functions for the userRole model
type userRoleQuery struct {

	// ID
	//
	// @required
	ID userRoleQueryIDString

	// Created
	//
	// @required
	Created userRoleQueryCreatedDateTime

	// Updated
	//
	// @required
	Updated userRoleQueryUpdatedDateTime

	User userRoleQueryUserRelations

	// UserID
	//
	// @required
	UserID userRoleQueryUserIDString

	Role userRoleQueryRoleRelations

	// RoleID
	//
	// @required
	RoleID userRoleQueryRoleIDString
}

func (userRoleQuery) Not(params ...UserRoleWhereParam) userRoleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userRoleDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userRoleQuery) Or(params ...UserRoleWhereParam) userRoleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userRoleDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userRoleQuery) And(params ...UserRoleWhereParam) userRoleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userRoleDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type userRoleQueryIDString struct{}

// Set the required value of ID
func (r userRoleQueryIDString) Set(value string) userRoleSetParam {

	return userRoleSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r userRoleQueryIDString) SetIfPresent(value *String) userRoleSetParam {
	if value == nil {
		return userRoleSetParam{}
	}

	return r.Set(*value)
}

func (r userRoleQueryIDString) Equals(value string) userRoleWithPrismaIDEqualsUniqueParam {

	return userRoleWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryIDString) EqualsIfPresent(value *string) userRoleWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return userRoleWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userRoleQueryIDString) Order(direction SortOrder) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r userRoleQueryIDString) Cursor(cursor string) userRoleCursorParam {
	return userRoleCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r userRoleQueryIDString) In(value []string) userRoleParamUnique {
	return userRoleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryIDString) InIfPresent(value []string) userRoleParamUnique {
	if value == nil {
		return userRoleParamUnique{}
	}
	return r.In(value)
}

func (r userRoleQueryIDString) NotIn(value []string) userRoleParamUnique {
	return userRoleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryIDString) NotInIfPresent(value []string) userRoleParamUnique {
	if value == nil {
		return userRoleParamUnique{}
	}
	return r.NotIn(value)
}

func (r userRoleQueryIDString) Lt(value string) userRoleParamUnique {
	return userRoleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryIDString) LtIfPresent(value *string) userRoleParamUnique {
	if value == nil {
		return userRoleParamUnique{}
	}
	return r.Lt(*value)
}

func (r userRoleQueryIDString) Lte(value string) userRoleParamUnique {
	return userRoleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryIDString) LteIfPresent(value *string) userRoleParamUnique {
	if value == nil {
		return userRoleParamUnique{}
	}
	return r.Lte(*value)
}

func (r userRoleQueryIDString) Gt(value string) userRoleParamUnique {
	return userRoleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryIDString) GtIfPresent(value *string) userRoleParamUnique {
	if value == nil {
		return userRoleParamUnique{}
	}
	return r.Gt(*value)
}

func (r userRoleQueryIDString) Gte(value string) userRoleParamUnique {
	return userRoleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryIDString) GteIfPresent(value *string) userRoleParamUnique {
	if value == nil {
		return userRoleParamUnique{}
	}
	return r.Gte(*value)
}

func (r userRoleQueryIDString) Contains(value string) userRoleParamUnique {
	return userRoleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryIDString) ContainsIfPresent(value *string) userRoleParamUnique {
	if value == nil {
		return userRoleParamUnique{}
	}
	return r.Contains(*value)
}

func (r userRoleQueryIDString) StartsWith(value string) userRoleParamUnique {
	return userRoleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryIDString) StartsWithIfPresent(value *string) userRoleParamUnique {
	if value == nil {
		return userRoleParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r userRoleQueryIDString) EndsWith(value string) userRoleParamUnique {
	return userRoleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryIDString) EndsWithIfPresent(value *string) userRoleParamUnique {
	if value == nil {
		return userRoleParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r userRoleQueryIDString) Mode(value QueryMode) userRoleParamUnique {
	return userRoleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryIDString) ModeIfPresent(value *QueryMode) userRoleParamUnique {
	if value == nil {
		return userRoleParamUnique{}
	}
	return r.Mode(*value)
}

func (r userRoleQueryIDString) Not(value string) userRoleParamUnique {
	return userRoleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryIDString) NotIfPresent(value *string) userRoleParamUnique {
	if value == nil {
		return userRoleParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userRoleQueryIDString) HasPrefix(value string) userRoleParamUnique {
	return userRoleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userRoleQueryIDString) HasPrefixIfPresent(value *string) userRoleParamUnique {
	if value == nil {
		return userRoleParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userRoleQueryIDString) HasSuffix(value string) userRoleParamUnique {
	return userRoleParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userRoleQueryIDString) HasSuffixIfPresent(value *string) userRoleParamUnique {
	if value == nil {
		return userRoleParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r userRoleQueryIDString) Field() userRolePrismaFields {
	return userRoleFieldID
}

// base struct
type userRoleQueryCreatedDateTime struct{}

// Set the required value of Created
func (r userRoleQueryCreatedDateTime) Set(value DateTime) userRoleSetParam {

	return userRoleSetParam{
		data: builder.Field{
			Name:  "created",
			Value: value,
		},
	}

}

// Set the optional value of Created dynamically
func (r userRoleQueryCreatedDateTime) SetIfPresent(value *DateTime) userRoleSetParam {
	if value == nil {
		return userRoleSetParam{}
	}

	return r.Set(*value)
}

func (r userRoleQueryCreatedDateTime) Equals(value DateTime) userRoleWithPrismaCreatedEqualsParam {

	return userRoleWithPrismaCreatedEqualsParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryCreatedDateTime) EqualsIfPresent(value *DateTime) userRoleWithPrismaCreatedEqualsParam {
	if value == nil {
		return userRoleWithPrismaCreatedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userRoleQueryCreatedDateTime) Order(direction SortOrder) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name:  "created",
			Value: direction,
		},
	}
}

func (r userRoleQueryCreatedDateTime) Cursor(cursor DateTime) userRoleCursorParam {
	return userRoleCursorParam{
		data: builder.Field{
			Name:  "created",
			Value: cursor,
		},
	}
}

func (r userRoleQueryCreatedDateTime) In(value []DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryCreatedDateTime) InIfPresent(value []DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.In(value)
}

func (r userRoleQueryCreatedDateTime) NotIn(value []DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryCreatedDateTime) NotInIfPresent(value []DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userRoleQueryCreatedDateTime) Lt(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryCreatedDateTime) LtIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userRoleQueryCreatedDateTime) Lte(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryCreatedDateTime) LteIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userRoleQueryCreatedDateTime) Gt(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryCreatedDateTime) GtIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userRoleQueryCreatedDateTime) Gte(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryCreatedDateTime) GteIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userRoleQueryCreatedDateTime) Not(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryCreatedDateTime) NotIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userRoleQueryCreatedDateTime) Before(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userRoleQueryCreatedDateTime) BeforeIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userRoleQueryCreatedDateTime) After(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userRoleQueryCreatedDateTime) AfterIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userRoleQueryCreatedDateTime) BeforeEquals(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userRoleQueryCreatedDateTime) BeforeEqualsIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userRoleQueryCreatedDateTime) AfterEquals(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "created",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userRoleQueryCreatedDateTime) AfterEqualsIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userRoleQueryCreatedDateTime) Field() userRolePrismaFields {
	return userRoleFieldCreated
}

// base struct
type userRoleQueryUpdatedDateTime struct{}

// Set the required value of Updated
func (r userRoleQueryUpdatedDateTime) Set(value DateTime) userRoleSetParam {

	return userRoleSetParam{
		data: builder.Field{
			Name:  "updated",
			Value: value,
		},
	}

}

// Set the optional value of Updated dynamically
func (r userRoleQueryUpdatedDateTime) SetIfPresent(value *DateTime) userRoleSetParam {
	if value == nil {
		return userRoleSetParam{}
	}

	return r.Set(*value)
}

func (r userRoleQueryUpdatedDateTime) Equals(value DateTime) userRoleWithPrismaUpdatedEqualsParam {

	return userRoleWithPrismaUpdatedEqualsParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUpdatedDateTime) EqualsIfPresent(value *DateTime) userRoleWithPrismaUpdatedEqualsParam {
	if value == nil {
		return userRoleWithPrismaUpdatedEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userRoleQueryUpdatedDateTime) Order(direction SortOrder) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name:  "updated",
			Value: direction,
		},
	}
}

func (r userRoleQueryUpdatedDateTime) Cursor(cursor DateTime) userRoleCursorParam {
	return userRoleCursorParam{
		data: builder.Field{
			Name:  "updated",
			Value: cursor,
		},
	}
}

func (r userRoleQueryUpdatedDateTime) In(value []DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUpdatedDateTime) InIfPresent(value []DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.In(value)
}

func (r userRoleQueryUpdatedDateTime) NotIn(value []DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUpdatedDateTime) NotInIfPresent(value []DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userRoleQueryUpdatedDateTime) Lt(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUpdatedDateTime) LtIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userRoleQueryUpdatedDateTime) Lte(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUpdatedDateTime) LteIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userRoleQueryUpdatedDateTime) Gt(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUpdatedDateTime) GtIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userRoleQueryUpdatedDateTime) Gte(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUpdatedDateTime) GteIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userRoleQueryUpdatedDateTime) Not(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUpdatedDateTime) NotIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use Lt instead.

func (r userRoleQueryUpdatedDateTime) Before(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LtIfPresent instead.
func (r userRoleQueryUpdatedDateTime) BeforeIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Before(*value)
}

// deprecated: Use Gt instead.

func (r userRoleQueryUpdatedDateTime) After(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GtIfPresent instead.
func (r userRoleQueryUpdatedDateTime) AfterIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.After(*value)
}

// deprecated: Use Lte instead.

func (r userRoleQueryUpdatedDateTime) BeforeEquals(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use LteIfPresent instead.
func (r userRoleQueryUpdatedDateTime) BeforeEqualsIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.BeforeEquals(*value)
}

// deprecated: Use Gte instead.

func (r userRoleQueryUpdatedDateTime) AfterEquals(value DateTime) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "updated",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use GteIfPresent instead.
func (r userRoleQueryUpdatedDateTime) AfterEqualsIfPresent(value *DateTime) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.AfterEquals(*value)
}

func (r userRoleQueryUpdatedDateTime) Field() userRolePrismaFields {
	return userRoleFieldUpdated
}

// base struct
type userRoleQueryUserUser struct{}

type userRoleQueryUserRelations struct{}

// UserRole -> User
//
// @relation
// @required
func (userRoleQueryUserRelations) Where(
	params ...UserWhereParam,
) userRoleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userRoleDefaultParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (userRoleQueryUserRelations) Fetch() userRoleToUserFindUnique {
	var v userRoleToUserFindUnique

	v.query.Operation = "query"
	v.query.Method = "user"
	v.query.Outputs = userOutput

	return v
}

func (r userRoleQueryUserRelations) Link(
	params UserWhereParam,
) userRoleWithPrismaUserSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return userRoleWithPrismaUserSetParam{}
	}

	fields = append(fields, f)

	return userRoleWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r userRoleQueryUserRelations) Unlink() userRoleWithPrismaUserSetParam {
	var v userRoleWithPrismaUserSetParam

	v = userRoleWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r userRoleQueryUserUser) Field() userRolePrismaFields {
	return userRoleFieldUser
}

// base struct
type userRoleQueryUserIDString struct{}

// Set the required value of UserID
func (r userRoleQueryUserIDString) Set(value string) userRoleSetParam {

	return userRoleSetParam{
		data: builder.Field{
			Name:  "user_id",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r userRoleQueryUserIDString) SetIfPresent(value *String) userRoleSetParam {
	if value == nil {
		return userRoleSetParam{}
	}

	return r.Set(*value)
}

func (r userRoleQueryUserIDString) Equals(value string) userRoleWithPrismaUserIDEqualsParam {

	return userRoleWithPrismaUserIDEqualsParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUserIDString) EqualsIfPresent(value *string) userRoleWithPrismaUserIDEqualsParam {
	if value == nil {
		return userRoleWithPrismaUserIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userRoleQueryUserIDString) Order(direction SortOrder) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name:  "user_id",
			Value: direction,
		},
	}
}

func (r userRoleQueryUserIDString) Cursor(cursor string) userRoleCursorParam {
	return userRoleCursorParam{
		data: builder.Field{
			Name:  "user_id",
			Value: cursor,
		},
	}
}

func (r userRoleQueryUserIDString) In(value []string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUserIDString) InIfPresent(value []string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.In(value)
}

func (r userRoleQueryUserIDString) NotIn(value []string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUserIDString) NotInIfPresent(value []string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userRoleQueryUserIDString) Lt(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUserIDString) LtIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userRoleQueryUserIDString) Lte(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUserIDString) LteIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userRoleQueryUserIDString) Gt(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUserIDString) GtIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userRoleQueryUserIDString) Gte(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUserIDString) GteIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userRoleQueryUserIDString) Contains(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUserIDString) ContainsIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userRoleQueryUserIDString) StartsWith(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUserIDString) StartsWithIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userRoleQueryUserIDString) EndsWith(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUserIDString) EndsWithIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userRoleQueryUserIDString) Mode(value QueryMode) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUserIDString) ModeIfPresent(value *QueryMode) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userRoleQueryUserIDString) Not(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryUserIDString) NotIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userRoleQueryUserIDString) HasPrefix(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userRoleQueryUserIDString) HasPrefixIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userRoleQueryUserIDString) HasSuffix(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "user_id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userRoleQueryUserIDString) HasSuffixIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userRoleQueryUserIDString) Field() userRolePrismaFields {
	return userRoleFieldUserID
}

// base struct
type userRoleQueryRoleRole struct{}

type userRoleQueryRoleRelations struct{}

// UserRole -> Role
//
// @relation
// @required
func (userRoleQueryRoleRelations) Where(
	params ...RoleWhereParam,
) userRoleDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userRoleDefaultParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (userRoleQueryRoleRelations) Fetch() userRoleToRoleFindUnique {
	var v userRoleToRoleFindUnique

	v.query.Operation = "query"
	v.query.Method = "role"
	v.query.Outputs = roleOutput

	return v
}

func (r userRoleQueryRoleRelations) Link(
	params RoleWhereParam,
) userRoleWithPrismaRoleSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return userRoleWithPrismaRoleSetParam{}
	}

	fields = append(fields, f)

	return userRoleWithPrismaRoleSetParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r userRoleQueryRoleRelations) Unlink() userRoleWithPrismaRoleSetParam {
	var v userRoleWithPrismaRoleSetParam

	v = userRoleWithPrismaRoleSetParam{
		data: builder.Field{
			Name: "role",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r userRoleQueryRoleRole) Field() userRolePrismaFields {
	return userRoleFieldRole
}

// base struct
type userRoleQueryRoleIDString struct{}

// Set the required value of RoleID
func (r userRoleQueryRoleIDString) Set(value string) userRoleSetParam {

	return userRoleSetParam{
		data: builder.Field{
			Name:  "role_id",
			Value: value,
		},
	}

}

// Set the optional value of RoleID dynamically
func (r userRoleQueryRoleIDString) SetIfPresent(value *String) userRoleSetParam {
	if value == nil {
		return userRoleSetParam{}
	}

	return r.Set(*value)
}

func (r userRoleQueryRoleIDString) Equals(value string) userRoleWithPrismaRoleIDEqualsParam {

	return userRoleWithPrismaRoleIDEqualsParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryRoleIDString) EqualsIfPresent(value *string) userRoleWithPrismaRoleIDEqualsParam {
	if value == nil {
		return userRoleWithPrismaRoleIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userRoleQueryRoleIDString) Order(direction SortOrder) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name:  "role_id",
			Value: direction,
		},
	}
}

func (r userRoleQueryRoleIDString) Cursor(cursor string) userRoleCursorParam {
	return userRoleCursorParam{
		data: builder.Field{
			Name:  "role_id",
			Value: cursor,
		},
	}
}

func (r userRoleQueryRoleIDString) In(value []string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryRoleIDString) InIfPresent(value []string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.In(value)
}

func (r userRoleQueryRoleIDString) NotIn(value []string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryRoleIDString) NotInIfPresent(value []string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userRoleQueryRoleIDString) Lt(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryRoleIDString) LtIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userRoleQueryRoleIDString) Lte(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryRoleIDString) LteIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userRoleQueryRoleIDString) Gt(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryRoleIDString) GtIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userRoleQueryRoleIDString) Gte(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryRoleIDString) GteIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userRoleQueryRoleIDString) Contains(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryRoleIDString) ContainsIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userRoleQueryRoleIDString) StartsWith(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryRoleIDString) StartsWithIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userRoleQueryRoleIDString) EndsWith(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryRoleIDString) EndsWithIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userRoleQueryRoleIDString) Mode(value QueryMode) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryRoleIDString) ModeIfPresent(value *QueryMode) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userRoleQueryRoleIDString) Not(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userRoleQueryRoleIDString) NotIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userRoleQueryRoleIDString) HasPrefix(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userRoleQueryRoleIDString) HasPrefixIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userRoleQueryRoleIDString) HasSuffix(value string) userRoleDefaultParam {
	return userRoleDefaultParam{
		data: builder.Field{
			Name: "role_id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userRoleQueryRoleIDString) HasSuffixIfPresent(value *string) userRoleDefaultParam {
	if value == nil {
		return userRoleDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userRoleQueryRoleIDString) Field() userRolePrismaFields {
	return userRoleFieldRoleID
}

// --- template actions.gotpl ---
var countOutput = []builder.Output{
	{Name: "count"},
}

type organizationActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var organizationOutput = []builder.Output{
	{Name: "id"},
	{Name: "created"},
	{Name: "updated"},
	{Name: "name"},
}

type OrganizationRelationWith interface {
	getQuery() builder.Query
	with()
	organizationRelation()
}

type OrganizationWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	organizationModel()
}

type organizationDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationDefaultParam) field() builder.Field {
	return p.data
}

func (p organizationDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p organizationDefaultParam) organizationModel() {}

type OrganizationOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	organizationModel()
}

type organizationOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationOrderByParam) field() builder.Field {
	return p.data
}

func (p organizationOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p organizationOrderByParam) organizationModel() {}

type OrganizationCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	organizationModel()
	isCursor()
}

type organizationCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationCursorParam) field() builder.Field {
	return p.data
}

func (p organizationCursorParam) isCursor() {}

func (p organizationCursorParam) getQuery() builder.Query {
	return p.query
}

func (p organizationCursorParam) organizationModel() {}

type OrganizationParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	organizationModel()
}

type organizationParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p organizationParamUnique) organizationModel() {}

func (organizationParamUnique) unique() {}

func (p organizationParamUnique) field() builder.Field {
	return p.data
}

func (p organizationParamUnique) getQuery() builder.Query {
	return p.query
}

type OrganizationEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	organizationModel()
}

type organizationEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationEqualsParam) organizationModel() {}

func (organizationEqualsParam) equals() {}

func (p organizationEqualsParam) field() builder.Field {
	return p.data
}

func (p organizationEqualsParam) getQuery() builder.Query {
	return p.query
}

type OrganizationEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	organizationModel()
}

type organizationEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationEqualsUniqueParam) organizationModel() {}

func (organizationEqualsUniqueParam) unique() {}
func (organizationEqualsUniqueParam) equals() {}

func (p organizationEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p organizationEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type OrganizationSetParam interface {
	field() builder.Field
	settable()
	organizationModel()
}

type organizationSetParam struct {
	data builder.Field
}

func (organizationSetParam) settable() {}

func (p organizationSetParam) field() builder.Field {
	return p.data
}

func (p organizationSetParam) organizationModel() {}

type OrganizationWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	organizationModel()
	idField()
}

type OrganizationWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	organizationModel()
	idField()
}

type organizationWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p organizationWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p organizationWithPrismaIDSetParam) organizationModel() {}

func (p organizationWithPrismaIDSetParam) idField() {}

type OrganizationWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	organizationModel()
	idField()
}

type organizationWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p organizationWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p organizationWithPrismaIDEqualsParam) organizationModel() {}

func (p organizationWithPrismaIDEqualsParam) idField() {}

func (organizationWithPrismaIDSetParam) settable()  {}
func (organizationWithPrismaIDEqualsParam) equals() {}

type organizationWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p organizationWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p organizationWithPrismaIDEqualsUniqueParam) organizationModel() {}
func (p organizationWithPrismaIDEqualsUniqueParam) idField()           {}

func (organizationWithPrismaIDEqualsUniqueParam) unique() {}
func (organizationWithPrismaIDEqualsUniqueParam) equals() {}

type OrganizationWithPrismaCreatedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	organizationModel()
	createdField()
}

type OrganizationWithPrismaCreatedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	organizationModel()
	createdField()
}

type organizationWithPrismaCreatedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationWithPrismaCreatedSetParam) field() builder.Field {
	return p.data
}

func (p organizationWithPrismaCreatedSetParam) getQuery() builder.Query {
	return p.query
}

func (p organizationWithPrismaCreatedSetParam) organizationModel() {}

func (p organizationWithPrismaCreatedSetParam) createdField() {}

type OrganizationWithPrismaCreatedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	organizationModel()
	createdField()
}

type organizationWithPrismaCreatedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationWithPrismaCreatedEqualsParam) field() builder.Field {
	return p.data
}

func (p organizationWithPrismaCreatedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p organizationWithPrismaCreatedEqualsParam) organizationModel() {}

func (p organizationWithPrismaCreatedEqualsParam) createdField() {}

func (organizationWithPrismaCreatedSetParam) settable()  {}
func (organizationWithPrismaCreatedEqualsParam) equals() {}

type organizationWithPrismaCreatedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationWithPrismaCreatedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p organizationWithPrismaCreatedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p organizationWithPrismaCreatedEqualsUniqueParam) organizationModel() {}
func (p organizationWithPrismaCreatedEqualsUniqueParam) createdField()      {}

func (organizationWithPrismaCreatedEqualsUniqueParam) unique() {}
func (organizationWithPrismaCreatedEqualsUniqueParam) equals() {}

type OrganizationWithPrismaUpdatedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	organizationModel()
	updatedField()
}

type OrganizationWithPrismaUpdatedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	organizationModel()
	updatedField()
}

type organizationWithPrismaUpdatedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationWithPrismaUpdatedSetParam) field() builder.Field {
	return p.data
}

func (p organizationWithPrismaUpdatedSetParam) getQuery() builder.Query {
	return p.query
}

func (p organizationWithPrismaUpdatedSetParam) organizationModel() {}

func (p organizationWithPrismaUpdatedSetParam) updatedField() {}

type OrganizationWithPrismaUpdatedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	organizationModel()
	updatedField()
}

type organizationWithPrismaUpdatedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationWithPrismaUpdatedEqualsParam) field() builder.Field {
	return p.data
}

func (p organizationWithPrismaUpdatedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p organizationWithPrismaUpdatedEqualsParam) organizationModel() {}

func (p organizationWithPrismaUpdatedEqualsParam) updatedField() {}

func (organizationWithPrismaUpdatedSetParam) settable()  {}
func (organizationWithPrismaUpdatedEqualsParam) equals() {}

type organizationWithPrismaUpdatedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationWithPrismaUpdatedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p organizationWithPrismaUpdatedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p organizationWithPrismaUpdatedEqualsUniqueParam) organizationModel() {}
func (p organizationWithPrismaUpdatedEqualsUniqueParam) updatedField()      {}

func (organizationWithPrismaUpdatedEqualsUniqueParam) unique() {}
func (organizationWithPrismaUpdatedEqualsUniqueParam) equals() {}

type OrganizationWithPrismaNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	organizationModel()
	nameField()
}

type OrganizationWithPrismaNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	organizationModel()
	nameField()
}

type organizationWithPrismaNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationWithPrismaNameSetParam) field() builder.Field {
	return p.data
}

func (p organizationWithPrismaNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p organizationWithPrismaNameSetParam) organizationModel() {}

func (p organizationWithPrismaNameSetParam) nameField() {}

type OrganizationWithPrismaNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	organizationModel()
	nameField()
}

type organizationWithPrismaNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationWithPrismaNameEqualsParam) field() builder.Field {
	return p.data
}

func (p organizationWithPrismaNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p organizationWithPrismaNameEqualsParam) organizationModel() {}

func (p organizationWithPrismaNameEqualsParam) nameField() {}

func (organizationWithPrismaNameSetParam) settable()  {}
func (organizationWithPrismaNameEqualsParam) equals() {}

type organizationWithPrismaNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationWithPrismaNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p organizationWithPrismaNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p organizationWithPrismaNameEqualsUniqueParam) organizationModel() {}
func (p organizationWithPrismaNameEqualsUniqueParam) nameField()         {}

func (organizationWithPrismaNameEqualsUniqueParam) unique() {}
func (organizationWithPrismaNameEqualsUniqueParam) equals() {}

type OrganizationWithPrismaUsersEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	organizationModel()
	usersField()
}

type OrganizationWithPrismaUsersSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	organizationModel()
	usersField()
}

type organizationWithPrismaUsersSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationWithPrismaUsersSetParam) field() builder.Field {
	return p.data
}

func (p organizationWithPrismaUsersSetParam) getQuery() builder.Query {
	return p.query
}

func (p organizationWithPrismaUsersSetParam) organizationModel() {}

func (p organizationWithPrismaUsersSetParam) usersField() {}

type OrganizationWithPrismaUsersWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	organizationModel()
	usersField()
}

type organizationWithPrismaUsersEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationWithPrismaUsersEqualsParam) field() builder.Field {
	return p.data
}

func (p organizationWithPrismaUsersEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p organizationWithPrismaUsersEqualsParam) organizationModel() {}

func (p organizationWithPrismaUsersEqualsParam) usersField() {}

func (organizationWithPrismaUsersSetParam) settable()  {}
func (organizationWithPrismaUsersEqualsParam) equals() {}

type organizationWithPrismaUsersEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p organizationWithPrismaUsersEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p organizationWithPrismaUsersEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p organizationWithPrismaUsersEqualsUniqueParam) organizationModel() {}
func (p organizationWithPrismaUsersEqualsUniqueParam) usersField()        {}

func (organizationWithPrismaUsersEqualsUniqueParam) unique() {}
func (organizationWithPrismaUsersEqualsUniqueParam) equals() {}

type userActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var userOutput = []builder.Output{
	{Name: "id"},
	{Name: "email"},
	{Name: "password"},
	{Name: "status"},
	{Name: "created"},
	{Name: "updated"},
	{Name: "organization_id"},
}

type UserRelationWith interface {
	getQuery() builder.Query
	with()
	userRelation()
}

type UserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p userDefaultParam) field() builder.Field {
	return p.data
}

func (p userDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p userDefaultParam) userModel() {}

type UserOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p userOrderByParam) field() builder.Field {
	return p.data
}

func (p userOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p userOrderByParam) userModel() {}

type UserCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	isCursor()
}

type userCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p userCursorParam) field() builder.Field {
	return p.data
}

func (p userCursorParam) isCursor() {}

func (p userCursorParam) getQuery() builder.Query {
	return p.query
}

func (p userCursorParam) userModel() {}

type UserParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	userModel()
}

type userParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userParamUnique) userModel() {}

func (userParamUnique) unique() {}

func (p userParamUnique) field() builder.Field {
	return p.data
}

func (p userParamUnique) getQuery() builder.Query {
	return p.query
}

type UserEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
}

type userEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsParam) userModel() {}

func (userEqualsParam) equals() {}

func (p userEqualsParam) field() builder.Field {
	return p.data
}

func (p userEqualsParam) getQuery() builder.Query {
	return p.query
}

type UserEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	userModel()
}

type userEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsUniqueParam) userModel() {}

func (userEqualsUniqueParam) unique() {}
func (userEqualsUniqueParam) equals() {}

func (p userEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type UserSetParam interface {
	field() builder.Field
	settable()
	userModel()
}

type userSetParam struct {
	data builder.Field
}

func (userSetParam) settable() {}

func (p userSetParam) field() builder.Field {
	return p.data
}

func (p userSetParam) userModel() {}

type UserWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	idField()
}

type UserWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	idField()
}

type userWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDSetParam) userModel() {}

func (p userWithPrismaIDSetParam) idField() {}

type UserWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	idField()
}

type userWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsParam) userModel() {}

func (p userWithPrismaIDEqualsParam) idField() {}

func (userWithPrismaIDSetParam) settable()  {}
func (userWithPrismaIDEqualsParam) equals() {}

type userWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsUniqueParam) userModel() {}
func (p userWithPrismaIDEqualsUniqueParam) idField()   {}

func (userWithPrismaIDEqualsUniqueParam) unique() {}
func (userWithPrismaIDEqualsUniqueParam) equals() {}

type UserWithPrismaEmailEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	emailField()
}

type UserWithPrismaEmailSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	emailField()
}

type userWithPrismaEmailSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailSetParam) userModel() {}

func (p userWithPrismaEmailSetParam) emailField() {}

type UserWithPrismaEmailWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	emailField()
}

type userWithPrismaEmailEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailEqualsParam) userModel() {}

func (p userWithPrismaEmailEqualsParam) emailField() {}

func (userWithPrismaEmailSetParam) settable()  {}
func (userWithPrismaEmailEqualsParam) equals() {}

type userWithPrismaEmailEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaEmailEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaEmailEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaEmailEqualsUniqueParam) userModel()  {}
func (p userWithPrismaEmailEqualsUniqueParam) emailField() {}

func (userWithPrismaEmailEqualsUniqueParam) unique() {}
func (userWithPrismaEmailEqualsUniqueParam) equals() {}

type UserWithPrismaPasswordEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	passwordField()
}

type UserWithPrismaPasswordSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	passwordField()
}

type userWithPrismaPasswordSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPasswordSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPasswordSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPasswordSetParam) userModel() {}

func (p userWithPrismaPasswordSetParam) passwordField() {}

type UserWithPrismaPasswordWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	passwordField()
}

type userWithPrismaPasswordEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPasswordEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPasswordEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPasswordEqualsParam) userModel() {}

func (p userWithPrismaPasswordEqualsParam) passwordField() {}

func (userWithPrismaPasswordSetParam) settable()  {}
func (userWithPrismaPasswordEqualsParam) equals() {}

type userWithPrismaPasswordEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaPasswordEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaPasswordEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaPasswordEqualsUniqueParam) userModel()     {}
func (p userWithPrismaPasswordEqualsUniqueParam) passwordField() {}

func (userWithPrismaPasswordEqualsUniqueParam) unique() {}
func (userWithPrismaPasswordEqualsUniqueParam) equals() {}

type UserWithPrismaStatusEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	statusField()
}

type UserWithPrismaStatusSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	statusField()
}

type userWithPrismaStatusSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaStatusSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaStatusSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaStatusSetParam) userModel() {}

func (p userWithPrismaStatusSetParam) statusField() {}

type UserWithPrismaStatusWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	statusField()
}

type userWithPrismaStatusEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaStatusEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaStatusEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaStatusEqualsParam) userModel() {}

func (p userWithPrismaStatusEqualsParam) statusField() {}

func (userWithPrismaStatusSetParam) settable()  {}
func (userWithPrismaStatusEqualsParam) equals() {}

type userWithPrismaStatusEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaStatusEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaStatusEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaStatusEqualsUniqueParam) userModel()   {}
func (p userWithPrismaStatusEqualsUniqueParam) statusField() {}

func (userWithPrismaStatusEqualsUniqueParam) unique() {}
func (userWithPrismaStatusEqualsUniqueParam) equals() {}

type UserWithPrismaCreatedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	createdField()
}

type UserWithPrismaCreatedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	createdField()
}

type userWithPrismaCreatedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedSetParam) userModel() {}

func (p userWithPrismaCreatedSetParam) createdField() {}

type UserWithPrismaCreatedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	createdField()
}

type userWithPrismaCreatedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedEqualsParam) userModel() {}

func (p userWithPrismaCreatedEqualsParam) createdField() {}

func (userWithPrismaCreatedSetParam) settable()  {}
func (userWithPrismaCreatedEqualsParam) equals() {}

type userWithPrismaCreatedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaCreatedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaCreatedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaCreatedEqualsUniqueParam) userModel()    {}
func (p userWithPrismaCreatedEqualsUniqueParam) createdField() {}

func (userWithPrismaCreatedEqualsUniqueParam) unique() {}
func (userWithPrismaCreatedEqualsUniqueParam) equals() {}

type UserWithPrismaUpdatedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	updatedField()
}

type UserWithPrismaUpdatedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	updatedField()
}

type userWithPrismaUpdatedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedSetParam) userModel() {}

func (p userWithPrismaUpdatedSetParam) updatedField() {}

type UserWithPrismaUpdatedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	updatedField()
}

type userWithPrismaUpdatedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedEqualsParam) userModel() {}

func (p userWithPrismaUpdatedEqualsParam) updatedField() {}

func (userWithPrismaUpdatedSetParam) settable()  {}
func (userWithPrismaUpdatedEqualsParam) equals() {}

type userWithPrismaUpdatedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUpdatedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUpdatedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUpdatedEqualsUniqueParam) userModel()    {}
func (p userWithPrismaUpdatedEqualsUniqueParam) updatedField() {}

func (userWithPrismaUpdatedEqualsUniqueParam) unique() {}
func (userWithPrismaUpdatedEqualsUniqueParam) equals() {}

type UserWithPrismaOrganizationEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	organizationField()
}

type UserWithPrismaOrganizationSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	organizationField()
}

type userWithPrismaOrganizationSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaOrganizationSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaOrganizationSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaOrganizationSetParam) userModel() {}

func (p userWithPrismaOrganizationSetParam) organizationField() {}

type UserWithPrismaOrganizationWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	organizationField()
}

type userWithPrismaOrganizationEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaOrganizationEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaOrganizationEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaOrganizationEqualsParam) userModel() {}

func (p userWithPrismaOrganizationEqualsParam) organizationField() {}

func (userWithPrismaOrganizationSetParam) settable()  {}
func (userWithPrismaOrganizationEqualsParam) equals() {}

type userWithPrismaOrganizationEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaOrganizationEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaOrganizationEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaOrganizationEqualsUniqueParam) userModel()         {}
func (p userWithPrismaOrganizationEqualsUniqueParam) organizationField() {}

func (userWithPrismaOrganizationEqualsUniqueParam) unique() {}
func (userWithPrismaOrganizationEqualsUniqueParam) equals() {}

type UserWithPrismaOrganizationIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	organizationIDField()
}

type UserWithPrismaOrganizationIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	organizationIDField()
}

type userWithPrismaOrganizationIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaOrganizationIDSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaOrganizationIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaOrganizationIDSetParam) userModel() {}

func (p userWithPrismaOrganizationIDSetParam) organizationIDField() {}

type UserWithPrismaOrganizationIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	organizationIDField()
}

type userWithPrismaOrganizationIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaOrganizationIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaOrganizationIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaOrganizationIDEqualsParam) userModel() {}

func (p userWithPrismaOrganizationIDEqualsParam) organizationIDField() {}

func (userWithPrismaOrganizationIDSetParam) settable()  {}
func (userWithPrismaOrganizationIDEqualsParam) equals() {}

type userWithPrismaOrganizationIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaOrganizationIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaOrganizationIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaOrganizationIDEqualsUniqueParam) userModel()           {}
func (p userWithPrismaOrganizationIDEqualsUniqueParam) organizationIDField() {}

func (userWithPrismaOrganizationIDEqualsUniqueParam) unique() {}
func (userWithPrismaOrganizationIDEqualsUniqueParam) equals() {}

type UserWithPrismaRolesEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	rolesField()
}

type UserWithPrismaRolesSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	rolesField()
}

type userWithPrismaRolesSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaRolesSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaRolesSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaRolesSetParam) userModel() {}

func (p userWithPrismaRolesSetParam) rolesField() {}

type UserWithPrismaRolesWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	rolesField()
}

type userWithPrismaRolesEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaRolesEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaRolesEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaRolesEqualsParam) userModel() {}

func (p userWithPrismaRolesEqualsParam) rolesField() {}

func (userWithPrismaRolesSetParam) settable()  {}
func (userWithPrismaRolesEqualsParam) equals() {}

type userWithPrismaRolesEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaRolesEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaRolesEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaRolesEqualsUniqueParam) userModel()  {}
func (p userWithPrismaRolesEqualsUniqueParam) rolesField() {}

func (userWithPrismaRolesEqualsUniqueParam) unique() {}
func (userWithPrismaRolesEqualsUniqueParam) equals() {}

type UserWithPrismaSessionsEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	sessionsField()
}

type UserWithPrismaSessionsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	sessionsField()
}

type userWithPrismaSessionsSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaSessionsSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaSessionsSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaSessionsSetParam) userModel() {}

func (p userWithPrismaSessionsSetParam) sessionsField() {}

type UserWithPrismaSessionsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	sessionsField()
}

type userWithPrismaSessionsEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaSessionsEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaSessionsEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaSessionsEqualsParam) userModel() {}

func (p userWithPrismaSessionsEqualsParam) sessionsField() {}

func (userWithPrismaSessionsSetParam) settable()  {}
func (userWithPrismaSessionsEqualsParam) equals() {}

type userWithPrismaSessionsEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaSessionsEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaSessionsEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaSessionsEqualsUniqueParam) userModel()     {}
func (p userWithPrismaSessionsEqualsUniqueParam) sessionsField() {}

func (userWithPrismaSessionsEqualsUniqueParam) unique() {}
func (userWithPrismaSessionsEqualsUniqueParam) equals() {}

type sessionActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var sessionOutput = []builder.Output{
	{Name: "id"},
	{Name: "created"},
	{Name: "updated"},
	{Name: "status"},
	{Name: "user_id"},
}

type SessionRelationWith interface {
	getQuery() builder.Query
	with()
	sessionRelation()
}

type SessionWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	sessionModel()
}

type sessionDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionDefaultParam) field() builder.Field {
	return p.data
}

func (p sessionDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p sessionDefaultParam) sessionModel() {}

type SessionOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	sessionModel()
}

type sessionOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionOrderByParam) field() builder.Field {
	return p.data
}

func (p sessionOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p sessionOrderByParam) sessionModel() {}

type SessionCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	sessionModel()
	isCursor()
}

type sessionCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionCursorParam) field() builder.Field {
	return p.data
}

func (p sessionCursorParam) isCursor() {}

func (p sessionCursorParam) getQuery() builder.Query {
	return p.query
}

func (p sessionCursorParam) sessionModel() {}

type SessionParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	sessionModel()
}

type sessionParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p sessionParamUnique) sessionModel() {}

func (sessionParamUnique) unique() {}

func (p sessionParamUnique) field() builder.Field {
	return p.data
}

func (p sessionParamUnique) getQuery() builder.Query {
	return p.query
}

type SessionEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	sessionModel()
}

type sessionEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionEqualsParam) sessionModel() {}

func (sessionEqualsParam) equals() {}

func (p sessionEqualsParam) field() builder.Field {
	return p.data
}

func (p sessionEqualsParam) getQuery() builder.Query {
	return p.query
}

type SessionEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	sessionModel()
}

type sessionEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionEqualsUniqueParam) sessionModel() {}

func (sessionEqualsUniqueParam) unique() {}
func (sessionEqualsUniqueParam) equals() {}

func (p sessionEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p sessionEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type SessionSetParam interface {
	field() builder.Field
	settable()
	sessionModel()
}

type sessionSetParam struct {
	data builder.Field
}

func (sessionSetParam) settable() {}

func (p sessionSetParam) field() builder.Field {
	return p.data
}

func (p sessionSetParam) sessionModel() {}

type SessionWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	sessionModel()
	idField()
}

type SessionWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	sessionModel()
	idField()
}

type sessionWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaIDSetParam) sessionModel() {}

func (p sessionWithPrismaIDSetParam) idField() {}

type SessionWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	sessionModel()
	idField()
}

type sessionWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaIDEqualsParam) sessionModel() {}

func (p sessionWithPrismaIDEqualsParam) idField() {}

func (sessionWithPrismaIDSetParam) settable()  {}
func (sessionWithPrismaIDEqualsParam) equals() {}

type sessionWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaIDEqualsUniqueParam) sessionModel() {}
func (p sessionWithPrismaIDEqualsUniqueParam) idField()      {}

func (sessionWithPrismaIDEqualsUniqueParam) unique() {}
func (sessionWithPrismaIDEqualsUniqueParam) equals() {}

type SessionWithPrismaCreatedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	sessionModel()
	createdField()
}

type SessionWithPrismaCreatedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	sessionModel()
	createdField()
}

type sessionWithPrismaCreatedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaCreatedSetParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaCreatedSetParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaCreatedSetParam) sessionModel() {}

func (p sessionWithPrismaCreatedSetParam) createdField() {}

type SessionWithPrismaCreatedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	sessionModel()
	createdField()
}

type sessionWithPrismaCreatedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaCreatedEqualsParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaCreatedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaCreatedEqualsParam) sessionModel() {}

func (p sessionWithPrismaCreatedEqualsParam) createdField() {}

func (sessionWithPrismaCreatedSetParam) settable()  {}
func (sessionWithPrismaCreatedEqualsParam) equals() {}

type sessionWithPrismaCreatedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaCreatedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaCreatedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaCreatedEqualsUniqueParam) sessionModel() {}
func (p sessionWithPrismaCreatedEqualsUniqueParam) createdField() {}

func (sessionWithPrismaCreatedEqualsUniqueParam) unique() {}
func (sessionWithPrismaCreatedEqualsUniqueParam) equals() {}

type SessionWithPrismaUpdatedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	sessionModel()
	updatedField()
}

type SessionWithPrismaUpdatedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	sessionModel()
	updatedField()
}

type sessionWithPrismaUpdatedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaUpdatedSetParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaUpdatedSetParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaUpdatedSetParam) sessionModel() {}

func (p sessionWithPrismaUpdatedSetParam) updatedField() {}

type SessionWithPrismaUpdatedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	sessionModel()
	updatedField()
}

type sessionWithPrismaUpdatedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaUpdatedEqualsParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaUpdatedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaUpdatedEqualsParam) sessionModel() {}

func (p sessionWithPrismaUpdatedEqualsParam) updatedField() {}

func (sessionWithPrismaUpdatedSetParam) settable()  {}
func (sessionWithPrismaUpdatedEqualsParam) equals() {}

type sessionWithPrismaUpdatedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaUpdatedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaUpdatedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaUpdatedEqualsUniqueParam) sessionModel() {}
func (p sessionWithPrismaUpdatedEqualsUniqueParam) updatedField() {}

func (sessionWithPrismaUpdatedEqualsUniqueParam) unique() {}
func (sessionWithPrismaUpdatedEqualsUniqueParam) equals() {}

type SessionWithPrismaStatusEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	sessionModel()
	statusField()
}

type SessionWithPrismaStatusSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	sessionModel()
	statusField()
}

type sessionWithPrismaStatusSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaStatusSetParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaStatusSetParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaStatusSetParam) sessionModel() {}

func (p sessionWithPrismaStatusSetParam) statusField() {}

type SessionWithPrismaStatusWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	sessionModel()
	statusField()
}

type sessionWithPrismaStatusEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaStatusEqualsParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaStatusEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaStatusEqualsParam) sessionModel() {}

func (p sessionWithPrismaStatusEqualsParam) statusField() {}

func (sessionWithPrismaStatusSetParam) settable()  {}
func (sessionWithPrismaStatusEqualsParam) equals() {}

type sessionWithPrismaStatusEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaStatusEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaStatusEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaStatusEqualsUniqueParam) sessionModel() {}
func (p sessionWithPrismaStatusEqualsUniqueParam) statusField()  {}

func (sessionWithPrismaStatusEqualsUniqueParam) unique() {}
func (sessionWithPrismaStatusEqualsUniqueParam) equals() {}

type SessionWithPrismaUserEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	sessionModel()
	userField()
}

type SessionWithPrismaUserSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	sessionModel()
	userField()
}

type sessionWithPrismaUserSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaUserSetParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaUserSetParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaUserSetParam) sessionModel() {}

func (p sessionWithPrismaUserSetParam) userField() {}

type SessionWithPrismaUserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	sessionModel()
	userField()
}

type sessionWithPrismaUserEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaUserEqualsParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaUserEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaUserEqualsParam) sessionModel() {}

func (p sessionWithPrismaUserEqualsParam) userField() {}

func (sessionWithPrismaUserSetParam) settable()  {}
func (sessionWithPrismaUserEqualsParam) equals() {}

type sessionWithPrismaUserEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaUserEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaUserEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaUserEqualsUniqueParam) sessionModel() {}
func (p sessionWithPrismaUserEqualsUniqueParam) userField()    {}

func (sessionWithPrismaUserEqualsUniqueParam) unique() {}
func (sessionWithPrismaUserEqualsUniqueParam) equals() {}

type SessionWithPrismaUserIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	sessionModel()
	userIDField()
}

type SessionWithPrismaUserIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	sessionModel()
	userIDField()
}

type sessionWithPrismaUserIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaUserIDSetParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaUserIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaUserIDSetParam) sessionModel() {}

func (p sessionWithPrismaUserIDSetParam) userIDField() {}

type SessionWithPrismaUserIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	sessionModel()
	userIDField()
}

type sessionWithPrismaUserIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaUserIDEqualsParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaUserIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaUserIDEqualsParam) sessionModel() {}

func (p sessionWithPrismaUserIDEqualsParam) userIDField() {}

func (sessionWithPrismaUserIDSetParam) settable()  {}
func (sessionWithPrismaUserIDEqualsParam) equals() {}

type sessionWithPrismaUserIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p sessionWithPrismaUserIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p sessionWithPrismaUserIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p sessionWithPrismaUserIDEqualsUniqueParam) sessionModel() {}
func (p sessionWithPrismaUserIDEqualsUniqueParam) userIDField()  {}

func (sessionWithPrismaUserIDEqualsUniqueParam) unique() {}
func (sessionWithPrismaUserIDEqualsUniqueParam) equals() {}

type registrationActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var registrationOutput = []builder.Output{
	{Name: "id"},
	{Name: "createdAt"},
	{Name: "email"},
	{Name: "password"},
	{Name: "status"},
	{Name: "role"},
	{Name: "code"},
}

type RegistrationRelationWith interface {
	getQuery() builder.Query
	with()
	registrationRelation()
}

type RegistrationWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
}

type registrationDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationDefaultParam) field() builder.Field {
	return p.data
}

func (p registrationDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p registrationDefaultParam) registrationModel() {}

type RegistrationOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
}

type registrationOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationOrderByParam) field() builder.Field {
	return p.data
}

func (p registrationOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p registrationOrderByParam) registrationModel() {}

type RegistrationCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
	isCursor()
}

type registrationCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationCursorParam) field() builder.Field {
	return p.data
}

func (p registrationCursorParam) isCursor() {}

func (p registrationCursorParam) getQuery() builder.Query {
	return p.query
}

func (p registrationCursorParam) registrationModel() {}

type RegistrationParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	registrationModel()
}

type registrationParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p registrationParamUnique) registrationModel() {}

func (registrationParamUnique) unique() {}

func (p registrationParamUnique) field() builder.Field {
	return p.data
}

func (p registrationParamUnique) getQuery() builder.Query {
	return p.query
}

type RegistrationEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	registrationModel()
}

type registrationEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationEqualsParam) registrationModel() {}

func (registrationEqualsParam) equals() {}

func (p registrationEqualsParam) field() builder.Field {
	return p.data
}

func (p registrationEqualsParam) getQuery() builder.Query {
	return p.query
}

type RegistrationEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	registrationModel()
}

type registrationEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationEqualsUniqueParam) registrationModel() {}

func (registrationEqualsUniqueParam) unique() {}
func (registrationEqualsUniqueParam) equals() {}

func (p registrationEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p registrationEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type RegistrationSetParam interface {
	field() builder.Field
	settable()
	registrationModel()
}

type registrationSetParam struct {
	data builder.Field
}

func (registrationSetParam) settable() {}

func (p registrationSetParam) field() builder.Field {
	return p.data
}

func (p registrationSetParam) registrationModel() {}

type RegistrationWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	registrationModel()
	idField()
}

type RegistrationWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
	idField()
}

type registrationWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaIDSetParam) registrationModel() {}

func (p registrationWithPrismaIDSetParam) idField() {}

type RegistrationWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
	idField()
}

type registrationWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaIDEqualsParam) registrationModel() {}

func (p registrationWithPrismaIDEqualsParam) idField() {}

func (registrationWithPrismaIDSetParam) settable()  {}
func (registrationWithPrismaIDEqualsParam) equals() {}

type registrationWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaIDEqualsUniqueParam) registrationModel() {}
func (p registrationWithPrismaIDEqualsUniqueParam) idField()           {}

func (registrationWithPrismaIDEqualsUniqueParam) unique() {}
func (registrationWithPrismaIDEqualsUniqueParam) equals() {}

type RegistrationWithPrismaCreatedAtEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	registrationModel()
	createdAtField()
}

type RegistrationWithPrismaCreatedAtSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
	createdAtField()
}

type registrationWithPrismaCreatedAtSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaCreatedAtSetParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaCreatedAtSetParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaCreatedAtSetParam) registrationModel() {}

func (p registrationWithPrismaCreatedAtSetParam) createdAtField() {}

type RegistrationWithPrismaCreatedAtWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
	createdAtField()
}

type registrationWithPrismaCreatedAtEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaCreatedAtEqualsParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaCreatedAtEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaCreatedAtEqualsParam) registrationModel() {}

func (p registrationWithPrismaCreatedAtEqualsParam) createdAtField() {}

func (registrationWithPrismaCreatedAtSetParam) settable()  {}
func (registrationWithPrismaCreatedAtEqualsParam) equals() {}

type registrationWithPrismaCreatedAtEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaCreatedAtEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaCreatedAtEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaCreatedAtEqualsUniqueParam) registrationModel() {}
func (p registrationWithPrismaCreatedAtEqualsUniqueParam) createdAtField()    {}

func (registrationWithPrismaCreatedAtEqualsUniqueParam) unique() {}
func (registrationWithPrismaCreatedAtEqualsUniqueParam) equals() {}

type RegistrationWithPrismaEmailEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	registrationModel()
	emailField()
}

type RegistrationWithPrismaEmailSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
	emailField()
}

type registrationWithPrismaEmailSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaEmailSetParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaEmailSetParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaEmailSetParam) registrationModel() {}

func (p registrationWithPrismaEmailSetParam) emailField() {}

type RegistrationWithPrismaEmailWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
	emailField()
}

type registrationWithPrismaEmailEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaEmailEqualsParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaEmailEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaEmailEqualsParam) registrationModel() {}

func (p registrationWithPrismaEmailEqualsParam) emailField() {}

func (registrationWithPrismaEmailSetParam) settable()  {}
func (registrationWithPrismaEmailEqualsParam) equals() {}

type registrationWithPrismaEmailEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaEmailEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaEmailEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaEmailEqualsUniqueParam) registrationModel() {}
func (p registrationWithPrismaEmailEqualsUniqueParam) emailField()        {}

func (registrationWithPrismaEmailEqualsUniqueParam) unique() {}
func (registrationWithPrismaEmailEqualsUniqueParam) equals() {}

type RegistrationWithPrismaPasswordEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	registrationModel()
	passwordField()
}

type RegistrationWithPrismaPasswordSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
	passwordField()
}

type registrationWithPrismaPasswordSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaPasswordSetParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaPasswordSetParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaPasswordSetParam) registrationModel() {}

func (p registrationWithPrismaPasswordSetParam) passwordField() {}

type RegistrationWithPrismaPasswordWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
	passwordField()
}

type registrationWithPrismaPasswordEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaPasswordEqualsParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaPasswordEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaPasswordEqualsParam) registrationModel() {}

func (p registrationWithPrismaPasswordEqualsParam) passwordField() {}

func (registrationWithPrismaPasswordSetParam) settable()  {}
func (registrationWithPrismaPasswordEqualsParam) equals() {}

type registrationWithPrismaPasswordEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaPasswordEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaPasswordEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaPasswordEqualsUniqueParam) registrationModel() {}
func (p registrationWithPrismaPasswordEqualsUniqueParam) passwordField()     {}

func (registrationWithPrismaPasswordEqualsUniqueParam) unique() {}
func (registrationWithPrismaPasswordEqualsUniqueParam) equals() {}

type RegistrationWithPrismaStatusEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	registrationModel()
	statusField()
}

type RegistrationWithPrismaStatusSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
	statusField()
}

type registrationWithPrismaStatusSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaStatusSetParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaStatusSetParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaStatusSetParam) registrationModel() {}

func (p registrationWithPrismaStatusSetParam) statusField() {}

type RegistrationWithPrismaStatusWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
	statusField()
}

type registrationWithPrismaStatusEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaStatusEqualsParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaStatusEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaStatusEqualsParam) registrationModel() {}

func (p registrationWithPrismaStatusEqualsParam) statusField() {}

func (registrationWithPrismaStatusSetParam) settable()  {}
func (registrationWithPrismaStatusEqualsParam) equals() {}

type registrationWithPrismaStatusEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaStatusEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaStatusEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaStatusEqualsUniqueParam) registrationModel() {}
func (p registrationWithPrismaStatusEqualsUniqueParam) statusField()       {}

func (registrationWithPrismaStatusEqualsUniqueParam) unique() {}
func (registrationWithPrismaStatusEqualsUniqueParam) equals() {}

type RegistrationWithPrismaRoleEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	registrationModel()
	roleField()
}

type RegistrationWithPrismaRoleSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
	roleField()
}

type registrationWithPrismaRoleSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaRoleSetParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaRoleSetParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaRoleSetParam) registrationModel() {}

func (p registrationWithPrismaRoleSetParam) roleField() {}

type RegistrationWithPrismaRoleWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
	roleField()
}

type registrationWithPrismaRoleEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaRoleEqualsParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaRoleEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaRoleEqualsParam) registrationModel() {}

func (p registrationWithPrismaRoleEqualsParam) roleField() {}

func (registrationWithPrismaRoleSetParam) settable()  {}
func (registrationWithPrismaRoleEqualsParam) equals() {}

type registrationWithPrismaRoleEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaRoleEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaRoleEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaRoleEqualsUniqueParam) registrationModel() {}
func (p registrationWithPrismaRoleEqualsUniqueParam) roleField()         {}

func (registrationWithPrismaRoleEqualsUniqueParam) unique() {}
func (registrationWithPrismaRoleEqualsUniqueParam) equals() {}

type RegistrationWithPrismaCodeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	registrationModel()
	codeField()
}

type RegistrationWithPrismaCodeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
	codeField()
}

type registrationWithPrismaCodeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaCodeSetParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaCodeSetParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaCodeSetParam) registrationModel() {}

func (p registrationWithPrismaCodeSetParam) codeField() {}

type RegistrationWithPrismaCodeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	registrationModel()
	codeField()
}

type registrationWithPrismaCodeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaCodeEqualsParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaCodeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaCodeEqualsParam) registrationModel() {}

func (p registrationWithPrismaCodeEqualsParam) codeField() {}

func (registrationWithPrismaCodeSetParam) settable()  {}
func (registrationWithPrismaCodeEqualsParam) equals() {}

type registrationWithPrismaCodeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p registrationWithPrismaCodeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p registrationWithPrismaCodeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p registrationWithPrismaCodeEqualsUniqueParam) registrationModel() {}
func (p registrationWithPrismaCodeEqualsUniqueParam) codeField()         {}

func (registrationWithPrismaCodeEqualsUniqueParam) unique() {}
func (registrationWithPrismaCodeEqualsUniqueParam) equals() {}

type roleActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var roleOutput = []builder.Output{
	{Name: "id"},
	{Name: "created"},
	{Name: "updated"},
	{Name: "name"},
}

type RoleRelationWith interface {
	getQuery() builder.Query
	with()
	roleRelation()
}

type RoleWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	roleModel()
}

type roleDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleDefaultParam) field() builder.Field {
	return p.data
}

func (p roleDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p roleDefaultParam) roleModel() {}

type RoleOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	roleModel()
}

type roleOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleOrderByParam) field() builder.Field {
	return p.data
}

func (p roleOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p roleOrderByParam) roleModel() {}

type RoleCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	roleModel()
	isCursor()
}

type roleCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleCursorParam) field() builder.Field {
	return p.data
}

func (p roleCursorParam) isCursor() {}

func (p roleCursorParam) getQuery() builder.Query {
	return p.query
}

func (p roleCursorParam) roleModel() {}

type RoleParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	roleModel()
}

type roleParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p roleParamUnique) roleModel() {}

func (roleParamUnique) unique() {}

func (p roleParamUnique) field() builder.Field {
	return p.data
}

func (p roleParamUnique) getQuery() builder.Query {
	return p.query
}

type RoleEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	roleModel()
}

type roleEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleEqualsParam) roleModel() {}

func (roleEqualsParam) equals() {}

func (p roleEqualsParam) field() builder.Field {
	return p.data
}

func (p roleEqualsParam) getQuery() builder.Query {
	return p.query
}

type RoleEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	roleModel()
}

type roleEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleEqualsUniqueParam) roleModel() {}

func (roleEqualsUniqueParam) unique() {}
func (roleEqualsUniqueParam) equals() {}

func (p roleEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p roleEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type RoleSetParam interface {
	field() builder.Field
	settable()
	roleModel()
}

type roleSetParam struct {
	data builder.Field
}

func (roleSetParam) settable() {}

func (p roleSetParam) field() builder.Field {
	return p.data
}

func (p roleSetParam) roleModel() {}

type RoleWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	roleModel()
	idField()
}

type RoleWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	roleModel()
	idField()
}

type roleWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaIDSetParam) roleModel() {}

func (p roleWithPrismaIDSetParam) idField() {}

type RoleWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	roleModel()
	idField()
}

type roleWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaIDEqualsParam) roleModel() {}

func (p roleWithPrismaIDEqualsParam) idField() {}

func (roleWithPrismaIDSetParam) settable()  {}
func (roleWithPrismaIDEqualsParam) equals() {}

type roleWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaIDEqualsUniqueParam) roleModel() {}
func (p roleWithPrismaIDEqualsUniqueParam) idField()   {}

func (roleWithPrismaIDEqualsUniqueParam) unique() {}
func (roleWithPrismaIDEqualsUniqueParam) equals() {}

type RoleWithPrismaCreatedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	roleModel()
	createdField()
}

type RoleWithPrismaCreatedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	roleModel()
	createdField()
}

type roleWithPrismaCreatedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaCreatedSetParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaCreatedSetParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaCreatedSetParam) roleModel() {}

func (p roleWithPrismaCreatedSetParam) createdField() {}

type RoleWithPrismaCreatedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	roleModel()
	createdField()
}

type roleWithPrismaCreatedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaCreatedEqualsParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaCreatedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaCreatedEqualsParam) roleModel() {}

func (p roleWithPrismaCreatedEqualsParam) createdField() {}

func (roleWithPrismaCreatedSetParam) settable()  {}
func (roleWithPrismaCreatedEqualsParam) equals() {}

type roleWithPrismaCreatedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaCreatedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaCreatedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaCreatedEqualsUniqueParam) roleModel()    {}
func (p roleWithPrismaCreatedEqualsUniqueParam) createdField() {}

func (roleWithPrismaCreatedEqualsUniqueParam) unique() {}
func (roleWithPrismaCreatedEqualsUniqueParam) equals() {}

type RoleWithPrismaUpdatedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	roleModel()
	updatedField()
}

type RoleWithPrismaUpdatedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	roleModel()
	updatedField()
}

type roleWithPrismaUpdatedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaUpdatedSetParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaUpdatedSetParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaUpdatedSetParam) roleModel() {}

func (p roleWithPrismaUpdatedSetParam) updatedField() {}

type RoleWithPrismaUpdatedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	roleModel()
	updatedField()
}

type roleWithPrismaUpdatedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaUpdatedEqualsParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaUpdatedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaUpdatedEqualsParam) roleModel() {}

func (p roleWithPrismaUpdatedEqualsParam) updatedField() {}

func (roleWithPrismaUpdatedSetParam) settable()  {}
func (roleWithPrismaUpdatedEqualsParam) equals() {}

type roleWithPrismaUpdatedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaUpdatedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaUpdatedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaUpdatedEqualsUniqueParam) roleModel()    {}
func (p roleWithPrismaUpdatedEqualsUniqueParam) updatedField() {}

func (roleWithPrismaUpdatedEqualsUniqueParam) unique() {}
func (roleWithPrismaUpdatedEqualsUniqueParam) equals() {}

type RoleWithPrismaNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	roleModel()
	nameField()
}

type RoleWithPrismaNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	roleModel()
	nameField()
}

type roleWithPrismaNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaNameSetParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaNameSetParam) roleModel() {}

func (p roleWithPrismaNameSetParam) nameField() {}

type RoleWithPrismaNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	roleModel()
	nameField()
}

type roleWithPrismaNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaNameEqualsParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaNameEqualsParam) roleModel() {}

func (p roleWithPrismaNameEqualsParam) nameField() {}

func (roleWithPrismaNameSetParam) settable()  {}
func (roleWithPrismaNameEqualsParam) equals() {}

type roleWithPrismaNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaNameEqualsUniqueParam) roleModel() {}
func (p roleWithPrismaNameEqualsUniqueParam) nameField() {}

func (roleWithPrismaNameEqualsUniqueParam) unique() {}
func (roleWithPrismaNameEqualsUniqueParam) equals() {}

type RoleWithPrismaPermissionsEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	roleModel()
	permissionsField()
}

type RoleWithPrismaPermissionsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	roleModel()
	permissionsField()
}

type roleWithPrismaPermissionsSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaPermissionsSetParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaPermissionsSetParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaPermissionsSetParam) roleModel() {}

func (p roleWithPrismaPermissionsSetParam) permissionsField() {}

type RoleWithPrismaPermissionsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	roleModel()
	permissionsField()
}

type roleWithPrismaPermissionsEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaPermissionsEqualsParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaPermissionsEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaPermissionsEqualsParam) roleModel() {}

func (p roleWithPrismaPermissionsEqualsParam) permissionsField() {}

func (roleWithPrismaPermissionsSetParam) settable()  {}
func (roleWithPrismaPermissionsEqualsParam) equals() {}

type roleWithPrismaPermissionsEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaPermissionsEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaPermissionsEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaPermissionsEqualsUniqueParam) roleModel()        {}
func (p roleWithPrismaPermissionsEqualsUniqueParam) permissionsField() {}

func (roleWithPrismaPermissionsEqualsUniqueParam) unique() {}
func (roleWithPrismaPermissionsEqualsUniqueParam) equals() {}

type RoleWithPrismaUsersEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	roleModel()
	usersField()
}

type RoleWithPrismaUsersSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	roleModel()
	usersField()
}

type roleWithPrismaUsersSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaUsersSetParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaUsersSetParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaUsersSetParam) roleModel() {}

func (p roleWithPrismaUsersSetParam) usersField() {}

type RoleWithPrismaUsersWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	roleModel()
	usersField()
}

type roleWithPrismaUsersEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaUsersEqualsParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaUsersEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaUsersEqualsParam) roleModel() {}

func (p roleWithPrismaUsersEqualsParam) usersField() {}

func (roleWithPrismaUsersSetParam) settable()  {}
func (roleWithPrismaUsersEqualsParam) equals() {}

type roleWithPrismaUsersEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p roleWithPrismaUsersEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p roleWithPrismaUsersEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p roleWithPrismaUsersEqualsUniqueParam) roleModel()  {}
func (p roleWithPrismaUsersEqualsUniqueParam) usersField() {}

func (roleWithPrismaUsersEqualsUniqueParam) unique() {}
func (roleWithPrismaUsersEqualsUniqueParam) equals() {}

type permissionActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var permissionOutput = []builder.Output{
	{Name: "id"},
	{Name: "created"},
	{Name: "updated"},
	{Name: "name"},
}

type PermissionRelationWith interface {
	getQuery() builder.Query
	with()
	permissionRelation()
}

type PermissionWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	permissionModel()
}

type permissionDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionDefaultParam) field() builder.Field {
	return p.data
}

func (p permissionDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p permissionDefaultParam) permissionModel() {}

type PermissionOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	permissionModel()
}

type permissionOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionOrderByParam) field() builder.Field {
	return p.data
}

func (p permissionOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p permissionOrderByParam) permissionModel() {}

type PermissionCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	permissionModel()
	isCursor()
}

type permissionCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionCursorParam) field() builder.Field {
	return p.data
}

func (p permissionCursorParam) isCursor() {}

func (p permissionCursorParam) getQuery() builder.Query {
	return p.query
}

func (p permissionCursorParam) permissionModel() {}

type PermissionParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	permissionModel()
}

type permissionParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p permissionParamUnique) permissionModel() {}

func (permissionParamUnique) unique() {}

func (p permissionParamUnique) field() builder.Field {
	return p.data
}

func (p permissionParamUnique) getQuery() builder.Query {
	return p.query
}

type PermissionEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	permissionModel()
}

type permissionEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionEqualsParam) permissionModel() {}

func (permissionEqualsParam) equals() {}

func (p permissionEqualsParam) field() builder.Field {
	return p.data
}

func (p permissionEqualsParam) getQuery() builder.Query {
	return p.query
}

type PermissionEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	permissionModel()
}

type permissionEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionEqualsUniqueParam) permissionModel() {}

func (permissionEqualsUniqueParam) unique() {}
func (permissionEqualsUniqueParam) equals() {}

func (p permissionEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p permissionEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type PermissionSetParam interface {
	field() builder.Field
	settable()
	permissionModel()
}

type permissionSetParam struct {
	data builder.Field
}

func (permissionSetParam) settable() {}

func (p permissionSetParam) field() builder.Field {
	return p.data
}

func (p permissionSetParam) permissionModel() {}

type PermissionWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	permissionModel()
	idField()
}

type PermissionWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	permissionModel()
	idField()
}

type permissionWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p permissionWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p permissionWithPrismaIDSetParam) permissionModel() {}

func (p permissionWithPrismaIDSetParam) idField() {}

type PermissionWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	permissionModel()
	idField()
}

type permissionWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p permissionWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p permissionWithPrismaIDEqualsParam) permissionModel() {}

func (p permissionWithPrismaIDEqualsParam) idField() {}

func (permissionWithPrismaIDSetParam) settable()  {}
func (permissionWithPrismaIDEqualsParam) equals() {}

type permissionWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p permissionWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p permissionWithPrismaIDEqualsUniqueParam) permissionModel() {}
func (p permissionWithPrismaIDEqualsUniqueParam) idField()         {}

func (permissionWithPrismaIDEqualsUniqueParam) unique() {}
func (permissionWithPrismaIDEqualsUniqueParam) equals() {}

type PermissionWithPrismaCreatedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	permissionModel()
	createdField()
}

type PermissionWithPrismaCreatedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	permissionModel()
	createdField()
}

type permissionWithPrismaCreatedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionWithPrismaCreatedSetParam) field() builder.Field {
	return p.data
}

func (p permissionWithPrismaCreatedSetParam) getQuery() builder.Query {
	return p.query
}

func (p permissionWithPrismaCreatedSetParam) permissionModel() {}

func (p permissionWithPrismaCreatedSetParam) createdField() {}

type PermissionWithPrismaCreatedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	permissionModel()
	createdField()
}

type permissionWithPrismaCreatedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionWithPrismaCreatedEqualsParam) field() builder.Field {
	return p.data
}

func (p permissionWithPrismaCreatedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p permissionWithPrismaCreatedEqualsParam) permissionModel() {}

func (p permissionWithPrismaCreatedEqualsParam) createdField() {}

func (permissionWithPrismaCreatedSetParam) settable()  {}
func (permissionWithPrismaCreatedEqualsParam) equals() {}

type permissionWithPrismaCreatedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionWithPrismaCreatedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p permissionWithPrismaCreatedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p permissionWithPrismaCreatedEqualsUniqueParam) permissionModel() {}
func (p permissionWithPrismaCreatedEqualsUniqueParam) createdField()    {}

func (permissionWithPrismaCreatedEqualsUniqueParam) unique() {}
func (permissionWithPrismaCreatedEqualsUniqueParam) equals() {}

type PermissionWithPrismaUpdatedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	permissionModel()
	updatedField()
}

type PermissionWithPrismaUpdatedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	permissionModel()
	updatedField()
}

type permissionWithPrismaUpdatedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionWithPrismaUpdatedSetParam) field() builder.Field {
	return p.data
}

func (p permissionWithPrismaUpdatedSetParam) getQuery() builder.Query {
	return p.query
}

func (p permissionWithPrismaUpdatedSetParam) permissionModel() {}

func (p permissionWithPrismaUpdatedSetParam) updatedField() {}

type PermissionWithPrismaUpdatedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	permissionModel()
	updatedField()
}

type permissionWithPrismaUpdatedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionWithPrismaUpdatedEqualsParam) field() builder.Field {
	return p.data
}

func (p permissionWithPrismaUpdatedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p permissionWithPrismaUpdatedEqualsParam) permissionModel() {}

func (p permissionWithPrismaUpdatedEqualsParam) updatedField() {}

func (permissionWithPrismaUpdatedSetParam) settable()  {}
func (permissionWithPrismaUpdatedEqualsParam) equals() {}

type permissionWithPrismaUpdatedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionWithPrismaUpdatedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p permissionWithPrismaUpdatedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p permissionWithPrismaUpdatedEqualsUniqueParam) permissionModel() {}
func (p permissionWithPrismaUpdatedEqualsUniqueParam) updatedField()    {}

func (permissionWithPrismaUpdatedEqualsUniqueParam) unique() {}
func (permissionWithPrismaUpdatedEqualsUniqueParam) equals() {}

type PermissionWithPrismaNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	permissionModel()
	nameField()
}

type PermissionWithPrismaNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	permissionModel()
	nameField()
}

type permissionWithPrismaNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionWithPrismaNameSetParam) field() builder.Field {
	return p.data
}

func (p permissionWithPrismaNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p permissionWithPrismaNameSetParam) permissionModel() {}

func (p permissionWithPrismaNameSetParam) nameField() {}

type PermissionWithPrismaNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	permissionModel()
	nameField()
}

type permissionWithPrismaNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionWithPrismaNameEqualsParam) field() builder.Field {
	return p.data
}

func (p permissionWithPrismaNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p permissionWithPrismaNameEqualsParam) permissionModel() {}

func (p permissionWithPrismaNameEqualsParam) nameField() {}

func (permissionWithPrismaNameSetParam) settable()  {}
func (permissionWithPrismaNameEqualsParam) equals() {}

type permissionWithPrismaNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionWithPrismaNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p permissionWithPrismaNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p permissionWithPrismaNameEqualsUniqueParam) permissionModel() {}
func (p permissionWithPrismaNameEqualsUniqueParam) nameField()       {}

func (permissionWithPrismaNameEqualsUniqueParam) unique() {}
func (permissionWithPrismaNameEqualsUniqueParam) equals() {}

type PermissionWithPrismaRolesEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	permissionModel()
	rolesField()
}

type PermissionWithPrismaRolesSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	permissionModel()
	rolesField()
}

type permissionWithPrismaRolesSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionWithPrismaRolesSetParam) field() builder.Field {
	return p.data
}

func (p permissionWithPrismaRolesSetParam) getQuery() builder.Query {
	return p.query
}

func (p permissionWithPrismaRolesSetParam) permissionModel() {}

func (p permissionWithPrismaRolesSetParam) rolesField() {}

type PermissionWithPrismaRolesWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	permissionModel()
	rolesField()
}

type permissionWithPrismaRolesEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionWithPrismaRolesEqualsParam) field() builder.Field {
	return p.data
}

func (p permissionWithPrismaRolesEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p permissionWithPrismaRolesEqualsParam) permissionModel() {}

func (p permissionWithPrismaRolesEqualsParam) rolesField() {}

func (permissionWithPrismaRolesSetParam) settable()  {}
func (permissionWithPrismaRolesEqualsParam) equals() {}

type permissionWithPrismaRolesEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p permissionWithPrismaRolesEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p permissionWithPrismaRolesEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p permissionWithPrismaRolesEqualsUniqueParam) permissionModel() {}
func (p permissionWithPrismaRolesEqualsUniqueParam) rolesField()      {}

func (permissionWithPrismaRolesEqualsUniqueParam) unique() {}
func (permissionWithPrismaRolesEqualsUniqueParam) equals() {}

type rolePermissionActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var rolePermissionOutput = []builder.Output{
	{Name: "id"},
	{Name: "created"},
	{Name: "updated"},
	{Name: "role_id"},
	{Name: "permission_id"},
}

type RolePermissionRelationWith interface {
	getQuery() builder.Query
	with()
	rolePermissionRelation()
}

type RolePermissionWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
}

type rolePermissionDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionDefaultParam) field() builder.Field {
	return p.data
}

func (p rolePermissionDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionDefaultParam) rolePermissionModel() {}

type RolePermissionOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
}

type rolePermissionOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionOrderByParam) field() builder.Field {
	return p.data
}

func (p rolePermissionOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionOrderByParam) rolePermissionModel() {}

type RolePermissionCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
	isCursor()
}

type rolePermissionCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionCursorParam) field() builder.Field {
	return p.data
}

func (p rolePermissionCursorParam) isCursor() {}

func (p rolePermissionCursorParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionCursorParam) rolePermissionModel() {}

type RolePermissionParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	rolePermissionModel()
}

type rolePermissionParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionParamUnique) rolePermissionModel() {}

func (rolePermissionParamUnique) unique() {}

func (p rolePermissionParamUnique) field() builder.Field {
	return p.data
}

func (p rolePermissionParamUnique) getQuery() builder.Query {
	return p.query
}

type RolePermissionEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rolePermissionModel()
}

type rolePermissionEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionEqualsParam) rolePermissionModel() {}

func (rolePermissionEqualsParam) equals() {}

func (p rolePermissionEqualsParam) field() builder.Field {
	return p.data
}

func (p rolePermissionEqualsParam) getQuery() builder.Query {
	return p.query
}

type RolePermissionEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	rolePermissionModel()
}

type rolePermissionEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionEqualsUniqueParam) rolePermissionModel() {}

func (rolePermissionEqualsUniqueParam) unique() {}
func (rolePermissionEqualsUniqueParam) equals() {}

func (p rolePermissionEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rolePermissionEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type RolePermissionSetParam interface {
	field() builder.Field
	settable()
	rolePermissionModel()
}

type rolePermissionSetParam struct {
	data builder.Field
}

func (rolePermissionSetParam) settable() {}

func (p rolePermissionSetParam) field() builder.Field {
	return p.data
}

func (p rolePermissionSetParam) rolePermissionModel() {}

type RolePermissionWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rolePermissionModel()
	idField()
}

type RolePermissionWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
	idField()
}

type rolePermissionWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaIDSetParam) rolePermissionModel() {}

func (p rolePermissionWithPrismaIDSetParam) idField() {}

type RolePermissionWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
	idField()
}

type rolePermissionWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaIDEqualsParam) rolePermissionModel() {}

func (p rolePermissionWithPrismaIDEqualsParam) idField() {}

func (rolePermissionWithPrismaIDSetParam) settable()  {}
func (rolePermissionWithPrismaIDEqualsParam) equals() {}

type rolePermissionWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaIDEqualsUniqueParam) rolePermissionModel() {}
func (p rolePermissionWithPrismaIDEqualsUniqueParam) idField()             {}

func (rolePermissionWithPrismaIDEqualsUniqueParam) unique() {}
func (rolePermissionWithPrismaIDEqualsUniqueParam) equals() {}

type RolePermissionWithPrismaCreatedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rolePermissionModel()
	createdField()
}

type RolePermissionWithPrismaCreatedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
	createdField()
}

type rolePermissionWithPrismaCreatedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaCreatedSetParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaCreatedSetParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaCreatedSetParam) rolePermissionModel() {}

func (p rolePermissionWithPrismaCreatedSetParam) createdField() {}

type RolePermissionWithPrismaCreatedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
	createdField()
}

type rolePermissionWithPrismaCreatedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaCreatedEqualsParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaCreatedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaCreatedEqualsParam) rolePermissionModel() {}

func (p rolePermissionWithPrismaCreatedEqualsParam) createdField() {}

func (rolePermissionWithPrismaCreatedSetParam) settable()  {}
func (rolePermissionWithPrismaCreatedEqualsParam) equals() {}

type rolePermissionWithPrismaCreatedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaCreatedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaCreatedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaCreatedEqualsUniqueParam) rolePermissionModel() {}
func (p rolePermissionWithPrismaCreatedEqualsUniqueParam) createdField()        {}

func (rolePermissionWithPrismaCreatedEqualsUniqueParam) unique() {}
func (rolePermissionWithPrismaCreatedEqualsUniqueParam) equals() {}

type RolePermissionWithPrismaUpdatedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rolePermissionModel()
	updatedField()
}

type RolePermissionWithPrismaUpdatedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
	updatedField()
}

type rolePermissionWithPrismaUpdatedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaUpdatedSetParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaUpdatedSetParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaUpdatedSetParam) rolePermissionModel() {}

func (p rolePermissionWithPrismaUpdatedSetParam) updatedField() {}

type RolePermissionWithPrismaUpdatedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
	updatedField()
}

type rolePermissionWithPrismaUpdatedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaUpdatedEqualsParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaUpdatedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaUpdatedEqualsParam) rolePermissionModel() {}

func (p rolePermissionWithPrismaUpdatedEqualsParam) updatedField() {}

func (rolePermissionWithPrismaUpdatedSetParam) settable()  {}
func (rolePermissionWithPrismaUpdatedEqualsParam) equals() {}

type rolePermissionWithPrismaUpdatedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaUpdatedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaUpdatedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaUpdatedEqualsUniqueParam) rolePermissionModel() {}
func (p rolePermissionWithPrismaUpdatedEqualsUniqueParam) updatedField()        {}

func (rolePermissionWithPrismaUpdatedEqualsUniqueParam) unique() {}
func (rolePermissionWithPrismaUpdatedEqualsUniqueParam) equals() {}

type RolePermissionWithPrismaRoleEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rolePermissionModel()
	roleField()
}

type RolePermissionWithPrismaRoleSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
	roleField()
}

type rolePermissionWithPrismaRoleSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaRoleSetParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaRoleSetParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaRoleSetParam) rolePermissionModel() {}

func (p rolePermissionWithPrismaRoleSetParam) roleField() {}

type RolePermissionWithPrismaRoleWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
	roleField()
}

type rolePermissionWithPrismaRoleEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaRoleEqualsParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaRoleEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaRoleEqualsParam) rolePermissionModel() {}

func (p rolePermissionWithPrismaRoleEqualsParam) roleField() {}

func (rolePermissionWithPrismaRoleSetParam) settable()  {}
func (rolePermissionWithPrismaRoleEqualsParam) equals() {}

type rolePermissionWithPrismaRoleEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaRoleEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaRoleEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaRoleEqualsUniqueParam) rolePermissionModel() {}
func (p rolePermissionWithPrismaRoleEqualsUniqueParam) roleField()           {}

func (rolePermissionWithPrismaRoleEqualsUniqueParam) unique() {}
func (rolePermissionWithPrismaRoleEqualsUniqueParam) equals() {}

type RolePermissionWithPrismaRoleIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rolePermissionModel()
	roleIDField()
}

type RolePermissionWithPrismaRoleIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
	roleIDField()
}

type rolePermissionWithPrismaRoleIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaRoleIDSetParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaRoleIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaRoleIDSetParam) rolePermissionModel() {}

func (p rolePermissionWithPrismaRoleIDSetParam) roleIDField() {}

type RolePermissionWithPrismaRoleIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
	roleIDField()
}

type rolePermissionWithPrismaRoleIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaRoleIDEqualsParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaRoleIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaRoleIDEqualsParam) rolePermissionModel() {}

func (p rolePermissionWithPrismaRoleIDEqualsParam) roleIDField() {}

func (rolePermissionWithPrismaRoleIDSetParam) settable()  {}
func (rolePermissionWithPrismaRoleIDEqualsParam) equals() {}

type rolePermissionWithPrismaRoleIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaRoleIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaRoleIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaRoleIDEqualsUniqueParam) rolePermissionModel() {}
func (p rolePermissionWithPrismaRoleIDEqualsUniqueParam) roleIDField()         {}

func (rolePermissionWithPrismaRoleIDEqualsUniqueParam) unique() {}
func (rolePermissionWithPrismaRoleIDEqualsUniqueParam) equals() {}

type RolePermissionWithPrismaPermissionEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rolePermissionModel()
	permissionField()
}

type RolePermissionWithPrismaPermissionSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
	permissionField()
}

type rolePermissionWithPrismaPermissionSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaPermissionSetParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaPermissionSetParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaPermissionSetParam) rolePermissionModel() {}

func (p rolePermissionWithPrismaPermissionSetParam) permissionField() {}

type RolePermissionWithPrismaPermissionWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
	permissionField()
}

type rolePermissionWithPrismaPermissionEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaPermissionEqualsParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaPermissionEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaPermissionEqualsParam) rolePermissionModel() {}

func (p rolePermissionWithPrismaPermissionEqualsParam) permissionField() {}

func (rolePermissionWithPrismaPermissionSetParam) settable()  {}
func (rolePermissionWithPrismaPermissionEqualsParam) equals() {}

type rolePermissionWithPrismaPermissionEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaPermissionEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaPermissionEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaPermissionEqualsUniqueParam) rolePermissionModel() {}
func (p rolePermissionWithPrismaPermissionEqualsUniqueParam) permissionField()     {}

func (rolePermissionWithPrismaPermissionEqualsUniqueParam) unique() {}
func (rolePermissionWithPrismaPermissionEqualsUniqueParam) equals() {}

type RolePermissionWithPrismaPermissionIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	rolePermissionModel()
	permissionIDField()
}

type RolePermissionWithPrismaPermissionIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
	permissionIDField()
}

type rolePermissionWithPrismaPermissionIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaPermissionIDSetParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaPermissionIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaPermissionIDSetParam) rolePermissionModel() {}

func (p rolePermissionWithPrismaPermissionIDSetParam) permissionIDField() {}

type RolePermissionWithPrismaPermissionIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	rolePermissionModel()
	permissionIDField()
}

type rolePermissionWithPrismaPermissionIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaPermissionIDEqualsParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaPermissionIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaPermissionIDEqualsParam) rolePermissionModel() {}

func (p rolePermissionWithPrismaPermissionIDEqualsParam) permissionIDField() {}

func (rolePermissionWithPrismaPermissionIDSetParam) settable()  {}
func (rolePermissionWithPrismaPermissionIDEqualsParam) equals() {}

type rolePermissionWithPrismaPermissionIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p rolePermissionWithPrismaPermissionIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p rolePermissionWithPrismaPermissionIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p rolePermissionWithPrismaPermissionIDEqualsUniqueParam) rolePermissionModel() {}
func (p rolePermissionWithPrismaPermissionIDEqualsUniqueParam) permissionIDField()   {}

func (rolePermissionWithPrismaPermissionIDEqualsUniqueParam) unique() {}
func (rolePermissionWithPrismaPermissionIDEqualsUniqueParam) equals() {}

type userRoleActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var userRoleOutput = []builder.Output{
	{Name: "id"},
	{Name: "created"},
	{Name: "updated"},
	{Name: "user_id"},
	{Name: "role_id"},
}

type UserRoleRelationWith interface {
	getQuery() builder.Query
	with()
	userRoleRelation()
}

type UserRoleWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
}

type userRoleDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleDefaultParam) field() builder.Field {
	return p.data
}

func (p userRoleDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleDefaultParam) userRoleModel() {}

type UserRoleOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
}

type userRoleOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleOrderByParam) field() builder.Field {
	return p.data
}

func (p userRoleOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleOrderByParam) userRoleModel() {}

type UserRoleCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
	isCursor()
}

type userRoleCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleCursorParam) field() builder.Field {
	return p.data
}

func (p userRoleCursorParam) isCursor() {}

func (p userRoleCursorParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleCursorParam) userRoleModel() {}

type UserRoleParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	userRoleModel()
}

type userRoleParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleParamUnique) userRoleModel() {}

func (userRoleParamUnique) unique() {}

func (p userRoleParamUnique) field() builder.Field {
	return p.data
}

func (p userRoleParamUnique) getQuery() builder.Query {
	return p.query
}

type UserRoleEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userRoleModel()
}

type userRoleEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleEqualsParam) userRoleModel() {}

func (userRoleEqualsParam) equals() {}

func (p userRoleEqualsParam) field() builder.Field {
	return p.data
}

func (p userRoleEqualsParam) getQuery() builder.Query {
	return p.query
}

type UserRoleEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	userRoleModel()
}

type userRoleEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleEqualsUniqueParam) userRoleModel() {}

func (userRoleEqualsUniqueParam) unique() {}
func (userRoleEqualsUniqueParam) equals() {}

func (p userRoleEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userRoleEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type UserRoleSetParam interface {
	field() builder.Field
	settable()
	userRoleModel()
}

type userRoleSetParam struct {
	data builder.Field
}

func (userRoleSetParam) settable() {}

func (p userRoleSetParam) field() builder.Field {
	return p.data
}

func (p userRoleSetParam) userRoleModel() {}

type UserRoleWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userRoleModel()
	idField()
}

type UserRoleWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
	idField()
}

type userRoleWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaIDSetParam) userRoleModel() {}

func (p userRoleWithPrismaIDSetParam) idField() {}

type UserRoleWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
	idField()
}

type userRoleWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaIDEqualsParam) userRoleModel() {}

func (p userRoleWithPrismaIDEqualsParam) idField() {}

func (userRoleWithPrismaIDSetParam) settable()  {}
func (userRoleWithPrismaIDEqualsParam) equals() {}

type userRoleWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaIDEqualsUniqueParam) userRoleModel() {}
func (p userRoleWithPrismaIDEqualsUniqueParam) idField()       {}

func (userRoleWithPrismaIDEqualsUniqueParam) unique() {}
func (userRoleWithPrismaIDEqualsUniqueParam) equals() {}

type UserRoleWithPrismaCreatedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userRoleModel()
	createdField()
}

type UserRoleWithPrismaCreatedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
	createdField()
}

type userRoleWithPrismaCreatedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaCreatedSetParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaCreatedSetParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaCreatedSetParam) userRoleModel() {}

func (p userRoleWithPrismaCreatedSetParam) createdField() {}

type UserRoleWithPrismaCreatedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
	createdField()
}

type userRoleWithPrismaCreatedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaCreatedEqualsParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaCreatedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaCreatedEqualsParam) userRoleModel() {}

func (p userRoleWithPrismaCreatedEqualsParam) createdField() {}

func (userRoleWithPrismaCreatedSetParam) settable()  {}
func (userRoleWithPrismaCreatedEqualsParam) equals() {}

type userRoleWithPrismaCreatedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaCreatedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaCreatedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaCreatedEqualsUniqueParam) userRoleModel() {}
func (p userRoleWithPrismaCreatedEqualsUniqueParam) createdField()  {}

func (userRoleWithPrismaCreatedEqualsUniqueParam) unique() {}
func (userRoleWithPrismaCreatedEqualsUniqueParam) equals() {}

type UserRoleWithPrismaUpdatedEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userRoleModel()
	updatedField()
}

type UserRoleWithPrismaUpdatedSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
	updatedField()
}

type userRoleWithPrismaUpdatedSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaUpdatedSetParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaUpdatedSetParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaUpdatedSetParam) userRoleModel() {}

func (p userRoleWithPrismaUpdatedSetParam) updatedField() {}

type UserRoleWithPrismaUpdatedWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
	updatedField()
}

type userRoleWithPrismaUpdatedEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaUpdatedEqualsParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaUpdatedEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaUpdatedEqualsParam) userRoleModel() {}

func (p userRoleWithPrismaUpdatedEqualsParam) updatedField() {}

func (userRoleWithPrismaUpdatedSetParam) settable()  {}
func (userRoleWithPrismaUpdatedEqualsParam) equals() {}

type userRoleWithPrismaUpdatedEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaUpdatedEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaUpdatedEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaUpdatedEqualsUniqueParam) userRoleModel() {}
func (p userRoleWithPrismaUpdatedEqualsUniqueParam) updatedField()  {}

func (userRoleWithPrismaUpdatedEqualsUniqueParam) unique() {}
func (userRoleWithPrismaUpdatedEqualsUniqueParam) equals() {}

type UserRoleWithPrismaUserEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userRoleModel()
	userField()
}

type UserRoleWithPrismaUserSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
	userField()
}

type userRoleWithPrismaUserSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaUserSetParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaUserSetParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaUserSetParam) userRoleModel() {}

func (p userRoleWithPrismaUserSetParam) userField() {}

type UserRoleWithPrismaUserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
	userField()
}

type userRoleWithPrismaUserEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaUserEqualsParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaUserEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaUserEqualsParam) userRoleModel() {}

func (p userRoleWithPrismaUserEqualsParam) userField() {}

func (userRoleWithPrismaUserSetParam) settable()  {}
func (userRoleWithPrismaUserEqualsParam) equals() {}

type userRoleWithPrismaUserEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaUserEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaUserEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaUserEqualsUniqueParam) userRoleModel() {}
func (p userRoleWithPrismaUserEqualsUniqueParam) userField()     {}

func (userRoleWithPrismaUserEqualsUniqueParam) unique() {}
func (userRoleWithPrismaUserEqualsUniqueParam) equals() {}

type UserRoleWithPrismaUserIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userRoleModel()
	userIDField()
}

type UserRoleWithPrismaUserIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
	userIDField()
}

type userRoleWithPrismaUserIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaUserIDSetParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaUserIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaUserIDSetParam) userRoleModel() {}

func (p userRoleWithPrismaUserIDSetParam) userIDField() {}

type UserRoleWithPrismaUserIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
	userIDField()
}

type userRoleWithPrismaUserIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaUserIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaUserIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaUserIDEqualsParam) userRoleModel() {}

func (p userRoleWithPrismaUserIDEqualsParam) userIDField() {}

func (userRoleWithPrismaUserIDSetParam) settable()  {}
func (userRoleWithPrismaUserIDEqualsParam) equals() {}

type userRoleWithPrismaUserIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaUserIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaUserIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaUserIDEqualsUniqueParam) userRoleModel() {}
func (p userRoleWithPrismaUserIDEqualsUniqueParam) userIDField()   {}

func (userRoleWithPrismaUserIDEqualsUniqueParam) unique() {}
func (userRoleWithPrismaUserIDEqualsUniqueParam) equals() {}

type UserRoleWithPrismaRoleEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userRoleModel()
	roleField()
}

type UserRoleWithPrismaRoleSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
	roleField()
}

type userRoleWithPrismaRoleSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaRoleSetParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaRoleSetParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaRoleSetParam) userRoleModel() {}

func (p userRoleWithPrismaRoleSetParam) roleField() {}

type UserRoleWithPrismaRoleWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
	roleField()
}

type userRoleWithPrismaRoleEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaRoleEqualsParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaRoleEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaRoleEqualsParam) userRoleModel() {}

func (p userRoleWithPrismaRoleEqualsParam) roleField() {}

func (userRoleWithPrismaRoleSetParam) settable()  {}
func (userRoleWithPrismaRoleEqualsParam) equals() {}

type userRoleWithPrismaRoleEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaRoleEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaRoleEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaRoleEqualsUniqueParam) userRoleModel() {}
func (p userRoleWithPrismaRoleEqualsUniqueParam) roleField()     {}

func (userRoleWithPrismaRoleEqualsUniqueParam) unique() {}
func (userRoleWithPrismaRoleEqualsUniqueParam) equals() {}

type UserRoleWithPrismaRoleIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userRoleModel()
	roleIDField()
}

type UserRoleWithPrismaRoleIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
	roleIDField()
}

type userRoleWithPrismaRoleIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaRoleIDSetParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaRoleIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaRoleIDSetParam) userRoleModel() {}

func (p userRoleWithPrismaRoleIDSetParam) roleIDField() {}

type UserRoleWithPrismaRoleIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userRoleModel()
	roleIDField()
}

type userRoleWithPrismaRoleIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaRoleIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaRoleIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaRoleIDEqualsParam) userRoleModel() {}

func (p userRoleWithPrismaRoleIDEqualsParam) roleIDField() {}

func (userRoleWithPrismaRoleIDSetParam) settable()  {}
func (userRoleWithPrismaRoleIDEqualsParam) equals() {}

type userRoleWithPrismaRoleIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userRoleWithPrismaRoleIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userRoleWithPrismaRoleIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userRoleWithPrismaRoleIDEqualsUniqueParam) userRoleModel() {}
func (p userRoleWithPrismaRoleIDEqualsUniqueParam) roleIDField()   {}

func (userRoleWithPrismaRoleIDEqualsUniqueParam) unique() {}
func (userRoleWithPrismaRoleIDEqualsUniqueParam) equals() {}

// --- template create.gotpl ---

// Creates a single organization.
func (r organizationActions) CreateOne(
	_name OrganizationWithPrismaNameSetParam,

	optional ...OrganizationSetParam,
) organizationCreateOne {
	var v organizationCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Organization"
	v.query.Outputs = organizationOutput

	var fields []builder.Field

	fields = append(fields, _name.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r organizationCreateOne) With(params ...OrganizationRelationWith) organizationCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type organizationCreateOne struct {
	query builder.Query
}

func (p organizationCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p organizationCreateOne) organizationModel() {}

func (r organizationCreateOne) Exec(ctx context.Context) (*OrganizationModel, error) {
	var v OrganizationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r organizationCreateOne) Tx() OrganizationUniqueTxResult {
	v := newOrganizationUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single user.
func (r userActions) CreateOne(
	_email UserWithPrismaEmailSetParam,
	_password UserWithPrismaPasswordSetParam,
	_status UserWithPrismaStatusSetParam,
	_organization UserWithPrismaOrganizationSetParam,

	optional ...UserSetParam,
) userCreateOne {
	var v userCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	var fields []builder.Field

	fields = append(fields, _email.field())
	fields = append(fields, _password.field())
	fields = append(fields, _status.field())
	fields = append(fields, _organization.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r userCreateOne) With(params ...UserRelationWith) userCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type userCreateOne struct {
	query builder.Query
}

func (p userCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p userCreateOne) userModel() {}

func (r userCreateOne) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userCreateOne) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single session.
func (r sessionActions) CreateOne(
	_status SessionWithPrismaStatusSetParam,
	_user SessionWithPrismaUserSetParam,

	optional ...SessionSetParam,
) sessionCreateOne {
	var v sessionCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Session"
	v.query.Outputs = sessionOutput

	var fields []builder.Field

	fields = append(fields, _status.field())
	fields = append(fields, _user.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r sessionCreateOne) With(params ...SessionRelationWith) sessionCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type sessionCreateOne struct {
	query builder.Query
}

func (p sessionCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p sessionCreateOne) sessionModel() {}

func (r sessionCreateOne) Exec(ctx context.Context) (*SessionModel, error) {
	var v SessionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r sessionCreateOne) Tx() SessionUniqueTxResult {
	v := newSessionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single registration.
func (r registrationActions) CreateOne(
	_email RegistrationWithPrismaEmailSetParam,
	_password RegistrationWithPrismaPasswordSetParam,
	_status RegistrationWithPrismaStatusSetParam,
	_role RegistrationWithPrismaRoleSetParam,
	_code RegistrationWithPrismaCodeSetParam,

	optional ...RegistrationSetParam,
) registrationCreateOne {
	var v registrationCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Registration"
	v.query.Outputs = registrationOutput

	var fields []builder.Field

	fields = append(fields, _email.field())
	fields = append(fields, _password.field())
	fields = append(fields, _status.field())
	fields = append(fields, _role.field())
	fields = append(fields, _code.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r registrationCreateOne) With(params ...RegistrationRelationWith) registrationCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type registrationCreateOne struct {
	query builder.Query
}

func (p registrationCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p registrationCreateOne) registrationModel() {}

func (r registrationCreateOne) Exec(ctx context.Context) (*RegistrationModel, error) {
	var v RegistrationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r registrationCreateOne) Tx() RegistrationUniqueTxResult {
	v := newRegistrationUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single role.
func (r roleActions) CreateOne(
	_name RoleWithPrismaNameSetParam,

	optional ...RoleSetParam,
) roleCreateOne {
	var v roleCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Role"
	v.query.Outputs = roleOutput

	var fields []builder.Field

	fields = append(fields, _name.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r roleCreateOne) With(params ...RoleRelationWith) roleCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type roleCreateOne struct {
	query builder.Query
}

func (p roleCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p roleCreateOne) roleModel() {}

func (r roleCreateOne) Exec(ctx context.Context) (*RoleModel, error) {
	var v RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roleCreateOne) Tx() RoleUniqueTxResult {
	v := newRoleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single permission.
func (r permissionActions) CreateOne(
	_name PermissionWithPrismaNameSetParam,

	optional ...PermissionSetParam,
) permissionCreateOne {
	var v permissionCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Permission"
	v.query.Outputs = permissionOutput

	var fields []builder.Field

	fields = append(fields, _name.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r permissionCreateOne) With(params ...PermissionRelationWith) permissionCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type permissionCreateOne struct {
	query builder.Query
}

func (p permissionCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p permissionCreateOne) permissionModel() {}

func (r permissionCreateOne) Exec(ctx context.Context) (*PermissionModel, error) {
	var v PermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r permissionCreateOne) Tx() PermissionUniqueTxResult {
	v := newPermissionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single rolePermission.
func (r rolePermissionActions) CreateOne(
	_role RolePermissionWithPrismaRoleSetParam,
	_permission RolePermissionWithPrismaPermissionSetParam,

	optional ...RolePermissionSetParam,
) rolePermissionCreateOne {
	var v rolePermissionCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "RolePermission"
	v.query.Outputs = rolePermissionOutput

	var fields []builder.Field

	fields = append(fields, _role.field())
	fields = append(fields, _permission.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r rolePermissionCreateOne) With(params ...RolePermissionRelationWith) rolePermissionCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type rolePermissionCreateOne struct {
	query builder.Query
}

func (p rolePermissionCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p rolePermissionCreateOne) rolePermissionModel() {}

func (r rolePermissionCreateOne) Exec(ctx context.Context) (*RolePermissionModel, error) {
	var v RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rolePermissionCreateOne) Tx() RolePermissionUniqueTxResult {
	v := newRolePermissionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single userRole.
func (r userRoleActions) CreateOne(
	_user UserRoleWithPrismaUserSetParam,
	_role UserRoleWithPrismaRoleSetParam,

	optional ...UserRoleSetParam,
) userRoleCreateOne {
	var v userRoleCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "UserRole"
	v.query.Outputs = userRoleOutput

	var fields []builder.Field

	fields = append(fields, _user.field())
	fields = append(fields, _role.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r userRoleCreateOne) With(params ...UserRoleRelationWith) userRoleCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type userRoleCreateOne struct {
	query builder.Query
}

func (p userRoleCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p userRoleCreateOne) userRoleModel() {}

func (r userRoleCreateOne) Exec(ctx context.Context) (*UserRoleModel, error) {
	var v UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userRoleCreateOne) Tx() UserRoleUniqueTxResult {
	v := newUserRoleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template find.gotpl ---

type organizationToUsersFindUnique struct {
	query builder.Query
}

func (r organizationToUsersFindUnique) getQuery() builder.Query {
	return r.query
}

func (r organizationToUsersFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r organizationToUsersFindUnique) with()                 {}
func (r organizationToUsersFindUnique) organizationModel()    {}
func (r organizationToUsersFindUnique) organizationRelation() {}

func (r organizationToUsersFindUnique) With(params ...UserRelationWith) organizationToUsersFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r organizationToUsersFindUnique) Select(params ...organizationPrismaFields) organizationToUsersFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r organizationToUsersFindUnique) Omit(params ...organizationPrismaFields) organizationToUsersFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range organizationOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r organizationToUsersFindUnique) Exec(ctx context.Context) (
	*OrganizationModel,
	error,
) {
	var v *OrganizationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r organizationToUsersFindUnique) ExecInner(ctx context.Context) (
	*InnerOrganization,
	error,
) {
	var v *InnerOrganization
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r organizationToUsersFindUnique) Update(params ...OrganizationSetParam) organizationToUsersUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Organization"

	var v organizationToUsersUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type organizationToUsersUpdateUnique struct {
	query builder.Query
}

func (r organizationToUsersUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r organizationToUsersUpdateUnique) organizationModel() {}

func (r organizationToUsersUpdateUnique) Exec(ctx context.Context) (*OrganizationModel, error) {
	var v OrganizationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r organizationToUsersUpdateUnique) Tx() OrganizationUniqueTxResult {
	v := newOrganizationUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r organizationToUsersFindUnique) Delete() organizationToUsersDeleteUnique {
	var v organizationToUsersDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Organization"

	return v
}

type organizationToUsersDeleteUnique struct {
	query builder.Query
}

func (r organizationToUsersDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p organizationToUsersDeleteUnique) organizationModel() {}

func (r organizationToUsersDeleteUnique) Exec(ctx context.Context) (*OrganizationModel, error) {
	var v OrganizationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r organizationToUsersDeleteUnique) Tx() OrganizationUniqueTxResult {
	v := newOrganizationUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type organizationToUsersFindFirst struct {
	query builder.Query
}

func (r organizationToUsersFindFirst) getQuery() builder.Query {
	return r.query
}

func (r organizationToUsersFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r organizationToUsersFindFirst) with()                 {}
func (r organizationToUsersFindFirst) organizationModel()    {}
func (r organizationToUsersFindFirst) organizationRelation() {}

func (r organizationToUsersFindFirst) With(params ...UserRelationWith) organizationToUsersFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r organizationToUsersFindFirst) Select(params ...organizationPrismaFields) organizationToUsersFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r organizationToUsersFindFirst) Omit(params ...organizationPrismaFields) organizationToUsersFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range organizationOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r organizationToUsersFindFirst) OrderBy(params ...UserOrderByParam) organizationToUsersFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r organizationToUsersFindFirst) Skip(count int) organizationToUsersFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r organizationToUsersFindFirst) Take(count int) organizationToUsersFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r organizationToUsersFindFirst) Cursor(cursor OrganizationCursorParam) organizationToUsersFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r organizationToUsersFindFirst) Exec(ctx context.Context) (
	*OrganizationModel,
	error,
) {
	var v *OrganizationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r organizationToUsersFindFirst) ExecInner(ctx context.Context) (
	*InnerOrganization,
	error,
) {
	var v *InnerOrganization
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type organizationToUsersFindMany struct {
	query builder.Query
}

func (r organizationToUsersFindMany) getQuery() builder.Query {
	return r.query
}

func (r organizationToUsersFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r organizationToUsersFindMany) with()                 {}
func (r organizationToUsersFindMany) organizationModel()    {}
func (r organizationToUsersFindMany) organizationRelation() {}

func (r organizationToUsersFindMany) With(params ...UserRelationWith) organizationToUsersFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r organizationToUsersFindMany) Select(params ...organizationPrismaFields) organizationToUsersFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r organizationToUsersFindMany) Omit(params ...organizationPrismaFields) organizationToUsersFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range organizationOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r organizationToUsersFindMany) OrderBy(params ...UserOrderByParam) organizationToUsersFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r organizationToUsersFindMany) Skip(count int) organizationToUsersFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r organizationToUsersFindMany) Take(count int) organizationToUsersFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r organizationToUsersFindMany) Cursor(cursor OrganizationCursorParam) organizationToUsersFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r organizationToUsersFindMany) Exec(ctx context.Context) (
	[]OrganizationModel,
	error,
) {
	var v []OrganizationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r organizationToUsersFindMany) ExecInner(ctx context.Context) (
	[]InnerOrganization,
	error,
) {
	var v []InnerOrganization
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r organizationToUsersFindMany) Update(params ...OrganizationSetParam) organizationToUsersUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Organization"

	r.query.Outputs = countOutput

	var v organizationToUsersUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type organizationToUsersUpdateMany struct {
	query builder.Query
}

func (r organizationToUsersUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r organizationToUsersUpdateMany) organizationModel() {}

func (r organizationToUsersUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r organizationToUsersUpdateMany) Tx() OrganizationManyTxResult {
	v := newOrganizationManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r organizationToUsersFindMany) Delete() organizationToUsersDeleteMany {
	var v organizationToUsersDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Organization"

	v.query.Outputs = countOutput

	return v
}

type organizationToUsersDeleteMany struct {
	query builder.Query
}

func (r organizationToUsersDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p organizationToUsersDeleteMany) organizationModel() {}

func (r organizationToUsersDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r organizationToUsersDeleteMany) Tx() OrganizationManyTxResult {
	v := newOrganizationManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type organizationFindUnique struct {
	query builder.Query
}

func (r organizationFindUnique) getQuery() builder.Query {
	return r.query
}

func (r organizationFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r organizationFindUnique) with()                 {}
func (r organizationFindUnique) organizationModel()    {}
func (r organizationFindUnique) organizationRelation() {}

func (r organizationActions) FindUnique(
	params OrganizationEqualsUniqueWhereParam,
) organizationFindUnique {
	var v organizationFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Organization"
	v.query.Outputs = organizationOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r organizationFindUnique) With(params ...OrganizationRelationWith) organizationFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r organizationFindUnique) Select(params ...organizationPrismaFields) organizationFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r organizationFindUnique) Omit(params ...organizationPrismaFields) organizationFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range organizationOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r organizationFindUnique) Exec(ctx context.Context) (
	*OrganizationModel,
	error,
) {
	var v *OrganizationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r organizationFindUnique) ExecInner(ctx context.Context) (
	*InnerOrganization,
	error,
) {
	var v *InnerOrganization
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r organizationFindUnique) Update(params ...OrganizationSetParam) organizationUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Organization"

	var v organizationUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type organizationUpdateUnique struct {
	query builder.Query
}

func (r organizationUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r organizationUpdateUnique) organizationModel() {}

func (r organizationUpdateUnique) Exec(ctx context.Context) (*OrganizationModel, error) {
	var v OrganizationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r organizationUpdateUnique) Tx() OrganizationUniqueTxResult {
	v := newOrganizationUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r organizationFindUnique) Delete() organizationDeleteUnique {
	var v organizationDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Organization"

	return v
}

type organizationDeleteUnique struct {
	query builder.Query
}

func (r organizationDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p organizationDeleteUnique) organizationModel() {}

func (r organizationDeleteUnique) Exec(ctx context.Context) (*OrganizationModel, error) {
	var v OrganizationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r organizationDeleteUnique) Tx() OrganizationUniqueTxResult {
	v := newOrganizationUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type organizationFindFirst struct {
	query builder.Query
}

func (r organizationFindFirst) getQuery() builder.Query {
	return r.query
}

func (r organizationFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r organizationFindFirst) with()                 {}
func (r organizationFindFirst) organizationModel()    {}
func (r organizationFindFirst) organizationRelation() {}

func (r organizationActions) FindFirst(
	params ...OrganizationWhereParam,
) organizationFindFirst {
	var v organizationFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Organization"
	v.query.Outputs = organizationOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r organizationFindFirst) With(params ...OrganizationRelationWith) organizationFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r organizationFindFirst) Select(params ...organizationPrismaFields) organizationFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r organizationFindFirst) Omit(params ...organizationPrismaFields) organizationFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range organizationOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r organizationFindFirst) OrderBy(params ...OrganizationOrderByParam) organizationFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r organizationFindFirst) Skip(count int) organizationFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r organizationFindFirst) Take(count int) organizationFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r organizationFindFirst) Cursor(cursor OrganizationCursorParam) organizationFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r organizationFindFirst) Exec(ctx context.Context) (
	*OrganizationModel,
	error,
) {
	var v *OrganizationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r organizationFindFirst) ExecInner(ctx context.Context) (
	*InnerOrganization,
	error,
) {
	var v *InnerOrganization
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type organizationFindMany struct {
	query builder.Query
}

func (r organizationFindMany) getQuery() builder.Query {
	return r.query
}

func (r organizationFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r organizationFindMany) with()                 {}
func (r organizationFindMany) organizationModel()    {}
func (r organizationFindMany) organizationRelation() {}

func (r organizationActions) FindMany(
	params ...OrganizationWhereParam,
) organizationFindMany {
	var v organizationFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Organization"
	v.query.Outputs = organizationOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r organizationFindMany) With(params ...OrganizationRelationWith) organizationFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r organizationFindMany) Select(params ...organizationPrismaFields) organizationFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r organizationFindMany) Omit(params ...organizationPrismaFields) organizationFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range organizationOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r organizationFindMany) OrderBy(params ...OrganizationOrderByParam) organizationFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r organizationFindMany) Skip(count int) organizationFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r organizationFindMany) Take(count int) organizationFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r organizationFindMany) Cursor(cursor OrganizationCursorParam) organizationFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r organizationFindMany) Exec(ctx context.Context) (
	[]OrganizationModel,
	error,
) {
	var v []OrganizationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r organizationFindMany) ExecInner(ctx context.Context) (
	[]InnerOrganization,
	error,
) {
	var v []InnerOrganization
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r organizationFindMany) Update(params ...OrganizationSetParam) organizationUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Organization"

	r.query.Outputs = countOutput

	var v organizationUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type organizationUpdateMany struct {
	query builder.Query
}

func (r organizationUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r organizationUpdateMany) organizationModel() {}

func (r organizationUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r organizationUpdateMany) Tx() OrganizationManyTxResult {
	v := newOrganizationManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r organizationFindMany) Delete() organizationDeleteMany {
	var v organizationDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Organization"

	v.query.Outputs = countOutput

	return v
}

type organizationDeleteMany struct {
	query builder.Query
}

func (r organizationDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p organizationDeleteMany) organizationModel() {}

func (r organizationDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r organizationDeleteMany) Tx() OrganizationManyTxResult {
	v := newOrganizationManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToOrganizationFindUnique struct {
	query builder.Query
}

func (r userToOrganizationFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToOrganizationFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToOrganizationFindUnique) with()         {}
func (r userToOrganizationFindUnique) userModel()    {}
func (r userToOrganizationFindUnique) userRelation() {}

func (r userToOrganizationFindUnique) With(params ...OrganizationRelationWith) userToOrganizationFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToOrganizationFindUnique) Select(params ...userPrismaFields) userToOrganizationFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToOrganizationFindUnique) Omit(params ...userPrismaFields) userToOrganizationFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToOrganizationFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToOrganizationFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToOrganizationFindUnique) Update(params ...UserSetParam) userToOrganizationUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToOrganizationUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToOrganizationUpdateUnique struct {
	query builder.Query
}

func (r userToOrganizationUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToOrganizationUpdateUnique) userModel() {}

func (r userToOrganizationUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToOrganizationUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToOrganizationFindUnique) Delete() userToOrganizationDeleteUnique {
	var v userToOrganizationDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToOrganizationDeleteUnique struct {
	query builder.Query
}

func (r userToOrganizationDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToOrganizationDeleteUnique) userModel() {}

func (r userToOrganizationDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToOrganizationDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToOrganizationFindFirst struct {
	query builder.Query
}

func (r userToOrganizationFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToOrganizationFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToOrganizationFindFirst) with()         {}
func (r userToOrganizationFindFirst) userModel()    {}
func (r userToOrganizationFindFirst) userRelation() {}

func (r userToOrganizationFindFirst) With(params ...OrganizationRelationWith) userToOrganizationFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToOrganizationFindFirst) Select(params ...userPrismaFields) userToOrganizationFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToOrganizationFindFirst) Omit(params ...userPrismaFields) userToOrganizationFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToOrganizationFindFirst) OrderBy(params ...OrganizationOrderByParam) userToOrganizationFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToOrganizationFindFirst) Skip(count int) userToOrganizationFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToOrganizationFindFirst) Take(count int) userToOrganizationFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToOrganizationFindFirst) Cursor(cursor UserCursorParam) userToOrganizationFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToOrganizationFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToOrganizationFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToOrganizationFindMany struct {
	query builder.Query
}

func (r userToOrganizationFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToOrganizationFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToOrganizationFindMany) with()         {}
func (r userToOrganizationFindMany) userModel()    {}
func (r userToOrganizationFindMany) userRelation() {}

func (r userToOrganizationFindMany) With(params ...OrganizationRelationWith) userToOrganizationFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToOrganizationFindMany) Select(params ...userPrismaFields) userToOrganizationFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToOrganizationFindMany) Omit(params ...userPrismaFields) userToOrganizationFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToOrganizationFindMany) OrderBy(params ...OrganizationOrderByParam) userToOrganizationFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToOrganizationFindMany) Skip(count int) userToOrganizationFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToOrganizationFindMany) Take(count int) userToOrganizationFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToOrganizationFindMany) Cursor(cursor UserCursorParam) userToOrganizationFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToOrganizationFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToOrganizationFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToOrganizationFindMany) Update(params ...UserSetParam) userToOrganizationUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToOrganizationUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToOrganizationUpdateMany struct {
	query builder.Query
}

func (r userToOrganizationUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToOrganizationUpdateMany) userModel() {}

func (r userToOrganizationUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToOrganizationUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToOrganizationFindMany) Delete() userToOrganizationDeleteMany {
	var v userToOrganizationDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToOrganizationDeleteMany struct {
	query builder.Query
}

func (r userToOrganizationDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToOrganizationDeleteMany) userModel() {}

func (r userToOrganizationDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToOrganizationDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToRolesFindUnique struct {
	query builder.Query
}

func (r userToRolesFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToRolesFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToRolesFindUnique) with()         {}
func (r userToRolesFindUnique) userModel()    {}
func (r userToRolesFindUnique) userRelation() {}

func (r userToRolesFindUnique) With(params ...UserRoleRelationWith) userToRolesFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToRolesFindUnique) Select(params ...userPrismaFields) userToRolesFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToRolesFindUnique) Omit(params ...userPrismaFields) userToRolesFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToRolesFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToRolesFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToRolesFindUnique) Update(params ...UserSetParam) userToRolesUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToRolesUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToRolesUpdateUnique struct {
	query builder.Query
}

func (r userToRolesUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToRolesUpdateUnique) userModel() {}

func (r userToRolesUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToRolesUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToRolesFindUnique) Delete() userToRolesDeleteUnique {
	var v userToRolesDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToRolesDeleteUnique struct {
	query builder.Query
}

func (r userToRolesDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToRolesDeleteUnique) userModel() {}

func (r userToRolesDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToRolesDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToRolesFindFirst struct {
	query builder.Query
}

func (r userToRolesFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToRolesFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToRolesFindFirst) with()         {}
func (r userToRolesFindFirst) userModel()    {}
func (r userToRolesFindFirst) userRelation() {}

func (r userToRolesFindFirst) With(params ...UserRoleRelationWith) userToRolesFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToRolesFindFirst) Select(params ...userPrismaFields) userToRolesFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToRolesFindFirst) Omit(params ...userPrismaFields) userToRolesFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToRolesFindFirst) OrderBy(params ...UserRoleOrderByParam) userToRolesFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToRolesFindFirst) Skip(count int) userToRolesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToRolesFindFirst) Take(count int) userToRolesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToRolesFindFirst) Cursor(cursor UserCursorParam) userToRolesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToRolesFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToRolesFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToRolesFindMany struct {
	query builder.Query
}

func (r userToRolesFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToRolesFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToRolesFindMany) with()         {}
func (r userToRolesFindMany) userModel()    {}
func (r userToRolesFindMany) userRelation() {}

func (r userToRolesFindMany) With(params ...UserRoleRelationWith) userToRolesFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToRolesFindMany) Select(params ...userPrismaFields) userToRolesFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToRolesFindMany) Omit(params ...userPrismaFields) userToRolesFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToRolesFindMany) OrderBy(params ...UserRoleOrderByParam) userToRolesFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToRolesFindMany) Skip(count int) userToRolesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToRolesFindMany) Take(count int) userToRolesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToRolesFindMany) Cursor(cursor UserCursorParam) userToRolesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToRolesFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToRolesFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToRolesFindMany) Update(params ...UserSetParam) userToRolesUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToRolesUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToRolesUpdateMany struct {
	query builder.Query
}

func (r userToRolesUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToRolesUpdateMany) userModel() {}

func (r userToRolesUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToRolesUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToRolesFindMany) Delete() userToRolesDeleteMany {
	var v userToRolesDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToRolesDeleteMany struct {
	query builder.Query
}

func (r userToRolesDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToRolesDeleteMany) userModel() {}

func (r userToRolesDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToRolesDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToSessionsFindUnique struct {
	query builder.Query
}

func (r userToSessionsFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToSessionsFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToSessionsFindUnique) with()         {}
func (r userToSessionsFindUnique) userModel()    {}
func (r userToSessionsFindUnique) userRelation() {}

func (r userToSessionsFindUnique) With(params ...SessionRelationWith) userToSessionsFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToSessionsFindUnique) Select(params ...userPrismaFields) userToSessionsFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToSessionsFindUnique) Omit(params ...userPrismaFields) userToSessionsFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToSessionsFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToSessionsFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToSessionsFindUnique) Update(params ...UserSetParam) userToSessionsUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToSessionsUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToSessionsUpdateUnique struct {
	query builder.Query
}

func (r userToSessionsUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToSessionsUpdateUnique) userModel() {}

func (r userToSessionsUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToSessionsUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToSessionsFindUnique) Delete() userToSessionsDeleteUnique {
	var v userToSessionsDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToSessionsDeleteUnique struct {
	query builder.Query
}

func (r userToSessionsDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToSessionsDeleteUnique) userModel() {}

func (r userToSessionsDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToSessionsDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToSessionsFindFirst struct {
	query builder.Query
}

func (r userToSessionsFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToSessionsFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToSessionsFindFirst) with()         {}
func (r userToSessionsFindFirst) userModel()    {}
func (r userToSessionsFindFirst) userRelation() {}

func (r userToSessionsFindFirst) With(params ...SessionRelationWith) userToSessionsFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToSessionsFindFirst) Select(params ...userPrismaFields) userToSessionsFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToSessionsFindFirst) Omit(params ...userPrismaFields) userToSessionsFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToSessionsFindFirst) OrderBy(params ...SessionOrderByParam) userToSessionsFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToSessionsFindFirst) Skip(count int) userToSessionsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToSessionsFindFirst) Take(count int) userToSessionsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToSessionsFindFirst) Cursor(cursor UserCursorParam) userToSessionsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToSessionsFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToSessionsFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToSessionsFindMany struct {
	query builder.Query
}

func (r userToSessionsFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToSessionsFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToSessionsFindMany) with()         {}
func (r userToSessionsFindMany) userModel()    {}
func (r userToSessionsFindMany) userRelation() {}

func (r userToSessionsFindMany) With(params ...SessionRelationWith) userToSessionsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToSessionsFindMany) Select(params ...userPrismaFields) userToSessionsFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userToSessionsFindMany) Omit(params ...userPrismaFields) userToSessionsFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userToSessionsFindMany) OrderBy(params ...SessionOrderByParam) userToSessionsFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToSessionsFindMany) Skip(count int) userToSessionsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToSessionsFindMany) Take(count int) userToSessionsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToSessionsFindMany) Cursor(cursor UserCursorParam) userToSessionsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToSessionsFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToSessionsFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToSessionsFindMany) Update(params ...UserSetParam) userToSessionsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToSessionsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToSessionsUpdateMany struct {
	query builder.Query
}

func (r userToSessionsUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToSessionsUpdateMany) userModel() {}

func (r userToSessionsUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToSessionsUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToSessionsFindMany) Delete() userToSessionsDeleteMany {
	var v userToSessionsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToSessionsDeleteMany struct {
	query builder.Query
}

func (r userToSessionsDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToSessionsDeleteMany) userModel() {}

func (r userToSessionsDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToSessionsDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFindUnique struct {
	query builder.Query
}

func (r userFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindUnique) with()         {}
func (r userFindUnique) userModel()    {}
func (r userFindUnique) userRelation() {}

func (r userActions) FindUnique(
	params UserEqualsUniqueWhereParam,
) userFindUnique {
	var v userFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userFindUnique) With(params ...UserRelationWith) userFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindUnique) Select(params ...userPrismaFields) userFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindUnique) Omit(params ...userPrismaFields) userFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindUnique) Update(params ...UserSetParam) userUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateUnique struct {
	query builder.Query
}

func (r userUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpdateUnique) userModel() {}

func (r userUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFindUnique) Delete() userDeleteUnique {
	var v userDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userDeleteUnique struct {
	query builder.Query
}

func (r userDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userDeleteUnique) userModel() {}

func (r userDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFindFirst struct {
	query builder.Query
}

func (r userFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindFirst) with()         {}
func (r userFindFirst) userModel()    {}
func (r userFindFirst) userRelation() {}

func (r userActions) FindFirst(
	params ...UserWhereParam,
) userFindFirst {
	var v userFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindFirst) With(params ...UserRelationWith) userFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindFirst) Select(params ...userPrismaFields) userFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindFirst) Omit(params ...userPrismaFields) userFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindFirst) OrderBy(params ...UserOrderByParam) userFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFindFirst) Skip(count int) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindFirst) Take(count int) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindFirst) Cursor(cursor UserCursorParam) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userFindMany struct {
	query builder.Query
}

func (r userFindMany) getQuery() builder.Query {
	return r.query
}

func (r userFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindMany) with()         {}
func (r userFindMany) userModel()    {}
func (r userFindMany) userRelation() {}

func (r userActions) FindMany(
	params ...UserWhereParam,
) userFindMany {
	var v userFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindMany) With(params ...UserRelationWith) userFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindMany) Select(params ...userPrismaFields) userFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindMany) Omit(params ...userPrismaFields) userFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userFindMany) OrderBy(params ...UserOrderByParam) userFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFindMany) Skip(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindMany) Take(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindMany) Cursor(cursor UserCursorParam) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFindMany) Update(params ...UserSetParam) userUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateMany struct {
	query builder.Query
}

func (r userUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpdateMany) userModel() {}

func (r userUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFindMany) Delete() userDeleteMany {
	var v userDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userDeleteMany struct {
	query builder.Query
}

func (r userDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userDeleteMany) userModel() {}

func (r userDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type sessionToUserFindUnique struct {
	query builder.Query
}

func (r sessionToUserFindUnique) getQuery() builder.Query {
	return r.query
}

func (r sessionToUserFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r sessionToUserFindUnique) with()            {}
func (r sessionToUserFindUnique) sessionModel()    {}
func (r sessionToUserFindUnique) sessionRelation() {}

func (r sessionToUserFindUnique) With(params ...UserRelationWith) sessionToUserFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r sessionToUserFindUnique) Select(params ...sessionPrismaFields) sessionToUserFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r sessionToUserFindUnique) Omit(params ...sessionPrismaFields) sessionToUserFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range sessionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r sessionToUserFindUnique) Exec(ctx context.Context) (
	*SessionModel,
	error,
) {
	var v *SessionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r sessionToUserFindUnique) ExecInner(ctx context.Context) (
	*InnerSession,
	error,
) {
	var v *InnerSession
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r sessionToUserFindUnique) Update(params ...SessionSetParam) sessionToUserUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Session"

	var v sessionToUserUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type sessionToUserUpdateUnique struct {
	query builder.Query
}

func (r sessionToUserUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r sessionToUserUpdateUnique) sessionModel() {}

func (r sessionToUserUpdateUnique) Exec(ctx context.Context) (*SessionModel, error) {
	var v SessionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r sessionToUserUpdateUnique) Tx() SessionUniqueTxResult {
	v := newSessionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r sessionToUserFindUnique) Delete() sessionToUserDeleteUnique {
	var v sessionToUserDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Session"

	return v
}

type sessionToUserDeleteUnique struct {
	query builder.Query
}

func (r sessionToUserDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p sessionToUserDeleteUnique) sessionModel() {}

func (r sessionToUserDeleteUnique) Exec(ctx context.Context) (*SessionModel, error) {
	var v SessionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r sessionToUserDeleteUnique) Tx() SessionUniqueTxResult {
	v := newSessionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type sessionToUserFindFirst struct {
	query builder.Query
}

func (r sessionToUserFindFirst) getQuery() builder.Query {
	return r.query
}

func (r sessionToUserFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r sessionToUserFindFirst) with()            {}
func (r sessionToUserFindFirst) sessionModel()    {}
func (r sessionToUserFindFirst) sessionRelation() {}

func (r sessionToUserFindFirst) With(params ...UserRelationWith) sessionToUserFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r sessionToUserFindFirst) Select(params ...sessionPrismaFields) sessionToUserFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r sessionToUserFindFirst) Omit(params ...sessionPrismaFields) sessionToUserFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range sessionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r sessionToUserFindFirst) OrderBy(params ...UserOrderByParam) sessionToUserFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r sessionToUserFindFirst) Skip(count int) sessionToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r sessionToUserFindFirst) Take(count int) sessionToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r sessionToUserFindFirst) Cursor(cursor SessionCursorParam) sessionToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r sessionToUserFindFirst) Exec(ctx context.Context) (
	*SessionModel,
	error,
) {
	var v *SessionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r sessionToUserFindFirst) ExecInner(ctx context.Context) (
	*InnerSession,
	error,
) {
	var v *InnerSession
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type sessionToUserFindMany struct {
	query builder.Query
}

func (r sessionToUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r sessionToUserFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r sessionToUserFindMany) with()            {}
func (r sessionToUserFindMany) sessionModel()    {}
func (r sessionToUserFindMany) sessionRelation() {}

func (r sessionToUserFindMany) With(params ...UserRelationWith) sessionToUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r sessionToUserFindMany) Select(params ...sessionPrismaFields) sessionToUserFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r sessionToUserFindMany) Omit(params ...sessionPrismaFields) sessionToUserFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range sessionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r sessionToUserFindMany) OrderBy(params ...UserOrderByParam) sessionToUserFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r sessionToUserFindMany) Skip(count int) sessionToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r sessionToUserFindMany) Take(count int) sessionToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r sessionToUserFindMany) Cursor(cursor SessionCursorParam) sessionToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r sessionToUserFindMany) Exec(ctx context.Context) (
	[]SessionModel,
	error,
) {
	var v []SessionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r sessionToUserFindMany) ExecInner(ctx context.Context) (
	[]InnerSession,
	error,
) {
	var v []InnerSession
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r sessionToUserFindMany) Update(params ...SessionSetParam) sessionToUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Session"

	r.query.Outputs = countOutput

	var v sessionToUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type sessionToUserUpdateMany struct {
	query builder.Query
}

func (r sessionToUserUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r sessionToUserUpdateMany) sessionModel() {}

func (r sessionToUserUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r sessionToUserUpdateMany) Tx() SessionManyTxResult {
	v := newSessionManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r sessionToUserFindMany) Delete() sessionToUserDeleteMany {
	var v sessionToUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Session"

	v.query.Outputs = countOutput

	return v
}

type sessionToUserDeleteMany struct {
	query builder.Query
}

func (r sessionToUserDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p sessionToUserDeleteMany) sessionModel() {}

func (r sessionToUserDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r sessionToUserDeleteMany) Tx() SessionManyTxResult {
	v := newSessionManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type sessionFindUnique struct {
	query builder.Query
}

func (r sessionFindUnique) getQuery() builder.Query {
	return r.query
}

func (r sessionFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r sessionFindUnique) with()            {}
func (r sessionFindUnique) sessionModel()    {}
func (r sessionFindUnique) sessionRelation() {}

func (r sessionActions) FindUnique(
	params SessionEqualsUniqueWhereParam,
) sessionFindUnique {
	var v sessionFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Session"
	v.query.Outputs = sessionOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r sessionFindUnique) With(params ...SessionRelationWith) sessionFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r sessionFindUnique) Select(params ...sessionPrismaFields) sessionFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r sessionFindUnique) Omit(params ...sessionPrismaFields) sessionFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range sessionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r sessionFindUnique) Exec(ctx context.Context) (
	*SessionModel,
	error,
) {
	var v *SessionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r sessionFindUnique) ExecInner(ctx context.Context) (
	*InnerSession,
	error,
) {
	var v *InnerSession
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r sessionFindUnique) Update(params ...SessionSetParam) sessionUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Session"

	var v sessionUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type sessionUpdateUnique struct {
	query builder.Query
}

func (r sessionUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r sessionUpdateUnique) sessionModel() {}

func (r sessionUpdateUnique) Exec(ctx context.Context) (*SessionModel, error) {
	var v SessionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r sessionUpdateUnique) Tx() SessionUniqueTxResult {
	v := newSessionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r sessionFindUnique) Delete() sessionDeleteUnique {
	var v sessionDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Session"

	return v
}

type sessionDeleteUnique struct {
	query builder.Query
}

func (r sessionDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p sessionDeleteUnique) sessionModel() {}

func (r sessionDeleteUnique) Exec(ctx context.Context) (*SessionModel, error) {
	var v SessionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r sessionDeleteUnique) Tx() SessionUniqueTxResult {
	v := newSessionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type sessionFindFirst struct {
	query builder.Query
}

func (r sessionFindFirst) getQuery() builder.Query {
	return r.query
}

func (r sessionFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r sessionFindFirst) with()            {}
func (r sessionFindFirst) sessionModel()    {}
func (r sessionFindFirst) sessionRelation() {}

func (r sessionActions) FindFirst(
	params ...SessionWhereParam,
) sessionFindFirst {
	var v sessionFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Session"
	v.query.Outputs = sessionOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r sessionFindFirst) With(params ...SessionRelationWith) sessionFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r sessionFindFirst) Select(params ...sessionPrismaFields) sessionFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r sessionFindFirst) Omit(params ...sessionPrismaFields) sessionFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range sessionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r sessionFindFirst) OrderBy(params ...SessionOrderByParam) sessionFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r sessionFindFirst) Skip(count int) sessionFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r sessionFindFirst) Take(count int) sessionFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r sessionFindFirst) Cursor(cursor SessionCursorParam) sessionFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r sessionFindFirst) Exec(ctx context.Context) (
	*SessionModel,
	error,
) {
	var v *SessionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r sessionFindFirst) ExecInner(ctx context.Context) (
	*InnerSession,
	error,
) {
	var v *InnerSession
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type sessionFindMany struct {
	query builder.Query
}

func (r sessionFindMany) getQuery() builder.Query {
	return r.query
}

func (r sessionFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r sessionFindMany) with()            {}
func (r sessionFindMany) sessionModel()    {}
func (r sessionFindMany) sessionRelation() {}

func (r sessionActions) FindMany(
	params ...SessionWhereParam,
) sessionFindMany {
	var v sessionFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Session"
	v.query.Outputs = sessionOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r sessionFindMany) With(params ...SessionRelationWith) sessionFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r sessionFindMany) Select(params ...sessionPrismaFields) sessionFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r sessionFindMany) Omit(params ...sessionPrismaFields) sessionFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range sessionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r sessionFindMany) OrderBy(params ...SessionOrderByParam) sessionFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r sessionFindMany) Skip(count int) sessionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r sessionFindMany) Take(count int) sessionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r sessionFindMany) Cursor(cursor SessionCursorParam) sessionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r sessionFindMany) Exec(ctx context.Context) (
	[]SessionModel,
	error,
) {
	var v []SessionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r sessionFindMany) ExecInner(ctx context.Context) (
	[]InnerSession,
	error,
) {
	var v []InnerSession
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r sessionFindMany) Update(params ...SessionSetParam) sessionUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Session"

	r.query.Outputs = countOutput

	var v sessionUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type sessionUpdateMany struct {
	query builder.Query
}

func (r sessionUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r sessionUpdateMany) sessionModel() {}

func (r sessionUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r sessionUpdateMany) Tx() SessionManyTxResult {
	v := newSessionManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r sessionFindMany) Delete() sessionDeleteMany {
	var v sessionDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Session"

	v.query.Outputs = countOutput

	return v
}

type sessionDeleteMany struct {
	query builder.Query
}

func (r sessionDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p sessionDeleteMany) sessionModel() {}

func (r sessionDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r sessionDeleteMany) Tx() SessionManyTxResult {
	v := newSessionManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type registrationFindUnique struct {
	query builder.Query
}

func (r registrationFindUnique) getQuery() builder.Query {
	return r.query
}

func (r registrationFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r registrationFindUnique) with()                 {}
func (r registrationFindUnique) registrationModel()    {}
func (r registrationFindUnique) registrationRelation() {}

func (r registrationActions) FindUnique(
	params RegistrationEqualsUniqueWhereParam,
) registrationFindUnique {
	var v registrationFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Registration"
	v.query.Outputs = registrationOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r registrationFindUnique) With(params ...RegistrationRelationWith) registrationFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r registrationFindUnique) Select(params ...registrationPrismaFields) registrationFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r registrationFindUnique) Omit(params ...registrationPrismaFields) registrationFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range registrationOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r registrationFindUnique) Exec(ctx context.Context) (
	*RegistrationModel,
	error,
) {
	var v *RegistrationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r registrationFindUnique) ExecInner(ctx context.Context) (
	*InnerRegistration,
	error,
) {
	var v *InnerRegistration
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r registrationFindUnique) Update(params ...RegistrationSetParam) registrationUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Registration"

	var v registrationUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type registrationUpdateUnique struct {
	query builder.Query
}

func (r registrationUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r registrationUpdateUnique) registrationModel() {}

func (r registrationUpdateUnique) Exec(ctx context.Context) (*RegistrationModel, error) {
	var v RegistrationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r registrationUpdateUnique) Tx() RegistrationUniqueTxResult {
	v := newRegistrationUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r registrationFindUnique) Delete() registrationDeleteUnique {
	var v registrationDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Registration"

	return v
}

type registrationDeleteUnique struct {
	query builder.Query
}

func (r registrationDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p registrationDeleteUnique) registrationModel() {}

func (r registrationDeleteUnique) Exec(ctx context.Context) (*RegistrationModel, error) {
	var v RegistrationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r registrationDeleteUnique) Tx() RegistrationUniqueTxResult {
	v := newRegistrationUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type registrationFindFirst struct {
	query builder.Query
}

func (r registrationFindFirst) getQuery() builder.Query {
	return r.query
}

func (r registrationFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r registrationFindFirst) with()                 {}
func (r registrationFindFirst) registrationModel()    {}
func (r registrationFindFirst) registrationRelation() {}

func (r registrationActions) FindFirst(
	params ...RegistrationWhereParam,
) registrationFindFirst {
	var v registrationFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Registration"
	v.query.Outputs = registrationOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r registrationFindFirst) With(params ...RegistrationRelationWith) registrationFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r registrationFindFirst) Select(params ...registrationPrismaFields) registrationFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r registrationFindFirst) Omit(params ...registrationPrismaFields) registrationFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range registrationOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r registrationFindFirst) OrderBy(params ...RegistrationOrderByParam) registrationFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r registrationFindFirst) Skip(count int) registrationFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r registrationFindFirst) Take(count int) registrationFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r registrationFindFirst) Cursor(cursor RegistrationCursorParam) registrationFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r registrationFindFirst) Exec(ctx context.Context) (
	*RegistrationModel,
	error,
) {
	var v *RegistrationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r registrationFindFirst) ExecInner(ctx context.Context) (
	*InnerRegistration,
	error,
) {
	var v *InnerRegistration
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type registrationFindMany struct {
	query builder.Query
}

func (r registrationFindMany) getQuery() builder.Query {
	return r.query
}

func (r registrationFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r registrationFindMany) with()                 {}
func (r registrationFindMany) registrationModel()    {}
func (r registrationFindMany) registrationRelation() {}

func (r registrationActions) FindMany(
	params ...RegistrationWhereParam,
) registrationFindMany {
	var v registrationFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Registration"
	v.query.Outputs = registrationOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r registrationFindMany) With(params ...RegistrationRelationWith) registrationFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r registrationFindMany) Select(params ...registrationPrismaFields) registrationFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r registrationFindMany) Omit(params ...registrationPrismaFields) registrationFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range registrationOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r registrationFindMany) OrderBy(params ...RegistrationOrderByParam) registrationFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r registrationFindMany) Skip(count int) registrationFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r registrationFindMany) Take(count int) registrationFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r registrationFindMany) Cursor(cursor RegistrationCursorParam) registrationFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r registrationFindMany) Exec(ctx context.Context) (
	[]RegistrationModel,
	error,
) {
	var v []RegistrationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r registrationFindMany) ExecInner(ctx context.Context) (
	[]InnerRegistration,
	error,
) {
	var v []InnerRegistration
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r registrationFindMany) Update(params ...RegistrationSetParam) registrationUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Registration"

	r.query.Outputs = countOutput

	var v registrationUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type registrationUpdateMany struct {
	query builder.Query
}

func (r registrationUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r registrationUpdateMany) registrationModel() {}

func (r registrationUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r registrationUpdateMany) Tx() RegistrationManyTxResult {
	v := newRegistrationManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r registrationFindMany) Delete() registrationDeleteMany {
	var v registrationDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Registration"

	v.query.Outputs = countOutput

	return v
}

type registrationDeleteMany struct {
	query builder.Query
}

func (r registrationDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p registrationDeleteMany) registrationModel() {}

func (r registrationDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r registrationDeleteMany) Tx() RegistrationManyTxResult {
	v := newRegistrationManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type roleToPermissionsFindUnique struct {
	query builder.Query
}

func (r roleToPermissionsFindUnique) getQuery() builder.Query {
	return r.query
}

func (r roleToPermissionsFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r roleToPermissionsFindUnique) with()         {}
func (r roleToPermissionsFindUnique) roleModel()    {}
func (r roleToPermissionsFindUnique) roleRelation() {}

func (r roleToPermissionsFindUnique) With(params ...RolePermissionRelationWith) roleToPermissionsFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r roleToPermissionsFindUnique) Select(params ...rolePrismaFields) roleToPermissionsFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r roleToPermissionsFindUnique) Omit(params ...rolePrismaFields) roleToPermissionsFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range roleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r roleToPermissionsFindUnique) Exec(ctx context.Context) (
	*RoleModel,
	error,
) {
	var v *RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r roleToPermissionsFindUnique) ExecInner(ctx context.Context) (
	*InnerRole,
	error,
) {
	var v *InnerRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r roleToPermissionsFindUnique) Update(params ...RoleSetParam) roleToPermissionsUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Role"

	var v roleToPermissionsUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type roleToPermissionsUpdateUnique struct {
	query builder.Query
}

func (r roleToPermissionsUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r roleToPermissionsUpdateUnique) roleModel() {}

func (r roleToPermissionsUpdateUnique) Exec(ctx context.Context) (*RoleModel, error) {
	var v RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roleToPermissionsUpdateUnique) Tx() RoleUniqueTxResult {
	v := newRoleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r roleToPermissionsFindUnique) Delete() roleToPermissionsDeleteUnique {
	var v roleToPermissionsDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Role"

	return v
}

type roleToPermissionsDeleteUnique struct {
	query builder.Query
}

func (r roleToPermissionsDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p roleToPermissionsDeleteUnique) roleModel() {}

func (r roleToPermissionsDeleteUnique) Exec(ctx context.Context) (*RoleModel, error) {
	var v RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roleToPermissionsDeleteUnique) Tx() RoleUniqueTxResult {
	v := newRoleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type roleToPermissionsFindFirst struct {
	query builder.Query
}

func (r roleToPermissionsFindFirst) getQuery() builder.Query {
	return r.query
}

func (r roleToPermissionsFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r roleToPermissionsFindFirst) with()         {}
func (r roleToPermissionsFindFirst) roleModel()    {}
func (r roleToPermissionsFindFirst) roleRelation() {}

func (r roleToPermissionsFindFirst) With(params ...RolePermissionRelationWith) roleToPermissionsFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r roleToPermissionsFindFirst) Select(params ...rolePrismaFields) roleToPermissionsFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r roleToPermissionsFindFirst) Omit(params ...rolePrismaFields) roleToPermissionsFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range roleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r roleToPermissionsFindFirst) OrderBy(params ...RolePermissionOrderByParam) roleToPermissionsFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r roleToPermissionsFindFirst) Skip(count int) roleToPermissionsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r roleToPermissionsFindFirst) Take(count int) roleToPermissionsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r roleToPermissionsFindFirst) Cursor(cursor RoleCursorParam) roleToPermissionsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r roleToPermissionsFindFirst) Exec(ctx context.Context) (
	*RoleModel,
	error,
) {
	var v *RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r roleToPermissionsFindFirst) ExecInner(ctx context.Context) (
	*InnerRole,
	error,
) {
	var v *InnerRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type roleToPermissionsFindMany struct {
	query builder.Query
}

func (r roleToPermissionsFindMany) getQuery() builder.Query {
	return r.query
}

func (r roleToPermissionsFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r roleToPermissionsFindMany) with()         {}
func (r roleToPermissionsFindMany) roleModel()    {}
func (r roleToPermissionsFindMany) roleRelation() {}

func (r roleToPermissionsFindMany) With(params ...RolePermissionRelationWith) roleToPermissionsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r roleToPermissionsFindMany) Select(params ...rolePrismaFields) roleToPermissionsFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r roleToPermissionsFindMany) Omit(params ...rolePrismaFields) roleToPermissionsFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range roleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r roleToPermissionsFindMany) OrderBy(params ...RolePermissionOrderByParam) roleToPermissionsFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r roleToPermissionsFindMany) Skip(count int) roleToPermissionsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r roleToPermissionsFindMany) Take(count int) roleToPermissionsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r roleToPermissionsFindMany) Cursor(cursor RoleCursorParam) roleToPermissionsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r roleToPermissionsFindMany) Exec(ctx context.Context) (
	[]RoleModel,
	error,
) {
	var v []RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r roleToPermissionsFindMany) ExecInner(ctx context.Context) (
	[]InnerRole,
	error,
) {
	var v []InnerRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r roleToPermissionsFindMany) Update(params ...RoleSetParam) roleToPermissionsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Role"

	r.query.Outputs = countOutput

	var v roleToPermissionsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type roleToPermissionsUpdateMany struct {
	query builder.Query
}

func (r roleToPermissionsUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r roleToPermissionsUpdateMany) roleModel() {}

func (r roleToPermissionsUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roleToPermissionsUpdateMany) Tx() RoleManyTxResult {
	v := newRoleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r roleToPermissionsFindMany) Delete() roleToPermissionsDeleteMany {
	var v roleToPermissionsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Role"

	v.query.Outputs = countOutput

	return v
}

type roleToPermissionsDeleteMany struct {
	query builder.Query
}

func (r roleToPermissionsDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p roleToPermissionsDeleteMany) roleModel() {}

func (r roleToPermissionsDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roleToPermissionsDeleteMany) Tx() RoleManyTxResult {
	v := newRoleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type roleToUsersFindUnique struct {
	query builder.Query
}

func (r roleToUsersFindUnique) getQuery() builder.Query {
	return r.query
}

func (r roleToUsersFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r roleToUsersFindUnique) with()         {}
func (r roleToUsersFindUnique) roleModel()    {}
func (r roleToUsersFindUnique) roleRelation() {}

func (r roleToUsersFindUnique) With(params ...UserRoleRelationWith) roleToUsersFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r roleToUsersFindUnique) Select(params ...rolePrismaFields) roleToUsersFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r roleToUsersFindUnique) Omit(params ...rolePrismaFields) roleToUsersFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range roleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r roleToUsersFindUnique) Exec(ctx context.Context) (
	*RoleModel,
	error,
) {
	var v *RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r roleToUsersFindUnique) ExecInner(ctx context.Context) (
	*InnerRole,
	error,
) {
	var v *InnerRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r roleToUsersFindUnique) Update(params ...RoleSetParam) roleToUsersUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Role"

	var v roleToUsersUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type roleToUsersUpdateUnique struct {
	query builder.Query
}

func (r roleToUsersUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r roleToUsersUpdateUnique) roleModel() {}

func (r roleToUsersUpdateUnique) Exec(ctx context.Context) (*RoleModel, error) {
	var v RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roleToUsersUpdateUnique) Tx() RoleUniqueTxResult {
	v := newRoleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r roleToUsersFindUnique) Delete() roleToUsersDeleteUnique {
	var v roleToUsersDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Role"

	return v
}

type roleToUsersDeleteUnique struct {
	query builder.Query
}

func (r roleToUsersDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p roleToUsersDeleteUnique) roleModel() {}

func (r roleToUsersDeleteUnique) Exec(ctx context.Context) (*RoleModel, error) {
	var v RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roleToUsersDeleteUnique) Tx() RoleUniqueTxResult {
	v := newRoleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type roleToUsersFindFirst struct {
	query builder.Query
}

func (r roleToUsersFindFirst) getQuery() builder.Query {
	return r.query
}

func (r roleToUsersFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r roleToUsersFindFirst) with()         {}
func (r roleToUsersFindFirst) roleModel()    {}
func (r roleToUsersFindFirst) roleRelation() {}

func (r roleToUsersFindFirst) With(params ...UserRoleRelationWith) roleToUsersFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r roleToUsersFindFirst) Select(params ...rolePrismaFields) roleToUsersFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r roleToUsersFindFirst) Omit(params ...rolePrismaFields) roleToUsersFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range roleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r roleToUsersFindFirst) OrderBy(params ...UserRoleOrderByParam) roleToUsersFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r roleToUsersFindFirst) Skip(count int) roleToUsersFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r roleToUsersFindFirst) Take(count int) roleToUsersFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r roleToUsersFindFirst) Cursor(cursor RoleCursorParam) roleToUsersFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r roleToUsersFindFirst) Exec(ctx context.Context) (
	*RoleModel,
	error,
) {
	var v *RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r roleToUsersFindFirst) ExecInner(ctx context.Context) (
	*InnerRole,
	error,
) {
	var v *InnerRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type roleToUsersFindMany struct {
	query builder.Query
}

func (r roleToUsersFindMany) getQuery() builder.Query {
	return r.query
}

func (r roleToUsersFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r roleToUsersFindMany) with()         {}
func (r roleToUsersFindMany) roleModel()    {}
func (r roleToUsersFindMany) roleRelation() {}

func (r roleToUsersFindMany) With(params ...UserRoleRelationWith) roleToUsersFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r roleToUsersFindMany) Select(params ...rolePrismaFields) roleToUsersFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r roleToUsersFindMany) Omit(params ...rolePrismaFields) roleToUsersFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range roleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r roleToUsersFindMany) OrderBy(params ...UserRoleOrderByParam) roleToUsersFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r roleToUsersFindMany) Skip(count int) roleToUsersFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r roleToUsersFindMany) Take(count int) roleToUsersFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r roleToUsersFindMany) Cursor(cursor RoleCursorParam) roleToUsersFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r roleToUsersFindMany) Exec(ctx context.Context) (
	[]RoleModel,
	error,
) {
	var v []RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r roleToUsersFindMany) ExecInner(ctx context.Context) (
	[]InnerRole,
	error,
) {
	var v []InnerRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r roleToUsersFindMany) Update(params ...RoleSetParam) roleToUsersUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Role"

	r.query.Outputs = countOutput

	var v roleToUsersUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type roleToUsersUpdateMany struct {
	query builder.Query
}

func (r roleToUsersUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r roleToUsersUpdateMany) roleModel() {}

func (r roleToUsersUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roleToUsersUpdateMany) Tx() RoleManyTxResult {
	v := newRoleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r roleToUsersFindMany) Delete() roleToUsersDeleteMany {
	var v roleToUsersDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Role"

	v.query.Outputs = countOutput

	return v
}

type roleToUsersDeleteMany struct {
	query builder.Query
}

func (r roleToUsersDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p roleToUsersDeleteMany) roleModel() {}

func (r roleToUsersDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roleToUsersDeleteMany) Tx() RoleManyTxResult {
	v := newRoleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type roleFindUnique struct {
	query builder.Query
}

func (r roleFindUnique) getQuery() builder.Query {
	return r.query
}

func (r roleFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r roleFindUnique) with()         {}
func (r roleFindUnique) roleModel()    {}
func (r roleFindUnique) roleRelation() {}

func (r roleActions) FindUnique(
	params RoleEqualsUniqueWhereParam,
) roleFindUnique {
	var v roleFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Role"
	v.query.Outputs = roleOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r roleFindUnique) With(params ...RoleRelationWith) roleFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r roleFindUnique) Select(params ...rolePrismaFields) roleFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r roleFindUnique) Omit(params ...rolePrismaFields) roleFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range roleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r roleFindUnique) Exec(ctx context.Context) (
	*RoleModel,
	error,
) {
	var v *RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r roleFindUnique) ExecInner(ctx context.Context) (
	*InnerRole,
	error,
) {
	var v *InnerRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r roleFindUnique) Update(params ...RoleSetParam) roleUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Role"

	var v roleUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type roleUpdateUnique struct {
	query builder.Query
}

func (r roleUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r roleUpdateUnique) roleModel() {}

func (r roleUpdateUnique) Exec(ctx context.Context) (*RoleModel, error) {
	var v RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roleUpdateUnique) Tx() RoleUniqueTxResult {
	v := newRoleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r roleFindUnique) Delete() roleDeleteUnique {
	var v roleDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Role"

	return v
}

type roleDeleteUnique struct {
	query builder.Query
}

func (r roleDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p roleDeleteUnique) roleModel() {}

func (r roleDeleteUnique) Exec(ctx context.Context) (*RoleModel, error) {
	var v RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roleDeleteUnique) Tx() RoleUniqueTxResult {
	v := newRoleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type roleFindFirst struct {
	query builder.Query
}

func (r roleFindFirst) getQuery() builder.Query {
	return r.query
}

func (r roleFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r roleFindFirst) with()         {}
func (r roleFindFirst) roleModel()    {}
func (r roleFindFirst) roleRelation() {}

func (r roleActions) FindFirst(
	params ...RoleWhereParam,
) roleFindFirst {
	var v roleFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Role"
	v.query.Outputs = roleOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r roleFindFirst) With(params ...RoleRelationWith) roleFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r roleFindFirst) Select(params ...rolePrismaFields) roleFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r roleFindFirst) Omit(params ...rolePrismaFields) roleFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range roleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r roleFindFirst) OrderBy(params ...RoleOrderByParam) roleFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r roleFindFirst) Skip(count int) roleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r roleFindFirst) Take(count int) roleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r roleFindFirst) Cursor(cursor RoleCursorParam) roleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r roleFindFirst) Exec(ctx context.Context) (
	*RoleModel,
	error,
) {
	var v *RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r roleFindFirst) ExecInner(ctx context.Context) (
	*InnerRole,
	error,
) {
	var v *InnerRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type roleFindMany struct {
	query builder.Query
}

func (r roleFindMany) getQuery() builder.Query {
	return r.query
}

func (r roleFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r roleFindMany) with()         {}
func (r roleFindMany) roleModel()    {}
func (r roleFindMany) roleRelation() {}

func (r roleActions) FindMany(
	params ...RoleWhereParam,
) roleFindMany {
	var v roleFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Role"
	v.query.Outputs = roleOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r roleFindMany) With(params ...RoleRelationWith) roleFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r roleFindMany) Select(params ...rolePrismaFields) roleFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r roleFindMany) Omit(params ...rolePrismaFields) roleFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range roleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r roleFindMany) OrderBy(params ...RoleOrderByParam) roleFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r roleFindMany) Skip(count int) roleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r roleFindMany) Take(count int) roleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r roleFindMany) Cursor(cursor RoleCursorParam) roleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r roleFindMany) Exec(ctx context.Context) (
	[]RoleModel,
	error,
) {
	var v []RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r roleFindMany) ExecInner(ctx context.Context) (
	[]InnerRole,
	error,
) {
	var v []InnerRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r roleFindMany) Update(params ...RoleSetParam) roleUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Role"

	r.query.Outputs = countOutput

	var v roleUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type roleUpdateMany struct {
	query builder.Query
}

func (r roleUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r roleUpdateMany) roleModel() {}

func (r roleUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roleUpdateMany) Tx() RoleManyTxResult {
	v := newRoleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r roleFindMany) Delete() roleDeleteMany {
	var v roleDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Role"

	v.query.Outputs = countOutput

	return v
}

type roleDeleteMany struct {
	query builder.Query
}

func (r roleDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p roleDeleteMany) roleModel() {}

func (r roleDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roleDeleteMany) Tx() RoleManyTxResult {
	v := newRoleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type permissionToRolesFindUnique struct {
	query builder.Query
}

func (r permissionToRolesFindUnique) getQuery() builder.Query {
	return r.query
}

func (r permissionToRolesFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r permissionToRolesFindUnique) with()               {}
func (r permissionToRolesFindUnique) permissionModel()    {}
func (r permissionToRolesFindUnique) permissionRelation() {}

func (r permissionToRolesFindUnique) With(params ...RolePermissionRelationWith) permissionToRolesFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r permissionToRolesFindUnique) Select(params ...permissionPrismaFields) permissionToRolesFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r permissionToRolesFindUnique) Omit(params ...permissionPrismaFields) permissionToRolesFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range permissionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r permissionToRolesFindUnique) Exec(ctx context.Context) (
	*PermissionModel,
	error,
) {
	var v *PermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r permissionToRolesFindUnique) ExecInner(ctx context.Context) (
	*InnerPermission,
	error,
) {
	var v *InnerPermission
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r permissionToRolesFindUnique) Update(params ...PermissionSetParam) permissionToRolesUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Permission"

	var v permissionToRolesUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type permissionToRolesUpdateUnique struct {
	query builder.Query
}

func (r permissionToRolesUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r permissionToRolesUpdateUnique) permissionModel() {}

func (r permissionToRolesUpdateUnique) Exec(ctx context.Context) (*PermissionModel, error) {
	var v PermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r permissionToRolesUpdateUnique) Tx() PermissionUniqueTxResult {
	v := newPermissionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r permissionToRolesFindUnique) Delete() permissionToRolesDeleteUnique {
	var v permissionToRolesDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Permission"

	return v
}

type permissionToRolesDeleteUnique struct {
	query builder.Query
}

func (r permissionToRolesDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p permissionToRolesDeleteUnique) permissionModel() {}

func (r permissionToRolesDeleteUnique) Exec(ctx context.Context) (*PermissionModel, error) {
	var v PermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r permissionToRolesDeleteUnique) Tx() PermissionUniqueTxResult {
	v := newPermissionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type permissionToRolesFindFirst struct {
	query builder.Query
}

func (r permissionToRolesFindFirst) getQuery() builder.Query {
	return r.query
}

func (r permissionToRolesFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r permissionToRolesFindFirst) with()               {}
func (r permissionToRolesFindFirst) permissionModel()    {}
func (r permissionToRolesFindFirst) permissionRelation() {}

func (r permissionToRolesFindFirst) With(params ...RolePermissionRelationWith) permissionToRolesFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r permissionToRolesFindFirst) Select(params ...permissionPrismaFields) permissionToRolesFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r permissionToRolesFindFirst) Omit(params ...permissionPrismaFields) permissionToRolesFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range permissionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r permissionToRolesFindFirst) OrderBy(params ...RolePermissionOrderByParam) permissionToRolesFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r permissionToRolesFindFirst) Skip(count int) permissionToRolesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r permissionToRolesFindFirst) Take(count int) permissionToRolesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r permissionToRolesFindFirst) Cursor(cursor PermissionCursorParam) permissionToRolesFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r permissionToRolesFindFirst) Exec(ctx context.Context) (
	*PermissionModel,
	error,
) {
	var v *PermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r permissionToRolesFindFirst) ExecInner(ctx context.Context) (
	*InnerPermission,
	error,
) {
	var v *InnerPermission
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type permissionToRolesFindMany struct {
	query builder.Query
}

func (r permissionToRolesFindMany) getQuery() builder.Query {
	return r.query
}

func (r permissionToRolesFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r permissionToRolesFindMany) with()               {}
func (r permissionToRolesFindMany) permissionModel()    {}
func (r permissionToRolesFindMany) permissionRelation() {}

func (r permissionToRolesFindMany) With(params ...RolePermissionRelationWith) permissionToRolesFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r permissionToRolesFindMany) Select(params ...permissionPrismaFields) permissionToRolesFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r permissionToRolesFindMany) Omit(params ...permissionPrismaFields) permissionToRolesFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range permissionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r permissionToRolesFindMany) OrderBy(params ...RolePermissionOrderByParam) permissionToRolesFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r permissionToRolesFindMany) Skip(count int) permissionToRolesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r permissionToRolesFindMany) Take(count int) permissionToRolesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r permissionToRolesFindMany) Cursor(cursor PermissionCursorParam) permissionToRolesFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r permissionToRolesFindMany) Exec(ctx context.Context) (
	[]PermissionModel,
	error,
) {
	var v []PermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r permissionToRolesFindMany) ExecInner(ctx context.Context) (
	[]InnerPermission,
	error,
) {
	var v []InnerPermission
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r permissionToRolesFindMany) Update(params ...PermissionSetParam) permissionToRolesUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Permission"

	r.query.Outputs = countOutput

	var v permissionToRolesUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type permissionToRolesUpdateMany struct {
	query builder.Query
}

func (r permissionToRolesUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r permissionToRolesUpdateMany) permissionModel() {}

func (r permissionToRolesUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r permissionToRolesUpdateMany) Tx() PermissionManyTxResult {
	v := newPermissionManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r permissionToRolesFindMany) Delete() permissionToRolesDeleteMany {
	var v permissionToRolesDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Permission"

	v.query.Outputs = countOutput

	return v
}

type permissionToRolesDeleteMany struct {
	query builder.Query
}

func (r permissionToRolesDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p permissionToRolesDeleteMany) permissionModel() {}

func (r permissionToRolesDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r permissionToRolesDeleteMany) Tx() PermissionManyTxResult {
	v := newPermissionManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type permissionFindUnique struct {
	query builder.Query
}

func (r permissionFindUnique) getQuery() builder.Query {
	return r.query
}

func (r permissionFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r permissionFindUnique) with()               {}
func (r permissionFindUnique) permissionModel()    {}
func (r permissionFindUnique) permissionRelation() {}

func (r permissionActions) FindUnique(
	params PermissionEqualsUniqueWhereParam,
) permissionFindUnique {
	var v permissionFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Permission"
	v.query.Outputs = permissionOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r permissionFindUnique) With(params ...PermissionRelationWith) permissionFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r permissionFindUnique) Select(params ...permissionPrismaFields) permissionFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r permissionFindUnique) Omit(params ...permissionPrismaFields) permissionFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range permissionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r permissionFindUnique) Exec(ctx context.Context) (
	*PermissionModel,
	error,
) {
	var v *PermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r permissionFindUnique) ExecInner(ctx context.Context) (
	*InnerPermission,
	error,
) {
	var v *InnerPermission
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r permissionFindUnique) Update(params ...PermissionSetParam) permissionUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Permission"

	var v permissionUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type permissionUpdateUnique struct {
	query builder.Query
}

func (r permissionUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r permissionUpdateUnique) permissionModel() {}

func (r permissionUpdateUnique) Exec(ctx context.Context) (*PermissionModel, error) {
	var v PermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r permissionUpdateUnique) Tx() PermissionUniqueTxResult {
	v := newPermissionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r permissionFindUnique) Delete() permissionDeleteUnique {
	var v permissionDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Permission"

	return v
}

type permissionDeleteUnique struct {
	query builder.Query
}

func (r permissionDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p permissionDeleteUnique) permissionModel() {}

func (r permissionDeleteUnique) Exec(ctx context.Context) (*PermissionModel, error) {
	var v PermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r permissionDeleteUnique) Tx() PermissionUniqueTxResult {
	v := newPermissionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type permissionFindFirst struct {
	query builder.Query
}

func (r permissionFindFirst) getQuery() builder.Query {
	return r.query
}

func (r permissionFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r permissionFindFirst) with()               {}
func (r permissionFindFirst) permissionModel()    {}
func (r permissionFindFirst) permissionRelation() {}

func (r permissionActions) FindFirst(
	params ...PermissionWhereParam,
) permissionFindFirst {
	var v permissionFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Permission"
	v.query.Outputs = permissionOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r permissionFindFirst) With(params ...PermissionRelationWith) permissionFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r permissionFindFirst) Select(params ...permissionPrismaFields) permissionFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r permissionFindFirst) Omit(params ...permissionPrismaFields) permissionFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range permissionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r permissionFindFirst) OrderBy(params ...PermissionOrderByParam) permissionFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r permissionFindFirst) Skip(count int) permissionFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r permissionFindFirst) Take(count int) permissionFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r permissionFindFirst) Cursor(cursor PermissionCursorParam) permissionFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r permissionFindFirst) Exec(ctx context.Context) (
	*PermissionModel,
	error,
) {
	var v *PermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r permissionFindFirst) ExecInner(ctx context.Context) (
	*InnerPermission,
	error,
) {
	var v *InnerPermission
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type permissionFindMany struct {
	query builder.Query
}

func (r permissionFindMany) getQuery() builder.Query {
	return r.query
}

func (r permissionFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r permissionFindMany) with()               {}
func (r permissionFindMany) permissionModel()    {}
func (r permissionFindMany) permissionRelation() {}

func (r permissionActions) FindMany(
	params ...PermissionWhereParam,
) permissionFindMany {
	var v permissionFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Permission"
	v.query.Outputs = permissionOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r permissionFindMany) With(params ...PermissionRelationWith) permissionFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r permissionFindMany) Select(params ...permissionPrismaFields) permissionFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r permissionFindMany) Omit(params ...permissionPrismaFields) permissionFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range permissionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r permissionFindMany) OrderBy(params ...PermissionOrderByParam) permissionFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r permissionFindMany) Skip(count int) permissionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r permissionFindMany) Take(count int) permissionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r permissionFindMany) Cursor(cursor PermissionCursorParam) permissionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r permissionFindMany) Exec(ctx context.Context) (
	[]PermissionModel,
	error,
) {
	var v []PermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r permissionFindMany) ExecInner(ctx context.Context) (
	[]InnerPermission,
	error,
) {
	var v []InnerPermission
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r permissionFindMany) Update(params ...PermissionSetParam) permissionUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Permission"

	r.query.Outputs = countOutput

	var v permissionUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type permissionUpdateMany struct {
	query builder.Query
}

func (r permissionUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r permissionUpdateMany) permissionModel() {}

func (r permissionUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r permissionUpdateMany) Tx() PermissionManyTxResult {
	v := newPermissionManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r permissionFindMany) Delete() permissionDeleteMany {
	var v permissionDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Permission"

	v.query.Outputs = countOutput

	return v
}

type permissionDeleteMany struct {
	query builder.Query
}

func (r permissionDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p permissionDeleteMany) permissionModel() {}

func (r permissionDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r permissionDeleteMany) Tx() PermissionManyTxResult {
	v := newPermissionManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type rolePermissionToRoleFindUnique struct {
	query builder.Query
}

func (r rolePermissionToRoleFindUnique) getQuery() builder.Query {
	return r.query
}

func (r rolePermissionToRoleFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r rolePermissionToRoleFindUnique) with()                   {}
func (r rolePermissionToRoleFindUnique) rolePermissionModel()    {}
func (r rolePermissionToRoleFindUnique) rolePermissionRelation() {}

func (r rolePermissionToRoleFindUnique) With(params ...RoleRelationWith) rolePermissionToRoleFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rolePermissionToRoleFindUnique) Select(params ...rolePermissionPrismaFields) rolePermissionToRoleFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionToRoleFindUnique) Omit(params ...rolePermissionPrismaFields) rolePermissionToRoleFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rolePermissionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionToRoleFindUnique) Exec(ctx context.Context) (
	*RolePermissionModel,
	error,
) {
	var v *RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rolePermissionToRoleFindUnique) ExecInner(ctx context.Context) (
	*InnerRolePermission,
	error,
) {
	var v *InnerRolePermission
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rolePermissionToRoleFindUnique) Update(params ...RolePermissionSetParam) rolePermissionToRoleUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RolePermission"

	var v rolePermissionToRoleUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type rolePermissionToRoleUpdateUnique struct {
	query builder.Query
}

func (r rolePermissionToRoleUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r rolePermissionToRoleUpdateUnique) rolePermissionModel() {}

func (r rolePermissionToRoleUpdateUnique) Exec(ctx context.Context) (*RolePermissionModel, error) {
	var v RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rolePermissionToRoleUpdateUnique) Tx() RolePermissionUniqueTxResult {
	v := newRolePermissionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r rolePermissionToRoleFindUnique) Delete() rolePermissionToRoleDeleteUnique {
	var v rolePermissionToRoleDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RolePermission"

	return v
}

type rolePermissionToRoleDeleteUnique struct {
	query builder.Query
}

func (r rolePermissionToRoleDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p rolePermissionToRoleDeleteUnique) rolePermissionModel() {}

func (r rolePermissionToRoleDeleteUnique) Exec(ctx context.Context) (*RolePermissionModel, error) {
	var v RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rolePermissionToRoleDeleteUnique) Tx() RolePermissionUniqueTxResult {
	v := newRolePermissionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type rolePermissionToRoleFindFirst struct {
	query builder.Query
}

func (r rolePermissionToRoleFindFirst) getQuery() builder.Query {
	return r.query
}

func (r rolePermissionToRoleFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r rolePermissionToRoleFindFirst) with()                   {}
func (r rolePermissionToRoleFindFirst) rolePermissionModel()    {}
func (r rolePermissionToRoleFindFirst) rolePermissionRelation() {}

func (r rolePermissionToRoleFindFirst) With(params ...RoleRelationWith) rolePermissionToRoleFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rolePermissionToRoleFindFirst) Select(params ...rolePermissionPrismaFields) rolePermissionToRoleFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionToRoleFindFirst) Omit(params ...rolePermissionPrismaFields) rolePermissionToRoleFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rolePermissionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionToRoleFindFirst) OrderBy(params ...RoleOrderByParam) rolePermissionToRoleFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r rolePermissionToRoleFindFirst) Skip(count int) rolePermissionToRoleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r rolePermissionToRoleFindFirst) Take(count int) rolePermissionToRoleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r rolePermissionToRoleFindFirst) Cursor(cursor RolePermissionCursorParam) rolePermissionToRoleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r rolePermissionToRoleFindFirst) Exec(ctx context.Context) (
	*RolePermissionModel,
	error,
) {
	var v *RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rolePermissionToRoleFindFirst) ExecInner(ctx context.Context) (
	*InnerRolePermission,
	error,
) {
	var v *InnerRolePermission
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type rolePermissionToRoleFindMany struct {
	query builder.Query
}

func (r rolePermissionToRoleFindMany) getQuery() builder.Query {
	return r.query
}

func (r rolePermissionToRoleFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r rolePermissionToRoleFindMany) with()                   {}
func (r rolePermissionToRoleFindMany) rolePermissionModel()    {}
func (r rolePermissionToRoleFindMany) rolePermissionRelation() {}

func (r rolePermissionToRoleFindMany) With(params ...RoleRelationWith) rolePermissionToRoleFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rolePermissionToRoleFindMany) Select(params ...rolePermissionPrismaFields) rolePermissionToRoleFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionToRoleFindMany) Omit(params ...rolePermissionPrismaFields) rolePermissionToRoleFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rolePermissionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionToRoleFindMany) OrderBy(params ...RoleOrderByParam) rolePermissionToRoleFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r rolePermissionToRoleFindMany) Skip(count int) rolePermissionToRoleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r rolePermissionToRoleFindMany) Take(count int) rolePermissionToRoleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r rolePermissionToRoleFindMany) Cursor(cursor RolePermissionCursorParam) rolePermissionToRoleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r rolePermissionToRoleFindMany) Exec(ctx context.Context) (
	[]RolePermissionModel,
	error,
) {
	var v []RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r rolePermissionToRoleFindMany) ExecInner(ctx context.Context) (
	[]InnerRolePermission,
	error,
) {
	var v []InnerRolePermission
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r rolePermissionToRoleFindMany) Update(params ...RolePermissionSetParam) rolePermissionToRoleUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RolePermission"

	r.query.Outputs = countOutput

	var v rolePermissionToRoleUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type rolePermissionToRoleUpdateMany struct {
	query builder.Query
}

func (r rolePermissionToRoleUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r rolePermissionToRoleUpdateMany) rolePermissionModel() {}

func (r rolePermissionToRoleUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rolePermissionToRoleUpdateMany) Tx() RolePermissionManyTxResult {
	v := newRolePermissionManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r rolePermissionToRoleFindMany) Delete() rolePermissionToRoleDeleteMany {
	var v rolePermissionToRoleDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RolePermission"

	v.query.Outputs = countOutput

	return v
}

type rolePermissionToRoleDeleteMany struct {
	query builder.Query
}

func (r rolePermissionToRoleDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p rolePermissionToRoleDeleteMany) rolePermissionModel() {}

func (r rolePermissionToRoleDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rolePermissionToRoleDeleteMany) Tx() RolePermissionManyTxResult {
	v := newRolePermissionManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type rolePermissionToPermissionFindUnique struct {
	query builder.Query
}

func (r rolePermissionToPermissionFindUnique) getQuery() builder.Query {
	return r.query
}

func (r rolePermissionToPermissionFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r rolePermissionToPermissionFindUnique) with()                   {}
func (r rolePermissionToPermissionFindUnique) rolePermissionModel()    {}
func (r rolePermissionToPermissionFindUnique) rolePermissionRelation() {}

func (r rolePermissionToPermissionFindUnique) With(params ...PermissionRelationWith) rolePermissionToPermissionFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rolePermissionToPermissionFindUnique) Select(params ...rolePermissionPrismaFields) rolePermissionToPermissionFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionToPermissionFindUnique) Omit(params ...rolePermissionPrismaFields) rolePermissionToPermissionFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rolePermissionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionToPermissionFindUnique) Exec(ctx context.Context) (
	*RolePermissionModel,
	error,
) {
	var v *RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rolePermissionToPermissionFindUnique) ExecInner(ctx context.Context) (
	*InnerRolePermission,
	error,
) {
	var v *InnerRolePermission
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rolePermissionToPermissionFindUnique) Update(params ...RolePermissionSetParam) rolePermissionToPermissionUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RolePermission"

	var v rolePermissionToPermissionUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type rolePermissionToPermissionUpdateUnique struct {
	query builder.Query
}

func (r rolePermissionToPermissionUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r rolePermissionToPermissionUpdateUnique) rolePermissionModel() {}

func (r rolePermissionToPermissionUpdateUnique) Exec(ctx context.Context) (*RolePermissionModel, error) {
	var v RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rolePermissionToPermissionUpdateUnique) Tx() RolePermissionUniqueTxResult {
	v := newRolePermissionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r rolePermissionToPermissionFindUnique) Delete() rolePermissionToPermissionDeleteUnique {
	var v rolePermissionToPermissionDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RolePermission"

	return v
}

type rolePermissionToPermissionDeleteUnique struct {
	query builder.Query
}

func (r rolePermissionToPermissionDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p rolePermissionToPermissionDeleteUnique) rolePermissionModel() {}

func (r rolePermissionToPermissionDeleteUnique) Exec(ctx context.Context) (*RolePermissionModel, error) {
	var v RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rolePermissionToPermissionDeleteUnique) Tx() RolePermissionUniqueTxResult {
	v := newRolePermissionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type rolePermissionToPermissionFindFirst struct {
	query builder.Query
}

func (r rolePermissionToPermissionFindFirst) getQuery() builder.Query {
	return r.query
}

func (r rolePermissionToPermissionFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r rolePermissionToPermissionFindFirst) with()                   {}
func (r rolePermissionToPermissionFindFirst) rolePermissionModel()    {}
func (r rolePermissionToPermissionFindFirst) rolePermissionRelation() {}

func (r rolePermissionToPermissionFindFirst) With(params ...PermissionRelationWith) rolePermissionToPermissionFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rolePermissionToPermissionFindFirst) Select(params ...rolePermissionPrismaFields) rolePermissionToPermissionFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionToPermissionFindFirst) Omit(params ...rolePermissionPrismaFields) rolePermissionToPermissionFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rolePermissionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionToPermissionFindFirst) OrderBy(params ...PermissionOrderByParam) rolePermissionToPermissionFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r rolePermissionToPermissionFindFirst) Skip(count int) rolePermissionToPermissionFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r rolePermissionToPermissionFindFirst) Take(count int) rolePermissionToPermissionFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r rolePermissionToPermissionFindFirst) Cursor(cursor RolePermissionCursorParam) rolePermissionToPermissionFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r rolePermissionToPermissionFindFirst) Exec(ctx context.Context) (
	*RolePermissionModel,
	error,
) {
	var v *RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rolePermissionToPermissionFindFirst) ExecInner(ctx context.Context) (
	*InnerRolePermission,
	error,
) {
	var v *InnerRolePermission
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type rolePermissionToPermissionFindMany struct {
	query builder.Query
}

func (r rolePermissionToPermissionFindMany) getQuery() builder.Query {
	return r.query
}

func (r rolePermissionToPermissionFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r rolePermissionToPermissionFindMany) with()                   {}
func (r rolePermissionToPermissionFindMany) rolePermissionModel()    {}
func (r rolePermissionToPermissionFindMany) rolePermissionRelation() {}

func (r rolePermissionToPermissionFindMany) With(params ...PermissionRelationWith) rolePermissionToPermissionFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rolePermissionToPermissionFindMany) Select(params ...rolePermissionPrismaFields) rolePermissionToPermissionFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionToPermissionFindMany) Omit(params ...rolePermissionPrismaFields) rolePermissionToPermissionFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rolePermissionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionToPermissionFindMany) OrderBy(params ...PermissionOrderByParam) rolePermissionToPermissionFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r rolePermissionToPermissionFindMany) Skip(count int) rolePermissionToPermissionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r rolePermissionToPermissionFindMany) Take(count int) rolePermissionToPermissionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r rolePermissionToPermissionFindMany) Cursor(cursor RolePermissionCursorParam) rolePermissionToPermissionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r rolePermissionToPermissionFindMany) Exec(ctx context.Context) (
	[]RolePermissionModel,
	error,
) {
	var v []RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r rolePermissionToPermissionFindMany) ExecInner(ctx context.Context) (
	[]InnerRolePermission,
	error,
) {
	var v []InnerRolePermission
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r rolePermissionToPermissionFindMany) Update(params ...RolePermissionSetParam) rolePermissionToPermissionUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RolePermission"

	r.query.Outputs = countOutput

	var v rolePermissionToPermissionUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type rolePermissionToPermissionUpdateMany struct {
	query builder.Query
}

func (r rolePermissionToPermissionUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r rolePermissionToPermissionUpdateMany) rolePermissionModel() {}

func (r rolePermissionToPermissionUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rolePermissionToPermissionUpdateMany) Tx() RolePermissionManyTxResult {
	v := newRolePermissionManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r rolePermissionToPermissionFindMany) Delete() rolePermissionToPermissionDeleteMany {
	var v rolePermissionToPermissionDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RolePermission"

	v.query.Outputs = countOutput

	return v
}

type rolePermissionToPermissionDeleteMany struct {
	query builder.Query
}

func (r rolePermissionToPermissionDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p rolePermissionToPermissionDeleteMany) rolePermissionModel() {}

func (r rolePermissionToPermissionDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rolePermissionToPermissionDeleteMany) Tx() RolePermissionManyTxResult {
	v := newRolePermissionManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type rolePermissionFindUnique struct {
	query builder.Query
}

func (r rolePermissionFindUnique) getQuery() builder.Query {
	return r.query
}

func (r rolePermissionFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r rolePermissionFindUnique) with()                   {}
func (r rolePermissionFindUnique) rolePermissionModel()    {}
func (r rolePermissionFindUnique) rolePermissionRelation() {}

func (r rolePermissionActions) FindUnique(
	params RolePermissionEqualsUniqueWhereParam,
) rolePermissionFindUnique {
	var v rolePermissionFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "RolePermission"
	v.query.Outputs = rolePermissionOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r rolePermissionFindUnique) With(params ...RolePermissionRelationWith) rolePermissionFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rolePermissionFindUnique) Select(params ...rolePermissionPrismaFields) rolePermissionFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionFindUnique) Omit(params ...rolePermissionPrismaFields) rolePermissionFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rolePermissionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionFindUnique) Exec(ctx context.Context) (
	*RolePermissionModel,
	error,
) {
	var v *RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rolePermissionFindUnique) ExecInner(ctx context.Context) (
	*InnerRolePermission,
	error,
) {
	var v *InnerRolePermission
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rolePermissionFindUnique) Update(params ...RolePermissionSetParam) rolePermissionUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "RolePermission"

	var v rolePermissionUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type rolePermissionUpdateUnique struct {
	query builder.Query
}

func (r rolePermissionUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r rolePermissionUpdateUnique) rolePermissionModel() {}

func (r rolePermissionUpdateUnique) Exec(ctx context.Context) (*RolePermissionModel, error) {
	var v RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rolePermissionUpdateUnique) Tx() RolePermissionUniqueTxResult {
	v := newRolePermissionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r rolePermissionFindUnique) Delete() rolePermissionDeleteUnique {
	var v rolePermissionDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "RolePermission"

	return v
}

type rolePermissionDeleteUnique struct {
	query builder.Query
}

func (r rolePermissionDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p rolePermissionDeleteUnique) rolePermissionModel() {}

func (r rolePermissionDeleteUnique) Exec(ctx context.Context) (*RolePermissionModel, error) {
	var v RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rolePermissionDeleteUnique) Tx() RolePermissionUniqueTxResult {
	v := newRolePermissionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type rolePermissionFindFirst struct {
	query builder.Query
}

func (r rolePermissionFindFirst) getQuery() builder.Query {
	return r.query
}

func (r rolePermissionFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r rolePermissionFindFirst) with()                   {}
func (r rolePermissionFindFirst) rolePermissionModel()    {}
func (r rolePermissionFindFirst) rolePermissionRelation() {}

func (r rolePermissionActions) FindFirst(
	params ...RolePermissionWhereParam,
) rolePermissionFindFirst {
	var v rolePermissionFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "RolePermission"
	v.query.Outputs = rolePermissionOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r rolePermissionFindFirst) With(params ...RolePermissionRelationWith) rolePermissionFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rolePermissionFindFirst) Select(params ...rolePermissionPrismaFields) rolePermissionFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionFindFirst) Omit(params ...rolePermissionPrismaFields) rolePermissionFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rolePermissionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionFindFirst) OrderBy(params ...RolePermissionOrderByParam) rolePermissionFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r rolePermissionFindFirst) Skip(count int) rolePermissionFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r rolePermissionFindFirst) Take(count int) rolePermissionFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r rolePermissionFindFirst) Cursor(cursor RolePermissionCursorParam) rolePermissionFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r rolePermissionFindFirst) Exec(ctx context.Context) (
	*RolePermissionModel,
	error,
) {
	var v *RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r rolePermissionFindFirst) ExecInner(ctx context.Context) (
	*InnerRolePermission,
	error,
) {
	var v *InnerRolePermission
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type rolePermissionFindMany struct {
	query builder.Query
}

func (r rolePermissionFindMany) getQuery() builder.Query {
	return r.query
}

func (r rolePermissionFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r rolePermissionFindMany) with()                   {}
func (r rolePermissionFindMany) rolePermissionModel()    {}
func (r rolePermissionFindMany) rolePermissionRelation() {}

func (r rolePermissionActions) FindMany(
	params ...RolePermissionWhereParam,
) rolePermissionFindMany {
	var v rolePermissionFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "RolePermission"
	v.query.Outputs = rolePermissionOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r rolePermissionFindMany) With(params ...RolePermissionRelationWith) rolePermissionFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r rolePermissionFindMany) Select(params ...rolePermissionPrismaFields) rolePermissionFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionFindMany) Omit(params ...rolePermissionPrismaFields) rolePermissionFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range rolePermissionOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r rolePermissionFindMany) OrderBy(params ...RolePermissionOrderByParam) rolePermissionFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r rolePermissionFindMany) Skip(count int) rolePermissionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r rolePermissionFindMany) Take(count int) rolePermissionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r rolePermissionFindMany) Cursor(cursor RolePermissionCursorParam) rolePermissionFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r rolePermissionFindMany) Exec(ctx context.Context) (
	[]RolePermissionModel,
	error,
) {
	var v []RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r rolePermissionFindMany) ExecInner(ctx context.Context) (
	[]InnerRolePermission,
	error,
) {
	var v []InnerRolePermission
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r rolePermissionFindMany) Update(params ...RolePermissionSetParam) rolePermissionUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "RolePermission"

	r.query.Outputs = countOutput

	var v rolePermissionUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type rolePermissionUpdateMany struct {
	query builder.Query
}

func (r rolePermissionUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r rolePermissionUpdateMany) rolePermissionModel() {}

func (r rolePermissionUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rolePermissionUpdateMany) Tx() RolePermissionManyTxResult {
	v := newRolePermissionManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r rolePermissionFindMany) Delete() rolePermissionDeleteMany {
	var v rolePermissionDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "RolePermission"

	v.query.Outputs = countOutput

	return v
}

type rolePermissionDeleteMany struct {
	query builder.Query
}

func (r rolePermissionDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p rolePermissionDeleteMany) rolePermissionModel() {}

func (r rolePermissionDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rolePermissionDeleteMany) Tx() RolePermissionManyTxResult {
	v := newRolePermissionManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userRoleToUserFindUnique struct {
	query builder.Query
}

func (r userRoleToUserFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userRoleToUserFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userRoleToUserFindUnique) with()             {}
func (r userRoleToUserFindUnique) userRoleModel()    {}
func (r userRoleToUserFindUnique) userRoleRelation() {}

func (r userRoleToUserFindUnique) With(params ...UserRelationWith) userRoleToUserFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userRoleToUserFindUnique) Select(params ...userRolePrismaFields) userRoleToUserFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleToUserFindUnique) Omit(params ...userRolePrismaFields) userRoleToUserFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userRoleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleToUserFindUnique) Exec(ctx context.Context) (
	*UserRoleModel,
	error,
) {
	var v *UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userRoleToUserFindUnique) ExecInner(ctx context.Context) (
	*InnerUserRole,
	error,
) {
	var v *InnerUserRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userRoleToUserFindUnique) Update(params ...UserRoleSetParam) userRoleToUserUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "UserRole"

	var v userRoleToUserUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userRoleToUserUpdateUnique struct {
	query builder.Query
}

func (r userRoleToUserUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userRoleToUserUpdateUnique) userRoleModel() {}

func (r userRoleToUserUpdateUnique) Exec(ctx context.Context) (*UserRoleModel, error) {
	var v UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userRoleToUserUpdateUnique) Tx() UserRoleUniqueTxResult {
	v := newUserRoleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userRoleToUserFindUnique) Delete() userRoleToUserDeleteUnique {
	var v userRoleToUserDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "UserRole"

	return v
}

type userRoleToUserDeleteUnique struct {
	query builder.Query
}

func (r userRoleToUserDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userRoleToUserDeleteUnique) userRoleModel() {}

func (r userRoleToUserDeleteUnique) Exec(ctx context.Context) (*UserRoleModel, error) {
	var v UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userRoleToUserDeleteUnique) Tx() UserRoleUniqueTxResult {
	v := newUserRoleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userRoleToUserFindFirst struct {
	query builder.Query
}

func (r userRoleToUserFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userRoleToUserFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userRoleToUserFindFirst) with()             {}
func (r userRoleToUserFindFirst) userRoleModel()    {}
func (r userRoleToUserFindFirst) userRoleRelation() {}

func (r userRoleToUserFindFirst) With(params ...UserRelationWith) userRoleToUserFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userRoleToUserFindFirst) Select(params ...userRolePrismaFields) userRoleToUserFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleToUserFindFirst) Omit(params ...userRolePrismaFields) userRoleToUserFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userRoleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleToUserFindFirst) OrderBy(params ...UserOrderByParam) userRoleToUserFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userRoleToUserFindFirst) Skip(count int) userRoleToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userRoleToUserFindFirst) Take(count int) userRoleToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userRoleToUserFindFirst) Cursor(cursor UserRoleCursorParam) userRoleToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userRoleToUserFindFirst) Exec(ctx context.Context) (
	*UserRoleModel,
	error,
) {
	var v *UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userRoleToUserFindFirst) ExecInner(ctx context.Context) (
	*InnerUserRole,
	error,
) {
	var v *InnerUserRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userRoleToUserFindMany struct {
	query builder.Query
}

func (r userRoleToUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r userRoleToUserFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userRoleToUserFindMany) with()             {}
func (r userRoleToUserFindMany) userRoleModel()    {}
func (r userRoleToUserFindMany) userRoleRelation() {}

func (r userRoleToUserFindMany) With(params ...UserRelationWith) userRoleToUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userRoleToUserFindMany) Select(params ...userRolePrismaFields) userRoleToUserFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleToUserFindMany) Omit(params ...userRolePrismaFields) userRoleToUserFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userRoleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleToUserFindMany) OrderBy(params ...UserOrderByParam) userRoleToUserFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userRoleToUserFindMany) Skip(count int) userRoleToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userRoleToUserFindMany) Take(count int) userRoleToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userRoleToUserFindMany) Cursor(cursor UserRoleCursorParam) userRoleToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userRoleToUserFindMany) Exec(ctx context.Context) (
	[]UserRoleModel,
	error,
) {
	var v []UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userRoleToUserFindMany) ExecInner(ctx context.Context) (
	[]InnerUserRole,
	error,
) {
	var v []InnerUserRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userRoleToUserFindMany) Update(params ...UserRoleSetParam) userRoleToUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "UserRole"

	r.query.Outputs = countOutput

	var v userRoleToUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userRoleToUserUpdateMany struct {
	query builder.Query
}

func (r userRoleToUserUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userRoleToUserUpdateMany) userRoleModel() {}

func (r userRoleToUserUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userRoleToUserUpdateMany) Tx() UserRoleManyTxResult {
	v := newUserRoleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userRoleToUserFindMany) Delete() userRoleToUserDeleteMany {
	var v userRoleToUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "UserRole"

	v.query.Outputs = countOutput

	return v
}

type userRoleToUserDeleteMany struct {
	query builder.Query
}

func (r userRoleToUserDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userRoleToUserDeleteMany) userRoleModel() {}

func (r userRoleToUserDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userRoleToUserDeleteMany) Tx() UserRoleManyTxResult {
	v := newUserRoleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userRoleToRoleFindUnique struct {
	query builder.Query
}

func (r userRoleToRoleFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userRoleToRoleFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userRoleToRoleFindUnique) with()             {}
func (r userRoleToRoleFindUnique) userRoleModel()    {}
func (r userRoleToRoleFindUnique) userRoleRelation() {}

func (r userRoleToRoleFindUnique) With(params ...RoleRelationWith) userRoleToRoleFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userRoleToRoleFindUnique) Select(params ...userRolePrismaFields) userRoleToRoleFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleToRoleFindUnique) Omit(params ...userRolePrismaFields) userRoleToRoleFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userRoleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleToRoleFindUnique) Exec(ctx context.Context) (
	*UserRoleModel,
	error,
) {
	var v *UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userRoleToRoleFindUnique) ExecInner(ctx context.Context) (
	*InnerUserRole,
	error,
) {
	var v *InnerUserRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userRoleToRoleFindUnique) Update(params ...UserRoleSetParam) userRoleToRoleUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "UserRole"

	var v userRoleToRoleUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userRoleToRoleUpdateUnique struct {
	query builder.Query
}

func (r userRoleToRoleUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userRoleToRoleUpdateUnique) userRoleModel() {}

func (r userRoleToRoleUpdateUnique) Exec(ctx context.Context) (*UserRoleModel, error) {
	var v UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userRoleToRoleUpdateUnique) Tx() UserRoleUniqueTxResult {
	v := newUserRoleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userRoleToRoleFindUnique) Delete() userRoleToRoleDeleteUnique {
	var v userRoleToRoleDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "UserRole"

	return v
}

type userRoleToRoleDeleteUnique struct {
	query builder.Query
}

func (r userRoleToRoleDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userRoleToRoleDeleteUnique) userRoleModel() {}

func (r userRoleToRoleDeleteUnique) Exec(ctx context.Context) (*UserRoleModel, error) {
	var v UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userRoleToRoleDeleteUnique) Tx() UserRoleUniqueTxResult {
	v := newUserRoleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userRoleToRoleFindFirst struct {
	query builder.Query
}

func (r userRoleToRoleFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userRoleToRoleFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userRoleToRoleFindFirst) with()             {}
func (r userRoleToRoleFindFirst) userRoleModel()    {}
func (r userRoleToRoleFindFirst) userRoleRelation() {}

func (r userRoleToRoleFindFirst) With(params ...RoleRelationWith) userRoleToRoleFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userRoleToRoleFindFirst) Select(params ...userRolePrismaFields) userRoleToRoleFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleToRoleFindFirst) Omit(params ...userRolePrismaFields) userRoleToRoleFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userRoleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleToRoleFindFirst) OrderBy(params ...RoleOrderByParam) userRoleToRoleFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userRoleToRoleFindFirst) Skip(count int) userRoleToRoleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userRoleToRoleFindFirst) Take(count int) userRoleToRoleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userRoleToRoleFindFirst) Cursor(cursor UserRoleCursorParam) userRoleToRoleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userRoleToRoleFindFirst) Exec(ctx context.Context) (
	*UserRoleModel,
	error,
) {
	var v *UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userRoleToRoleFindFirst) ExecInner(ctx context.Context) (
	*InnerUserRole,
	error,
) {
	var v *InnerUserRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userRoleToRoleFindMany struct {
	query builder.Query
}

func (r userRoleToRoleFindMany) getQuery() builder.Query {
	return r.query
}

func (r userRoleToRoleFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userRoleToRoleFindMany) with()             {}
func (r userRoleToRoleFindMany) userRoleModel()    {}
func (r userRoleToRoleFindMany) userRoleRelation() {}

func (r userRoleToRoleFindMany) With(params ...RoleRelationWith) userRoleToRoleFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userRoleToRoleFindMany) Select(params ...userRolePrismaFields) userRoleToRoleFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleToRoleFindMany) Omit(params ...userRolePrismaFields) userRoleToRoleFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userRoleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleToRoleFindMany) OrderBy(params ...RoleOrderByParam) userRoleToRoleFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userRoleToRoleFindMany) Skip(count int) userRoleToRoleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userRoleToRoleFindMany) Take(count int) userRoleToRoleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userRoleToRoleFindMany) Cursor(cursor UserRoleCursorParam) userRoleToRoleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userRoleToRoleFindMany) Exec(ctx context.Context) (
	[]UserRoleModel,
	error,
) {
	var v []UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userRoleToRoleFindMany) ExecInner(ctx context.Context) (
	[]InnerUserRole,
	error,
) {
	var v []InnerUserRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userRoleToRoleFindMany) Update(params ...UserRoleSetParam) userRoleToRoleUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "UserRole"

	r.query.Outputs = countOutput

	var v userRoleToRoleUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userRoleToRoleUpdateMany struct {
	query builder.Query
}

func (r userRoleToRoleUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userRoleToRoleUpdateMany) userRoleModel() {}

func (r userRoleToRoleUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userRoleToRoleUpdateMany) Tx() UserRoleManyTxResult {
	v := newUserRoleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userRoleToRoleFindMany) Delete() userRoleToRoleDeleteMany {
	var v userRoleToRoleDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "UserRole"

	v.query.Outputs = countOutput

	return v
}

type userRoleToRoleDeleteMany struct {
	query builder.Query
}

func (r userRoleToRoleDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userRoleToRoleDeleteMany) userRoleModel() {}

func (r userRoleToRoleDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userRoleToRoleDeleteMany) Tx() UserRoleManyTxResult {
	v := newUserRoleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userRoleFindUnique struct {
	query builder.Query
}

func (r userRoleFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userRoleFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userRoleFindUnique) with()             {}
func (r userRoleFindUnique) userRoleModel()    {}
func (r userRoleFindUnique) userRoleRelation() {}

func (r userRoleActions) FindUnique(
	params UserRoleEqualsUniqueWhereParam,
) userRoleFindUnique {
	var v userRoleFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "UserRole"
	v.query.Outputs = userRoleOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userRoleFindUnique) With(params ...UserRoleRelationWith) userRoleFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userRoleFindUnique) Select(params ...userRolePrismaFields) userRoleFindUnique {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleFindUnique) Omit(params ...userRolePrismaFields) userRoleFindUnique {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userRoleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleFindUnique) Exec(ctx context.Context) (
	*UserRoleModel,
	error,
) {
	var v *UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userRoleFindUnique) ExecInner(ctx context.Context) (
	*InnerUserRole,
	error,
) {
	var v *InnerUserRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userRoleFindUnique) Update(params ...UserRoleSetParam) userRoleUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "UserRole"

	var v userRoleUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userRoleUpdateUnique struct {
	query builder.Query
}

func (r userRoleUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userRoleUpdateUnique) userRoleModel() {}

func (r userRoleUpdateUnique) Exec(ctx context.Context) (*UserRoleModel, error) {
	var v UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userRoleUpdateUnique) Tx() UserRoleUniqueTxResult {
	v := newUserRoleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userRoleFindUnique) Delete() userRoleDeleteUnique {
	var v userRoleDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "UserRole"

	return v
}

type userRoleDeleteUnique struct {
	query builder.Query
}

func (r userRoleDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userRoleDeleteUnique) userRoleModel() {}

func (r userRoleDeleteUnique) Exec(ctx context.Context) (*UserRoleModel, error) {
	var v UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userRoleDeleteUnique) Tx() UserRoleUniqueTxResult {
	v := newUserRoleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userRoleFindFirst struct {
	query builder.Query
}

func (r userRoleFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userRoleFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userRoleFindFirst) with()             {}
func (r userRoleFindFirst) userRoleModel()    {}
func (r userRoleFindFirst) userRoleRelation() {}

func (r userRoleActions) FindFirst(
	params ...UserRoleWhereParam,
) userRoleFindFirst {
	var v userRoleFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "UserRole"
	v.query.Outputs = userRoleOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userRoleFindFirst) With(params ...UserRoleRelationWith) userRoleFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userRoleFindFirst) Select(params ...userRolePrismaFields) userRoleFindFirst {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleFindFirst) Omit(params ...userRolePrismaFields) userRoleFindFirst {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userRoleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleFindFirst) OrderBy(params ...UserRoleOrderByParam) userRoleFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userRoleFindFirst) Skip(count int) userRoleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userRoleFindFirst) Take(count int) userRoleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userRoleFindFirst) Cursor(cursor UserRoleCursorParam) userRoleFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userRoleFindFirst) Exec(ctx context.Context) (
	*UserRoleModel,
	error,
) {
	var v *UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userRoleFindFirst) ExecInner(ctx context.Context) (
	*InnerUserRole,
	error,
) {
	var v *InnerUserRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userRoleFindMany struct {
	query builder.Query
}

func (r userRoleFindMany) getQuery() builder.Query {
	return r.query
}

func (r userRoleFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userRoleFindMany) with()             {}
func (r userRoleFindMany) userRoleModel()    {}
func (r userRoleFindMany) userRoleRelation() {}

func (r userRoleActions) FindMany(
	params ...UserRoleWhereParam,
) userRoleFindMany {
	var v userRoleFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "UserRole"
	v.query.Outputs = userRoleOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userRoleFindMany) With(params ...UserRoleRelationWith) userRoleFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userRoleFindMany) Select(params ...userRolePrismaFields) userRoleFindMany {
	var outputs []builder.Output

	for _, param := range params {
		outputs = append(outputs, builder.Output{
			Name: string(param),
		})
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleFindMany) Omit(params ...userRolePrismaFields) userRoleFindMany {
	var outputs []builder.Output

	var raw []string
	for _, param := range params {
		raw = append(raw, string(param))
	}

	for _, output := range userRoleOutput {
		if !slices.Contains(raw, output.Name) {
			outputs = append(outputs, output)
		}
	}

	r.query.Outputs = outputs

	return r
}

func (r userRoleFindMany) OrderBy(params ...UserRoleOrderByParam) userRoleFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userRoleFindMany) Skip(count int) userRoleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userRoleFindMany) Take(count int) userRoleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userRoleFindMany) Cursor(cursor UserRoleCursorParam) userRoleFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userRoleFindMany) Exec(ctx context.Context) (
	[]UserRoleModel,
	error,
) {
	var v []UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userRoleFindMany) ExecInner(ctx context.Context) (
	[]InnerUserRole,
	error,
) {
	var v []InnerUserRole
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userRoleFindMany) Update(params ...UserRoleSetParam) userRoleUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "UserRole"

	r.query.Outputs = countOutput

	var v userRoleUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userRoleUpdateMany struct {
	query builder.Query
}

func (r userRoleUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userRoleUpdateMany) userRoleModel() {}

func (r userRoleUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userRoleUpdateMany) Tx() UserRoleManyTxResult {
	v := newUserRoleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userRoleFindMany) Delete() userRoleDeleteMany {
	var v userRoleDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "UserRole"

	v.query.Outputs = countOutput

	return v
}

type userRoleDeleteMany struct {
	query builder.Query
}

func (r userRoleDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userRoleDeleteMany) userRoleModel() {}

func (r userRoleDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userRoleDeleteMany) Tx() UserRoleManyTxResult {
	v := newUserRoleManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template transaction.gotpl ---

func newOrganizationUniqueTxResult() OrganizationUniqueTxResult {
	return OrganizationUniqueTxResult{
		result: &transaction.Result{},
	}
}

type OrganizationUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p OrganizationUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p OrganizationUniqueTxResult) IsTx() {}

func (r OrganizationUniqueTxResult) Result() (v *OrganizationModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newOrganizationManyTxResult() OrganizationManyTxResult {
	return OrganizationManyTxResult{
		result: &transaction.Result{},
	}
}

type OrganizationManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p OrganizationManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p OrganizationManyTxResult) IsTx() {}

func (r OrganizationManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newUserUniqueTxResult() UserUniqueTxResult {
	return UserUniqueTxResult{
		result: &transaction.Result{},
	}
}

type UserUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserUniqueTxResult) IsTx() {}

func (r UserUniqueTxResult) Result() (v *UserModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newUserManyTxResult() UserManyTxResult {
	return UserManyTxResult{
		result: &transaction.Result{},
	}
}

type UserManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserManyTxResult) IsTx() {}

func (r UserManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newSessionUniqueTxResult() SessionUniqueTxResult {
	return SessionUniqueTxResult{
		result: &transaction.Result{},
	}
}

type SessionUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p SessionUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p SessionUniqueTxResult) IsTx() {}

func (r SessionUniqueTxResult) Result() (v *SessionModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newSessionManyTxResult() SessionManyTxResult {
	return SessionManyTxResult{
		result: &transaction.Result{},
	}
}

type SessionManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p SessionManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p SessionManyTxResult) IsTx() {}

func (r SessionManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newRegistrationUniqueTxResult() RegistrationUniqueTxResult {
	return RegistrationUniqueTxResult{
		result: &transaction.Result{},
	}
}

type RegistrationUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p RegistrationUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p RegistrationUniqueTxResult) IsTx() {}

func (r RegistrationUniqueTxResult) Result() (v *RegistrationModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newRegistrationManyTxResult() RegistrationManyTxResult {
	return RegistrationManyTxResult{
		result: &transaction.Result{},
	}
}

type RegistrationManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p RegistrationManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p RegistrationManyTxResult) IsTx() {}

func (r RegistrationManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newRoleUniqueTxResult() RoleUniqueTxResult {
	return RoleUniqueTxResult{
		result: &transaction.Result{},
	}
}

type RoleUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p RoleUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p RoleUniqueTxResult) IsTx() {}

func (r RoleUniqueTxResult) Result() (v *RoleModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newRoleManyTxResult() RoleManyTxResult {
	return RoleManyTxResult{
		result: &transaction.Result{},
	}
}

type RoleManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p RoleManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p RoleManyTxResult) IsTx() {}

func (r RoleManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPermissionUniqueTxResult() PermissionUniqueTxResult {
	return PermissionUniqueTxResult{
		result: &transaction.Result{},
	}
}

type PermissionUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PermissionUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PermissionUniqueTxResult) IsTx() {}

func (r PermissionUniqueTxResult) Result() (v *PermissionModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newPermissionManyTxResult() PermissionManyTxResult {
	return PermissionManyTxResult{
		result: &transaction.Result{},
	}
}

type PermissionManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p PermissionManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p PermissionManyTxResult) IsTx() {}

func (r PermissionManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newRolePermissionUniqueTxResult() RolePermissionUniqueTxResult {
	return RolePermissionUniqueTxResult{
		result: &transaction.Result{},
	}
}

type RolePermissionUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p RolePermissionUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p RolePermissionUniqueTxResult) IsTx() {}

func (r RolePermissionUniqueTxResult) Result() (v *RolePermissionModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newRolePermissionManyTxResult() RolePermissionManyTxResult {
	return RolePermissionManyTxResult{
		result: &transaction.Result{},
	}
}

type RolePermissionManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p RolePermissionManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p RolePermissionManyTxResult) IsTx() {}

func (r RolePermissionManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newUserRoleUniqueTxResult() UserRoleUniqueTxResult {
	return UserRoleUniqueTxResult{
		result: &transaction.Result{},
	}
}

type UserRoleUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserRoleUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserRoleUniqueTxResult) IsTx() {}

func (r UserRoleUniqueTxResult) Result() (v *UserRoleModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newUserRoleManyTxResult() UserRoleManyTxResult {
	return UserRoleManyTxResult{
		result: &transaction.Result{},
	}
}

type UserRoleManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserRoleManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserRoleManyTxResult) IsTx() {}

func (r UserRoleManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

// --- template upsert.gotpl ---

type organizationUpsertOne struct {
	query builder.Query
}

func (r organizationUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r organizationUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r organizationUpsertOne) with()                 {}
func (r organizationUpsertOne) organizationModel()    {}
func (r organizationUpsertOne) organizationRelation() {}

func (r organizationActions) UpsertOne(
	params OrganizationEqualsUniqueWhereParam,
) organizationUpsertOne {
	var v organizationUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Organization"
	v.query.Outputs = organizationOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r organizationUpsertOne) Create(

	_name OrganizationWithPrismaNameSetParam,

	optional ...OrganizationSetParam,
) organizationUpsertOne {
	var v organizationUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _name.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r organizationUpsertOne) Update(
	params ...OrganizationSetParam,
) organizationUpsertOne {
	var v organizationUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r organizationUpsertOne) Exec(ctx context.Context) (*OrganizationModel, error) {
	var v OrganizationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r organizationUpsertOne) Tx() OrganizationUniqueTxResult {
	v := newOrganizationUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userUpsertOne struct {
	query builder.Query
}

func (r userUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r userUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpsertOne) with()         {}
func (r userUpsertOne) userModel()    {}
func (r userUpsertOne) userRelation() {}

func (r userActions) UpsertOne(
	params UserEqualsUniqueWhereParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userUpsertOne) Create(

	_email UserWithPrismaEmailSetParam,
	_password UserWithPrismaPasswordSetParam,
	_status UserWithPrismaStatusSetParam,
	_organization UserWithPrismaOrganizationSetParam,

	optional ...UserSetParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _email.field())
	fields = append(fields, _password.field())
	fields = append(fields, _status.field())
	fields = append(fields, _organization.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r userUpsertOne) Update(
	params ...UserSetParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r userUpsertOne) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpsertOne) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type sessionUpsertOne struct {
	query builder.Query
}

func (r sessionUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r sessionUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r sessionUpsertOne) with()            {}
func (r sessionUpsertOne) sessionModel()    {}
func (r sessionUpsertOne) sessionRelation() {}

func (r sessionActions) UpsertOne(
	params SessionEqualsUniqueWhereParam,
) sessionUpsertOne {
	var v sessionUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Session"
	v.query.Outputs = sessionOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r sessionUpsertOne) Create(

	_status SessionWithPrismaStatusSetParam,
	_user SessionWithPrismaUserSetParam,

	optional ...SessionSetParam,
) sessionUpsertOne {
	var v sessionUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _status.field())
	fields = append(fields, _user.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r sessionUpsertOne) Update(
	params ...SessionSetParam,
) sessionUpsertOne {
	var v sessionUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r sessionUpsertOne) Exec(ctx context.Context) (*SessionModel, error) {
	var v SessionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r sessionUpsertOne) Tx() SessionUniqueTxResult {
	v := newSessionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type registrationUpsertOne struct {
	query builder.Query
}

func (r registrationUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r registrationUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r registrationUpsertOne) with()                 {}
func (r registrationUpsertOne) registrationModel()    {}
func (r registrationUpsertOne) registrationRelation() {}

func (r registrationActions) UpsertOne(
	params RegistrationEqualsUniqueWhereParam,
) registrationUpsertOne {
	var v registrationUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Registration"
	v.query.Outputs = registrationOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r registrationUpsertOne) Create(

	_email RegistrationWithPrismaEmailSetParam,
	_password RegistrationWithPrismaPasswordSetParam,
	_status RegistrationWithPrismaStatusSetParam,
	_role RegistrationWithPrismaRoleSetParam,
	_code RegistrationWithPrismaCodeSetParam,

	optional ...RegistrationSetParam,
) registrationUpsertOne {
	var v registrationUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _email.field())
	fields = append(fields, _password.field())
	fields = append(fields, _status.field())
	fields = append(fields, _role.field())
	fields = append(fields, _code.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r registrationUpsertOne) Update(
	params ...RegistrationSetParam,
) registrationUpsertOne {
	var v registrationUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r registrationUpsertOne) Exec(ctx context.Context) (*RegistrationModel, error) {
	var v RegistrationModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r registrationUpsertOne) Tx() RegistrationUniqueTxResult {
	v := newRegistrationUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type roleUpsertOne struct {
	query builder.Query
}

func (r roleUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r roleUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r roleUpsertOne) with()         {}
func (r roleUpsertOne) roleModel()    {}
func (r roleUpsertOne) roleRelation() {}

func (r roleActions) UpsertOne(
	params RoleEqualsUniqueWhereParam,
) roleUpsertOne {
	var v roleUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Role"
	v.query.Outputs = roleOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r roleUpsertOne) Create(

	_name RoleWithPrismaNameSetParam,

	optional ...RoleSetParam,
) roleUpsertOne {
	var v roleUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _name.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r roleUpsertOne) Update(
	params ...RoleSetParam,
) roleUpsertOne {
	var v roleUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r roleUpsertOne) Exec(ctx context.Context) (*RoleModel, error) {
	var v RoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r roleUpsertOne) Tx() RoleUniqueTxResult {
	v := newRoleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type permissionUpsertOne struct {
	query builder.Query
}

func (r permissionUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r permissionUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r permissionUpsertOne) with()               {}
func (r permissionUpsertOne) permissionModel()    {}
func (r permissionUpsertOne) permissionRelation() {}

func (r permissionActions) UpsertOne(
	params PermissionEqualsUniqueWhereParam,
) permissionUpsertOne {
	var v permissionUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Permission"
	v.query.Outputs = permissionOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r permissionUpsertOne) Create(

	_name PermissionWithPrismaNameSetParam,

	optional ...PermissionSetParam,
) permissionUpsertOne {
	var v permissionUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _name.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r permissionUpsertOne) Update(
	params ...PermissionSetParam,
) permissionUpsertOne {
	var v permissionUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r permissionUpsertOne) Exec(ctx context.Context) (*PermissionModel, error) {
	var v PermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r permissionUpsertOne) Tx() PermissionUniqueTxResult {
	v := newPermissionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type rolePermissionUpsertOne struct {
	query builder.Query
}

func (r rolePermissionUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r rolePermissionUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r rolePermissionUpsertOne) with()                   {}
func (r rolePermissionUpsertOne) rolePermissionModel()    {}
func (r rolePermissionUpsertOne) rolePermissionRelation() {}

func (r rolePermissionActions) UpsertOne(
	params RolePermissionEqualsUniqueWhereParam,
) rolePermissionUpsertOne {
	var v rolePermissionUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "RolePermission"
	v.query.Outputs = rolePermissionOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r rolePermissionUpsertOne) Create(

	_role RolePermissionWithPrismaRoleSetParam,
	_permission RolePermissionWithPrismaPermissionSetParam,

	optional ...RolePermissionSetParam,
) rolePermissionUpsertOne {
	var v rolePermissionUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _role.field())
	fields = append(fields, _permission.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r rolePermissionUpsertOne) Update(
	params ...RolePermissionSetParam,
) rolePermissionUpsertOne {
	var v rolePermissionUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r rolePermissionUpsertOne) Exec(ctx context.Context) (*RolePermissionModel, error) {
	var v RolePermissionModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r rolePermissionUpsertOne) Tx() RolePermissionUniqueTxResult {
	v := newRolePermissionUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userRoleUpsertOne struct {
	query builder.Query
}

func (r userRoleUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r userRoleUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r userRoleUpsertOne) with()             {}
func (r userRoleUpsertOne) userRoleModel()    {}
func (r userRoleUpsertOne) userRoleRelation() {}

func (r userRoleActions) UpsertOne(
	params UserRoleEqualsUniqueWhereParam,
) userRoleUpsertOne {
	var v userRoleUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "UserRole"
	v.query.Outputs = userRoleOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userRoleUpsertOne) Create(

	_user UserRoleWithPrismaUserSetParam,
	_role UserRoleWithPrismaRoleSetParam,

	optional ...UserRoleSetParam,
) userRoleUpsertOne {
	var v userRoleUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _user.field())
	fields = append(fields, _role.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r userRoleUpsertOne) Update(
	params ...UserRoleSetParam,
) userRoleUpsertOne {
	var v userRoleUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r userRoleUpsertOne) Exec(ctx context.Context) (*UserRoleModel, error) {
	var v UserRoleModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userRoleUpsertOne) Tx() UserRoleUniqueTxResult {
	v := newUserRoleUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}
